Imports Telerik.WinControls
Public Class Emitidas
    Dim activo As Boolean
    Dim Dato As DataSet
    Dim DatoC As DataSet
    Public serV As String = My.Forms.Inicio.txtServerDB.Text

    Private Sub Generar_Carga_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        Cargar_clientes()
        Diseño()
    End Sub
    Private Sub Diseño()
        Eventos.DiseñoTablaEnca(TablaImportar)
        Eventos.DiseñoTablaEnca(TablaC)
        Eventos.DiseñoTablaEnca(TablaD)
    End Sub
    Private Sub Cargar_clientes()
        Me.lstCliente.Cargar(" SELECT DISTINCT  Empresa.Id_Empresa, Empresa.Razon_Social, Usuarios.Usuario
                            FROM     Empresa INNER JOIN
                            Control_Equipos_Clientes ON Empresa.Id_Empresa = Control_Equipos_Clientes.Id_Empresa INNER JOIN
                            Equipos ON Control_Equipos_Clientes.Id_Equipo = Equipos.Id_Equipo INNER JOIN
                            Usuarios_Equipos ON Equipos.Id_Equipo = Usuarios_Equipos.Id_Equipo INNER JOIN
                            Usuarios ON Usuarios_Equipos.ID_Usuario = Usuarios.ID_Usuario
                            WHERE  (Usuarios.Usuario LIKE '%" & My.Forms.Inicio.LblUsuario.Text & "%')")
        Me.lstCliente.SelectItem = My.Forms.Inicio.Clt
        Me.LstTexto.cargar(" Select '','' ")
    End Sub
    Private Sub CmdLimpiar_Click(sender As Object, e As EventArgs) Handles CmdLimpiar.Click
        If Me.TablaImportar.Rows.Count > 0 Then
            Limpia()
            Me.ContabilizacionC.Items.Clear()
            Me.lstCliente.SelectText = ""
            Me.LstTexto.SelectText = ""
        End If
    End Sub
    Private Sub Limpia()
        Me.TablaImportar.Rows.Clear()
        Me.lbl16.Text = ""
        Me.lbl0.Text = ""
        Me.lble.Text = ""
    End Sub
    Private Sub cmdCerrar_Click(sender As Object, e As EventArgs) Handles cmdCerrar.Click
        Me.Close()
    End Sub
#Region "Anterior"
    '    Private Sub Cmd_Procesar_Click(sender As Object, e As EventArgs) Handles Cmd_Procesar.Click
    '        RadMessageBox.SetThemeName("MaterialBlueGrey")
    '        If Me.TablaImportar.Rows.Count > 0 Then
    '            If Me.lstCliente.SelectText <> "" Then
    '                If Verifica_catalogo_cliente(Me.lstCliente.SelectItem) = True Then
    '                    Guardar_Carga()
    '                    If RadMessageBox.Show("La Empresa " & Me.lstCliente.SelectText & " es correcta?", Eventos.titulo_app, MessageBoxButtons.YesNo, RadMessageIcon.Question) = Windows.Forms.DialogResult.Yes Then
    '                        Me.Barra.Maximum = Me.TablaImportar.RowCount - 1
    '                        Me.Barra.Minimum = 0
    '                        Me.Barra.Value1 = 0

    '                        For p As Integer = 0 To Me.TablaImportar.RowCount - 1
    '                            If Me.TablaImportar.Item(Aplic.Index, p).Value = True Then ' se paso todos los filtros de creacion
    '                                Codificar_polizas(p)
    '                            End If
    '                            If Me.Barra.Value1 = Me.Barra.Maximum Then
    '                                Me.Barra.Minimum = 0
    '                                Me.Cursor = Cursors.Arrow
    '                                RadMessageBox.Show("Proceso Terminado", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
    '                                Me.Barra.Value1 = 0
    '                            Else
    '                                Me.Barra.Value1 += 1
    '                            End If
    '                        Next
    '                    End If
    '                Else
    '                    RadMessageBox.Show("No existe Catalogo de cuentas para: " & Me.lstCliente.SelectText & "", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
    '                End If
    '                Me.CmdImportar.PerformClick()
    '            Else
    '                RadMessageBox.Show("No se ha seleccionado una Empresa", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
    '            End If
    '        Else
    '            RadMessageBox.Show("No se ha Importado ningun archivo", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
    '        End If
    '    End Sub
    '    Private Sub CmdImportar_Click(sender As Object, e As EventArgs) Handles CmdImportar.Click
    '        RadMessageBox.SetThemeName("MaterialBlueGrey")
    '        activo = True
    '        Limpia()

    '        If Me.lstCliente.SelectText <> "" Then
    '            If Buscar_Parametros(Me.lstCliente.SelectItem) = True Then
    '                Buscar_xml(Me.lstCliente.SelectItem, " and Fecha_Emision >= " & Eventos.Sql_hoy(Me.DtInicio.Value) & " and Fecha_Emision <= " & Eventos.Sql_hoy(Dtfin.Value) & "")
    '                SP1.RunWorkerAsync(Me.TablaImportar)
    '                Control.CheckForIllegalCrossThreadCalls = False
    '                Me.TablaImportar.Enabled = True
    '                activo = False
    '            End If
    '        Else
    '            RadMessageBox.Show("No se ha seleccionado una Empresa", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
    '        End If
    '    End Sub
    '    Private Sub Facturas(ByVal ds As DataSet)
    '        Try
    '            If ds.Tables(0).Rows.Count > 0 Then

    '            End If
    '        Catch ex As Exception
    '            Exit Sub
    '        End Try
    '        Dim frm As New BarraProcesovb
    '        frm.Show()
    '        frm.Text = "Calculando Facturas por favor espere..."
    '        frm.Barra.Minimum = 0
    '        frm.Barra.Maximum = ds.Tables(0).Rows.Count
    '        For j As Integer = 0 To ds.Tables(0).Rows.Count - 1



    '            Dim Fila As DataGridViewRow = Me.TablaImportar.Rows(j)
    '            Me.TablaImportar.Item(0, j).Value = False
    '            Me.TablaImportar.Item(Id_Xml.Index, j).Value = ds.Tables(0).Rows(j)("Id_Registro_Xml")
    '            Me.TablaImportar.Item(Tip.Index, j).Value = ds.Tables(0).Rows(j)("Tipo")
    '            Me.TablaImportar.Item(Fecha_Emi.Index, j).Value = ds.Tables(0).Rows(j)("Fecha_Emision")
    '            Me.TablaImportar.Item(UUI.Index, j).Value = ds.Tables(0).Rows(j)("UUID")
    '            Me.TablaImportar.Item(UCFDI.Index, j).Value = ds.Tables(0).Rows(j)("UsoCFDI")
    '            Me.TablaImportar.Item(RFCE.Index, j).Value = ds.Tables(0).Rows(j)("RFC_Receptor")
    '            Me.TablaImportar.Item(NomEmisor.Index, j).Value = ds.Tables(0).Rows(j)("Nombre_Receptor")
    '            Me.TablaImportar.Item(Conc.Index, j).Value = ds.Tables(0).Rows(j)("Conceptos")
    '            Me.TablaImportar.Item(MPago.Index, j).Value = ds.Tables(0).Rows(j)("Metodo_de_Pago")
    '            Me.TablaImportar.Item(Fpago.Index, j).Value = Trim(ds.Tables(0).Rows(j)("Descripcion"))
    '            Me.TablaImportar.Item(Subtotal.Index, j).Value = ds.Tables(0).Rows(j)("SubTotal")
    '            Me.TablaImportar.Item(CIVA.Index, j).Value = ds.Tables(0).Rows(j)("IVA_16")
    '            Me.TablaImportar.Item(Tot.Index, j).Value = ds.Tables(0).Rows(j)("Total")

    '            Me.TablaImportar.Item(LetraS.Index, j).Value = ds.Tables(0).Rows(j)("Letra_Sat")
    '            Me.TablaImportar.Item(NCuenta.Index, j).Value = ds.Tables(0).Rows(j)("Nombre_cuenta")
    '            Try
    '                If Trim(ds.Tables(0).Rows(j)("Clave")) <> "" Then
    '                    Fila.Cells(ContabilizacionC.Index).Value = Me.ContabilizacionC.Items(Obtener_index(Trim(ds.Tables(0).Rows(j)("Clave"))))
    '                    '     Me.TablaImportar.Item(ContabilizacionC.INDEX, j).Value = Me.ContabilizacionC.Items(Obtener_index(ds.Tables(0).Rows(j)("Clave")))
    '                End If

    '            Catch ex As Exception

    '            End Try

    '            Dim year As String = ds.Tables(0).Rows(j)("Fecha_Emision").ToString.Substring(6, 4)
    '            Dim month As String = ds.Tables(0).Rows(j)("Fecha_Emision").ToString.Substring(3, 2)
    '            Me.TablaImportar.Item(anio.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Anio_Contable")) = True, year, ds.Tables(0).Rows(j)("Anio_Contable"))
    '            Me.TablaImportar.Item(Mes.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Mes_Contable")) = True, month, ds.Tables(0).Rows(j)("Mes_Contable"))
    '            Me.TablaImportar.Item(ImpEf.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Efectivo")) = True, 0, ds.Tables(0).Rows(j)("Imp_Efectivo"))
    '            Me.TablaImportar.Item(CuentasEfectivo.Index, j).Value = ds.Tables(0).Rows(j)("Cuenta_Efectivo")
    '            Me.TablaImportar.Item(ImpT.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Transf")) = True, 0, ds.Tables(0).Rows(j)("Imp_Transf"))


    '            Me.TablaImportar.Item(BancoOrigen.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Banco_Origen")) = True, "", ds.Tables(0).Rows(j)("Banco_Origen"))

    '            Me.TablaImportar.Item(CuentaO.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cuenta_Origen")) = True, "", ds.Tables(0).Rows(j)("Cuenta_Origen"))

    '            Try
    '                If Trim(ds.Tables(0).Rows(j)("Banco_Destino")) <> "" Then
    '                    Fila.Cells(Bancodestino.Index).Value = Me.Bancodestino.Items(Obtener_indexB(Trim(ds.Tables(0).Rows(j)("Banco_Destino"))))
    '                End If
    '            Catch ex As Exception

    '            End Try

    '            Me.TablaImportar.Item(CtaBD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cuenta_Destino")) = True, "", ds.Tables(0).Rows(j)("Cuenta_Destino"))
    '            Me.TablaImportar.Item(Fechat.Index, j).Value = ds.Tables(0).Rows(j)("Fecha_Transaccion")

    '            'Implementar las 10 Transferencias

    '            Try
    '                Me.TablaImportar.Item(ImpT2.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Transf1")) = True, 0, ds.Tables(0).Rows(j)("Imp_Transf1"))
    '                Try
    '                    If Trim(ds.Tables(0).Rows(j)("Banco_Origen1")) <> "" Then
    '                        Fila.Cells(BankOT2.Index).Value = Me.BankOT2.Items(Obtener_indexBancoOrigenT2(Trim(ds.Tables(0).Rows(j)("Banco_Origen1"))))
    '                    End If
    '                Catch ex As Exception

    '                End Try
    '                Me.TablaImportar.Item(CtaOT2.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cuenta_Origen1")) = True, "", ds.Tables(0).Rows(j)("Cuenta_Origen1"))
    '                Me.TablaImportar.Item(BankDT2.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Banco_Destino1")) = True, "", ds.Tables(0).Rows(j)("Banco_Destino1"))
    '                Me.TablaImportar.Item(CtaDT2.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cuenta_Destino1")) = True, "", ds.Tables(0).Rows(j)("Cuenta_Destino1"))
    '                Me.TablaImportar.Item(FT2.Index, j).Value = ds.Tables(0).Rows(j)("Fecha_Transaccion1")
    '                Me.TablaImportar.Item(CtaT2.Index, j).Value = ds.Tables(0).Rows(j)("Cuenta_Bancos1")
    '            Catch ex As Exception

    '            End Try





    '            Me.TablaImportar.Item(ImpC.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Cheque")) = True, 0, ds.Tables(0).Rows(j)("Imp_Cheque"))


    '            Try
    '                If Trim(ds.Tables(0).Rows(j)("Nom_Banco_Ch")) <> "" Then
    '                    Me.TablaImportar.Item(BancosCheques.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Nom_Banco_Ch")) = True, "", ds.Tables(0).Rows(j)("Nom_Banco_Ch"))
    '                End If
    '            Catch ex As Exception

    '            End Try
    '            Try
    '                If Trim(ds.Tables(0).Rows(j)("Banco_Dest_Cheque")) <> "" Then
    '                    Fila.Cells(BancoDE.Index).Value = Me.BancoDE.Items(Obtener_indexbN(Trim(ds.Tables(0).Rows(j)("Banco_Dest_Cheque"))))
    '                End If
    '            Catch ex As Exception

    '            End Try
    '            ' Me.TablaImportar.Item(BancosCheques.Index, j).Value = ds.Tables(0).Rows(j)("Nom_Banco_Ch")

    '            Me.TablaImportar.Item(CuentaC.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cuenta_Origen_Ch")) = True, "", ds.Tables(0).Rows(j)("Cuenta_Origen_Ch"))
    '            Me.TablaImportar.Item(CtaDestinoChe.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cuenta_Dest_Cheque")) = True, "", ds.Tables(0).Rows(j)("Cuenta_Dest_Cheque"))
    '            Me.TablaImportar.Item(CtaCheque.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cuenta_Cheques")) = True, "", ds.Tables(0).Rows(j)("Cuenta_Cheques"))

    '            Me.TablaImportar.Item(NoCheque.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("No_Cheque")) = True, "", ds.Tables(0).Rows(j)("No_Cheque"))
    '            Me.TablaImportar.Item(FechaC.Index, j).Value = ds.Tables(0).Rows(j)("Fecha_Ch")
    '            Me.TablaImportar.Item(CuentaBancos.Index, j).Value = ds.Tables(0).Rows(j)("Cuenta_Bancos")
    '            Me.TablaImportar.Item(ProvA.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Provision_Acreedor")) = True, 0, ds.Tables(0).Rows(j)("Provision_Acreedor"))
    '            Me.TablaImportar.Item(ProvP.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Provision_Proveedor")) = True, 0, ds.Tables(0).Rows(j)("Provision_Proveedor"))
    '            Me.TablaImportar.Item(Dif.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Diferencia")) = True, 0, ds.Tables(0).Rows(j)("Diferencia"))

    '            Try
    '                If Trim(ds.Tables(0).Rows(j)("Tipo_Poliza")) <> "" Then
    '                    Fila.Cells(TipoPoliza.Index).Value = Me.TipoPoliza.Items(Obtener_index2(Trim(ds.Tables(0).Rows(j)("Tipo_Poliza"))))
    '                    ' Me.TablaImportar.Item(tipopoliza.INDEX, j).Value = Me.TipoPoliza.Items(Obtener_index(ds.Tables(0).Rows(j)("Tipo_Poliza")))
    '                End If

    '            Catch ex As Exception

    '            End Try

    '            Try
    '                If Trim(ds.Tables(0).Rows(j)("Ser")) <> "" Then
    '                    Fila.Cells(Ser.Index).Value = Me.Ser.Items(Obtener_indexSer(Trim(ds.Tables(0).Rows(j)("ser"))))

    '                End If

    '            Catch ex As Exception

    '            End Try
    '            '   Me.TablaImportar.Item(tipopoliza.INDEX, j).Value = ds.Tables(0).Rows(j)("Tipo_Poliza")
    '            Me.TablaImportar.Item(ImpG.Index, j).Value = ds.Tables(0).Rows(j)("Imp_Grabado")
    '            Me.TablaImportar.Item(ImpEx.Index, j).Value = ds.Tables(0).Rows(j)("Imp_Exento")
    '            Me.TablaImportar.Item(IVAR.Index, j).Value = ds.Tables(0).Rows(j)("IVA_real")
    '            Me.TablaImportar.Item(PagoA.Index, j).Value = ds.Tables(0).Rows(j)("Prc_Pago_Acumulado")
    '            Me.TablaImportar.Item(TReal.Index, j).Value = ds.Tables(0).Rows(j)("Total_Real")
    '            Me.TablaImportar.Item(Mone.Index, j).Value = ds.Tables(0).Rows(j)("Moneda")
    '            Me.TablaImportar.Item(UCambaria.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Utilidad_Cambiaria")) = True, 0, ds.Tables(0).Rows(j)("Utilidad_Cambiaria"))
    '            Me.TablaImportar.Item(PCambiaria.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Perdida_Cambiaria")) = True, 0, ds.Tables(0).Rows(j)("Perdida_Cambiaria"))
    '            Me.TablaImportar.Item(ImpD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Devolucion")) = True, 0, ds.Tables(0).Rows(j)("Imp_Devolucion"))
    '            Me.TablaImportar.Item(CuntaDev.Index, j).Value = ds.Tables(0).Rows(j)("Cuenta_Devolucion")
    '            Me.TablaImportar.Item(NumPol.Index, j).Value = ds.Tables(0).Rows(j)("numpol")
    '            Me.TablaImportar.Item(RISR.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Retenido_ISR")) = True, 0, ds.Tables(0).Rows(j)("Retenido_ISR"))
    '            Me.TablaImportar.Item(RIVA.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Retenido_IVA")) = True, 0, ds.Tables(0).Rows(j)("Retenido_IVA"))
    '            'Ajutes y Anticipos
    '            Me.TablaImportar.Item(Anti.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Anticipos")) = True, 0, ds.Tables(0).Rows(j)("Anticipos"))
    '            Me.TablaImportar.Item(CtaAnti.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cta_Anticipos")) = True, "", ds.Tables(0).Rows(j)("Cta_Anticipos"))
    '            Me.TablaImportar.Item(Ajus.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Ajuste")) = True, 0, ds.Tables(0).Rows(j)("Ajuste"))
    '            Me.TablaImportar.Item(CtaAjustes.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cta_Ajuste")) = True, "", ds.Tables(0).Rows(j)("Cta_Ajuste"))
    '            Me.TablaImportar.Item(ImpProvis.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Provision")) = True, 0, ds.Tables(0).Rows(j)("Imp_Provision"))
    '            Me.TablaImportar.Item(CtaProv.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cta_Provision")) = True, "", ds.Tables(0).Rows(j)("Cta_Provision"))




    '            Try
    '                If Trim(ds.Tables(0).Rows(j)("Cta_Orden")) <> "" Then
    '                    Fila.Cells(CtaOrden.Index).Value = Me.CtaOrden.Items(Obtener_indexCtaOrden(Trim(IIf(IsDBNull(ds.Tables(0).Rows(j)("Cta_Orden")) = True, "NO", ds.Tables(0).Rows(j)("Cta_Orden")))))
    '                End If
    '            Catch ex As Exception

    '            End Try
    '            'Series
    '            Try
    '                If Trim(ds.Tables(0).Rows(j)("Serie")) <> "" Then

    '                    Fila.Cells(Ser.Index).Value = Me.Ser.Items(Obtener_Index(Trim(IIf(IsDBNull(ds.Tables(0).Rows(j)("Serie")) = True, "", ds.Tables(0).Rows(j)("Serie"))), Me.Ser))
    '                End If
    '            Catch ex As Exception

    '            End Try
    '            frm.Barra.value = j

    '        Next
    '        frm.Close()
    '    End Sub
    '    Private Sub Buscar_xml(ByVal Id_Empresa As Integer, ByVal periodo As String)
    '        RadMessageBox.SetThemeName("MaterialBlueGrey")
    '        Dim sql As String = " SELECT "
    '        sql &= " 	Id_Registro_Xml,	Verificado_Asoc,	Estado_SAT,	Version,	Tipo,	Fecha_Emision,"
    '        sql &= " 	Fecha_Timbrado,	EstadoPago,	FechaPago,	Serie,	Folio,	UUID,	UUID_Relacion,	RFC_Emisor,"
    '        sql &= " 	Nombre_Emisor,	LugarDeExpedicion,	RFC_Receptor,	Nombre_Receptor,	ResidenciaFiscal,	NumRegIdTrib,"
    '        sql &= " 	UsoCFDI,Retenido_IVA + Retenido_ISR  + Total -IVA_16 AS SubTotal,	Descuento,	Total_IEPS,	IVA_16,	Retenido_IVA,	Retenido_ISR,	ISH,	Total,"
    '        sql &= " 	TotalOriginal,	Total_Trasladados,	Total_Retenidos,	Total_LocalTrasladado,	Total_LocalRetenido,	Complemento,"
    '        sql &= " 	Moneda,	Tipo_De_Cambio,	Metodos_de_Pago.descripcion   ,	Metodo_de_Pago ,	NumCtaPago,	Condicion_de_Pago,	Conceptos,"
    '        sql &= " 	Combustible,	IEPS_3,	IEPS_6,	IEPS_7,	IEPS_8,	IEPS_9,	IEPS_26,	IEPS_30,	IEPS_53,	IEPS_160,"
    '        sql &= " 	Archivo_XML,	Direccion_Emisor,	Localidad_Emisor,	Direccion_Receptor,	Localidad_Receptor,	Autorizada,	Consecutivo_Carga,"
    '        sql &= " 	Id_Empresa,	Carga_Procesada,	ID_poliza,Letra_Sat,	Nombre_cuenta,	Xml_Sat.Clave,	Anio_Contable,	Mes_Contable,	Imp_Efectivo,	Cuenta_Efectivo,
    '	Imp_Transf,	Banco_Origen,	Cuenta_Origen,	Banco_Destino,Cuenta_Destino,	Fecha_Transaccion,	Imp_Cheque,
    '	Nom_Banco_Ch,	Cuenta_Origen_Ch,   Banco_Dest_Cheque,  Cuenta_Dest_Cheque,  Cuenta_Cheques,	No_Cheque,	Fecha_Ch,	Cuenta_Bancos,	Provision_Acreedor,	Provision_Proveedor,
    '	Diferencia,	Tipo_Poliza,	Imp_Grabado,	Imp_Exento,	IVA_real,	Prc_Pago_Acumulado,	Total_Real,	Utilidad_Cambiaria,
    '	Perdida_Cambiaria,	Imp_Devolucion,	Cuenta_Devolucion 	,Numpol,	RIRS,	RIVA,Ajuste , Anticipos, Cta_Ajuste, Cta_Anticipos,Imp_Provision ,Cta_Orden,
    '    Imp_Transf1,        Banco_Origen1,	 Cuenta_Origen1,	 Banco_Destino1, Cuenta_Destino1 	,	 Fecha_Transaccion1,	 Cuenta_Bancos1 ,Cta_Provision,ser"
    '        sql &= " FROM dbo.Xml_Sat inner join Metodos_de_Pago on Metodos_de_Pago.clave = Xml_Sat.FormaDePago   where  tipo = 'Factura' and emitidas= " & Eventos.Bool2(True) & " and Id_Empresa =" & Id_Empresa & " and ID_poliza IS NULL AND  (Carga_Procesada =0	OR Carga_Procesada IS NULL) " & periodo & " "
    '        Dim ds As DataSet = Eventos.Obtener_DS(sql)
    '        If ds.Tables(0).Rows.Count > 0 Then
    '            Me.TablaImportar.RowCount = 1
    '            Me.Barra.Maximum = Me.TablaImportar.RowCount - 1
    '            Me.Barra.Minimum = 0
    '            Me.Barra.Value1 = 0
    '            Dim contab As DataSet = Eventos.Obtener_DS(" Select 'I' as Clave union select 'IPC' AS Clave  ")
    '            If contab.Tables(0).Rows.Count > 0 Then
    '                If Me.ContabilizacionC.Items.Count = 0 Then
    '                    For i As Integer = 0 To contab.Tables(0).Rows.Count - 1
    '                        Me.ContabilizacionC.Items.Add(Trim(contab.Tables(0).Rows(i)("Clave")))
    '                    Next
    '                Else
    '                    Me.ContabilizacionC.Items.Clear()
    '                    For i As Integer = 0 To contab.Tables(0).Rows.Count - 1
    '                        Me.ContabilizacionC.Items.Add(Trim(contab.Tables(0).Rows(i)("clave")))
    '                    Next
    '                End If
    '            End If
    '            Dim Tipo As DataSet = Eventos.Obtener_DS(" Select convert(NVARCHAR,Clave,103)  +' - ' + Nombre as Clave  from Tipos_Poliza_Sat INNER JOIN Tipo_Poliza ON Tipo_Poliza.Id_Tipo_poliza = Tipos_Poliza_Sat.Id_Tipo_poliza  where Id_Empresa= " & Me.lstCliente.SelectItem & "       ")
    '            If Tipo.Tables(0).Rows.Count > 0 Then
    '                If Me.TipoPoliza.Items.Count = 0 Then
    '                    For i As Integer = 0 To Tipo.Tables(0).Rows.Count - 1
    '                        Me.TipoPoliza.Items.Add(Trim(Tipo.Tables(0).Rows(i)("Clave")))
    '                    Next
    '                Else
    '                    Me.TipoPoliza.Items.Clear()
    '                    For i As Integer = 0 To Tipo.Tables(0).Rows.Count - 1
    '                        Me.TipoPoliza.Items.Add(Trim(Tipo.Tables(0).Rows(i)("Clave")))
    '                    Next
    '                End If
    '            End If
    '            Dim Series As DataSet = Eventos.Obtener_DS(" SELECT Serie FROM dbo.Series WHERE Id_Empresa = " & Me.lstCliente.SelectItem & " ")
    '            If Series.Tables(0).Rows.Count > 0 Then
    '                If Me.Ser.Items.Count = 0 Then
    '                    For i As Integer = 0 To Series.Tables(0).Rows.Count - 1
    '                        Me.Ser.Items.Add(Trim(Series.Tables(0).Rows(i)("Serie")))
    '                    Next
    '                Else
    '                    Me.Ser.Items.Clear()
    '                    For i As Integer = 0 To Series.Tables(0).Rows.Count - 1
    '                        Me.Ser.Items.Add(Trim(Series.Tables(0).Rows(i)("Serie")))
    '                    Next
    '                End If
    '            End If

    '            Dim Ctaor As DataSet = Eventos.Obtener_DS(" Select 'SI' as Clave  UNION sELECT 'NO' as Clave")
    '            If Ctaor.Tables(0).Rows.Count > 0 Then
    '                If Me.CtaOrden.Items.Count = 0 Then
    '                    For i As Integer = 0 To Ctaor.Tables(0).Rows.Count - 1
    '                        Me.CtaOrden.Items.Add(Trim(Ctaor.Tables(0).Rows(i)("Clave")))
    '                    Next
    '                Else
    '                    Me.CtaOrden.Items.Clear()
    '                    For i As Integer = 0 To Ctaor.Tables(0).Rows.Count - 1
    '                        Me.CtaOrden.Items.Add(Trim(Ctaor.Tables(0).Rows(i)("Clave")))
    '                    Next
    '                End If
    '            End If


    '            Cargar_bancos("Transf")
    '            Cargar_bancos("Ch")
    '            Me.TablaImportar.RowCount = ds.Tables(0).Rows.Count


    '            Dato = ds
    '        Else
    '            RadMessageBox.Show("No hay registros para procesar", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
    '        End If
    '    End Sub
    '    Private Sub Buscar_xml_Complemento(ByVal Id_Empresa As Integer, ByVal periodo As String)
    '        RadMessageBox.SetThemeName("MaterialBlueGrey")
    '        Dim sql As String = "SELECT Id_Xml_Complemento, Verificado_Asoc, Estado_SAT, Version, Tipo, Fecha_Emision, "
    '        sql &= " Serie, Folio, UUID, RFC_Emisor, Nombre_Emisor, RFC_Receptor, Nombre_Receptor, UsoCFDI, "
    '        sql &= " FechaPago, Metodos_de_Pago.Descripcion, Moneda, Monto, UUIDRel, "
    '        sql &= "  Num_Operacion, Cuenta_Destino, Cuenta_Origen, RfcEmisorCtaDestino, RfcEmisorCtaOrigen, "
    '        sql &= "  NomBancoOrdExtranjero, TipoCadPago, CadPago, Conceptos, Archivo_XML, Total, Consecutivo_Carga, "
    '        sql &= "  Id_Empresa, Carga_Procesada, ID_poliza ,Letra_Sat,	Nombre_cuenta,	Xml_Complemento.Clave,	Anio_Contable,	Mes_Contable,	Imp_Efectivo,	Cuenta_Efectivo,
    '	              Imp_Transf,	Banco_Origen,	Cuenta_Origen,	Banco_Destino,	Fecha_Transaccion,	Imp_Cheque,
    '	              Nom_Banco_Ch,	Cuenta_Origen_Ch,	No_Cheque,	Fecha_Ch,	Cuenta_Bancos,	Provision_Acreedor,	Provision_Proveedor,
    '	              Diferencia,	Tipo_Poliza,	Imp_Grabado,	Imp_Exento,	IVA_real,	Prc_Pago_Acumulado,	Total_Real,	Utilidad_Cambiaria,
    '	              Perdida_Cambiaria,	Imp_Devolucion,	Cuenta_Devolucion ,Numpol,	RIRS,	RIVA"
    '        sql &= " FROM   Xml_Complemento INNER JOIN Metodos_de_Pago ON Metodos_de_Pago.clave = Xml_Complemento.FormaDePago where Emitidas= " & Eventos.Bool2(True) & " and Id_Empresa =" & Id_Empresa & " and ID_poliza IS NULL AND  (Carga_Procesada =0	OR Carga_Procesada IS NULL)  " & periodo & ""
    '        Dim ds As DataSet = Eventos.Obtener_DS(sql)
    '        If ds.Tables(0).Rows.Count > 0 Then
    '            Dim a As Integer = Me.TablaImportar.RowCount - 1
    '            Me.TablaImportar.RowCount = Me.TablaImportar.Rows.Count + ds.Tables(0).Rows.Count

    '            Me.Barra.Maximum = ds.Tables(0).Rows.Count - 1
    '            Me.Barra.Minimum = 0
    '            Me.Barra.Value1 = 0
    '            For j As Integer = 0 To ds.Tables(0).Rows.Count - 1
    '                Dim Fila As DataGridViewRow = Me.TablaImportar.Rows(j)
    '                Me.TablaImportar.Item(0, j).Value = False
    '                Me.TablaImportar.Item(Id_Xml.Index, j).Value = ds.Tables(0).Rows(j)("Id_Xml_Complemento")
    '                Me.TablaImportar.Item(Tip.Index, j).Value = ds.Tables(0).Rows(j)("Tipo")
    '                Me.TablaImportar.Item(Fecha_Emi.Index, j).Value = ds.Tables(0).Rows(j)("Fecha_Emision")
    '                Me.TablaImportar.Item(UUI.Index, j).Value = ds.Tables(0).Rows(j)("UUID")
    '                Me.TablaImportar.Item(UCFDI.Index, j).Value = ds.Tables(0).Rows(j)("UsoCFDI")
    '                Me.TablaImportar.Item(RFCE.Index, j).Value = ds.Tables(0).Rows(j)("RFC_Emisor")
    '                Me.TablaImportar.Item(NomEmisor.Index, j).Value = ds.Tables(0).Rows(j)("Nombre_Emisor")
    '                Me.TablaImportar.Item(Conc.Index, j).Value = ds.Tables(0).Rows(j)("Conceptos")
    '                Me.TablaImportar.Item(MPago.Index, j).Value = ds.Tables(0).Rows(j)("Descripcion")


    '                Me.TablaImportar.Item(Tot.Index, j).Value = ds.Tables(0).Rows(j)("Monto")



    '                Me.TablaImportar.Item(LetraS.Index, j).Value = ds.Tables(0).Rows(j)("Letra_Sat")
    '                Me.TablaImportar.Item(NCuenta.Index, j).Value = ds.Tables(0).Rows(j)("Nombre_cuenta")
    '                Try
    '                    If Trim(ds.Tables(0).Rows(j)("Clave")) <> "" Then
    '                        Fila.Cells(ContabilizacionC.Index).Value = Me.ContabilizacionC.Items(Obtener_index(Trim(ds.Tables(0).Rows(j)("Clave"))))
    '                        '     Me.TablaImportar.Item(ContabilizacionC.INDEX, j).Value = Me.ContabilizacionC.Items(Obtener_index(ds.Tables(0).Rows(j)("Clave")))
    '                    End If

    '                Catch ex As Exception

    '                End Try
    '                ' cargar bancos

    '                Me.TablaImportar.Item(anio.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Anio_Contable")) = True, Now.Year, ds.Tables(0).Rows(j)("Anio_Contable"))
    '                Me.TablaImportar.Item(Mes.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Mes_Contable")) = True, Now.Month, ds.Tables(0).Rows(j)("Mes_Contable"))
    '                Me.TablaImportar.Item(ImpEf.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Efectivo")) = True, 0, ds.Tables(0).Rows(j)("Imp_Efectivo"))
    '                Me.TablaImportar.Item(CuentasEfectivo.Index, j).Value = ds.Tables(0).Rows(j)("Cuenta_Efectivo")
    '                Me.TablaImportar.Item(ImpT.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Transf")) = True, 0, ds.Tables(0).Rows(j)("Imp_Transf"))
    '                Me.TablaImportar.Item(BancoOrigen.Index, j).Value = ds.Tables(0).Rows(j)("Banco_Origen")
    '                Me.TablaImportar.Item(CuentaO.Index, j).Value = ds.Tables(0).Rows(j)("Cuenta_Origen")
    '                Me.TablaImportar.Item(Bancodestino.Index, j).Value = ds.Tables(0).Rows(j)("Banco_Destino")
    '                Me.TablaImportar.Item(Fechat.Index, j).Value = ds.Tables(0).Rows(j)("Fecha_Transaccion")
    '                Me.TablaImportar.Item(ImpC.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Cheque")) = True, 0, ds.Tables(0).Rows(j)("Imp_Cheque"))
    '                Me.TablaImportar.Item(BancosCheques.Index, j).Value = ds.Tables(0).Rows(j)("Nom_Banco_Ch")
    '                Me.TablaImportar.Item(CuentaC.Index, j).Value = ds.Tables(0).Rows(j)("Cuenta_Origen_Ch")
    '                Me.TablaImportar.Item(NoCheque.Index, j).Value = ds.Tables(0).Rows(j)("No_Cheque")
    '                Me.TablaImportar.Item(FechaC.Index, j).Value = ds.Tables(0).Rows(j)("Fecha_Ch")
    '                Me.TablaImportar.Item(CuentaBancos.Index, j).Value = ds.Tables(0).Rows(j)("Cuenta_Bancos")
    '                Me.TablaImportar.Item(ProvA.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Provision_Acreedor")) = True, 0, ds.Tables(0).Rows(j)("Provision_Acreedor"))
    '                Me.TablaImportar.Item(ProvP.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Provision_Proveedor")) = True, 0, ds.Tables(0).Rows(j)("Provision_Proveedor"))
    '                Me.TablaImportar.Item(Dif.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Diferencia")) = True, 0, ds.Tables(0).Rows(j)("Diferencia"))

    '                Try
    '                    If Trim(ds.Tables(0).Rows(j)("Tipo_Poliza")) <> "" Then
    '                        Fila.Cells(TipoPoliza.Index).Value = Me.TipoPoliza.Items(Obtener_index2(Trim(ds.Tables(0).Rows(j)("Tipo_Poliza"))))
    '                        ' Me.TablaImportar.Item(tipopoliza.INDEX, j).Value = Me.TipoPoliza.Items(Obtener_index(ds.Tables(0).Rows(j)("Tipo_Poliza")))
    '                    End If

    '                Catch ex As Exception

    '                End Try
    '                '   Me.TablaImportar.Item(tipopoliza.INDEX, j).Value = ds.Tables(0).Rows(j)("Tipo_Poliza")
    '                Me.TablaImportar.Item(ImpG.Index, j).Value = ds.Tables(0).Rows(j)("Imp_Grabado")
    '                Me.TablaImportar.Item(ImpEx.Index, j).Value = ds.Tables(0).Rows(j)("Imp_Exento")
    '                Me.TablaImportar.Item(IVAR.Index, j).Value = ds.Tables(0).Rows(j)("IVA_real")
    '                Me.TablaImportar.Item(PagoA.Index, j).Value = ds.Tables(0).Rows(j)("Prc_Pago_Acumulado")
    '                Me.TablaImportar.Item(TReal.Index, j).Value = ds.Tables(0).Rows(j)("Total_Real")
    '                Me.TablaImportar.Item(Mone.Index, j).Value = ds.Tables(0).Rows(j)("Moneda")
    '                Me.TablaImportar.Item(UCambaria.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Utilidad_Cambiaria")) = True, 0, ds.Tables(0).Rows(j)("Utilidad_Cambiaria"))
    '                Me.TablaImportar.Item(PCambiaria.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Perdida_Cambiaria")) = True, 0, ds.Tables(0).Rows(j)("Perdida_Cambiaria"))
    '                Me.TablaImportar.Item(ImpD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Devolucion")) = True, 0, ds.Tables(0).Rows(j)("Imp_Devolucion"))
    '                Me.TablaImportar.Item(CuntaDev.Index, j).Value = ds.Tables(0).Rows(j)("Cuenta_Devolucion")

    '                Me.TablaImportar.Item(NumPol.Index, j).Value = ds.Tables(0).Rows(j)("numpol")
    '                Me.TablaImportar.Item(ImpD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("RIRS")) = True, 0, ds.Tables(0).Rows(j)("RIRS"))
    '                Me.TablaImportar.Item(ImpD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("RIVA")) = True, 0, ds.Tables(0).Rows(j)("RIVA"))

    '                If Me.Barra.Value1 = Me.Barra.Maximum Then
    '                    Me.Barra.Minimum = 0
    '                    Me.Cursor = Cursors.Arrow
    '                    RadMessageBox.Show("Pagos Cargados ...", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
    '                    Me.Barra.Value1 = 0
    '                Else
    '                    Me.Barra.Value1 += 1
    '                End If
    '            Next
    '        Else
    '            RadMessageBox.Show("No hay registros de pagos para procesar", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
    '        End If
    '    End Sub

    '    Private Sub Liberar_Proceso(ByVal i As Integer)
    '        Dim contador As Integer = 0
    '        Dim cantidad As Decimal = Me.TablaImportar.Item(ImpProvis.Index, i).Value
    '        cantidad = cantidad + Me.TablaImportar.Item(UCambaria.Index, i).Value
    '        cantidad = cantidad - Me.TablaImportar.Item(PCambiaria.Index, i).Value
    '        'Calcula la diferencia en el registro

    '        Dim Retencion As Decimal = 0
    '        Retencion = Me.TablaImportar.Item(RISR.Index, i).Value + Me.TablaImportar.Item(RIVA.Index, i).Value
    '        Me.TablaImportar.Item(Dif.Index, i).Value = Math.Round(Calcula_diferencia(Me.TablaImportar.Item(TReal.Index, i).Value - Retencion, Me.TablaImportar.Item(ImpEf.Index, i).Value, Me.TablaImportar.Item(ImpC.Index, i).Value, (Me.TablaImportar.Item(ImpT.Index, i).Value + Me.TablaImportar.Item(ImpT2.Index, i).Value), Me.TablaImportar.Item(Ajus.Index, i).Value, Me.TablaImportar.Item(Anti.Index, i).Value, cantidad), 2)
    '        If Me.TablaImportar.Item(Dif.Index, i).Value <> 0 Then
    '            Me.TablaImportar.Item(Dif.Index, i).Style.BackColor = Color.Red
    '        Else
    '            Me.TablaImportar.Item(Dif.Index, i).Style.BackColor = Color.Green
    '        End If

    '        If Trim(UCase(Me.lblce.Text)) = "TRUE" Then ' Bloquera filas de Contabilidad electronica
    '            ' If Me.TablaImportar.Item(Dif.Index, i).Value > 0 Or Me.TablaImportar.Item(Ser.Index, i).Value = Nothing Or Me.TablaImportar.Item(TipoPoliza.Index, i).Value = Nothing Or IIf(IsDBNull(Me.TablaImportar.Item(NCuenta.Index, i).Value) = True, "", Me.TablaImportar.Item(NCuenta.Index, i).Value) = "" Or IIf(IsDBNull(Me.TablaImportar.Item(NumPol.Index, i).Value) = True, "", Me.TablaImportar.Item(NumPol.Index, i).Value) = "" Then
    '            If Me.TablaImportar.Item(Dif.Index, i).Value > 0 Or Me.TablaImportar.Item(Ser.Index, i).Value = Nothing Or Me.TablaImportar.Item(TipoPoliza.Index, i).Value = Nothing Or IIf(IsDBNull(Me.TablaImportar.Item(NumPol.Index, i).Value) = True, "", Me.TablaImportar.Item(NumPol.Index, i).Value.ToString) = "" Then
    '                Me.TablaImportar.Item(Aplic.Index, i).Value = False
    '            Else
    '                Try

    '                    If Me.TablaImportar.Item(ImpT.Index, i).Value > 0 And Me.TablaImportar.Item(ImpC.Index, i).Value = 0 Then ' Bloqueo transferencia
    '                        If Me.TablaImportar.Item(BancoOrigen.Index, i).Value = Nothing Or Me.TablaImportar.Item(Bancodestino.Index, i).Value = Nothing Or Me.TablaImportar.Item(CuentaO.Index, i).Value = Nothing Or Me.TablaImportar.Item(CtaBD.Index, i).Value = Nothing Or Me.TablaImportar.Item(Fechat.Index, i).Value = Nothing Then
    '                            Me.TablaImportar.Item(Aplic.Index, i).Value = False
    '                        Else
    '                            Me.TablaImportar.Item(Aplic.Index, i).Value = True
    '                        End If
    '                        ' transferencias1
    '                        If Me.TablaImportar.Item(ImpT2.Index, i).Value > 0 Then

    '                            If Me.TablaImportar.Item(BankOT2.Index, i).Value = Nothing Or Me.TablaImportar.Item(CtaOT2.Index, i).Value = Nothing Or Me.TablaImportar.Item(BankDT2.Index, i).Value = Nothing Or Me.TablaImportar.Item(CtaDT2.Index, i).Value = Nothing Or Me.TablaImportar.Item(FT2.Index, i).Value = Nothing Or Me.TablaImportar.Item(CtaT2.Index, i).Value = Nothing Then
    '                                Me.TablaImportar.Item(Aplic.Index, i).Value = False
    '                            Else
    '                                Me.TablaImportar.Item(Aplic.Index, i).Value = True
    '                            End If
    '                        End If



    '                    ElseIf Me.TablaImportar.Item(ImpC.Index, i).Value > 0 And Me.TablaImportar.Item(ImpT.Index, i).Value = 0 Then ' Bloqueo cheques
    '                        If Me.TablaImportar.Item(BancosCheques.Index, i).Value = Nothing Or Me.TablaImportar.Item(CuentaC.Index, i).Value = Nothing Or Me.TablaImportar.Item(NoCheque.Index, i).Value = Nothing Or Me.TablaImportar.Item(FechaC.Index, i).Value = Nothing Then
    '                            Me.TablaImportar.Item(Aplic.Index, i).Value = False
    '                        Else
    '                            Me.TablaImportar.Item(Aplic.Index, i).Value = True
    '                        End If
    '                    ElseIf Me.TablaImportar.Item(ImpC.Index, i).Value > 0 And Me.TablaImportar.Item(ImpT.Index, i).Value > 0 Then ' AMbos
    '                        If Me.TablaImportar.Item(BancoOrigen.Index, i).Value = Nothing Or Me.TablaImportar.Item(Bancodestino.Index, i).Value = Nothing Or Me.TablaImportar.Item(CuentaO.Index, i).Value = Nothing Or Me.TablaImportar.Item(CtaBD.Index, i).Value = Nothing Or Me.TablaImportar.Item(Fechat.Index, i).Value = Nothing Then
    '                            Me.TablaImportar.Item(Aplic.Index, i).Value = False
    '                        Else
    '                            Me.TablaImportar.Item(Aplic.Index, i).Value = True
    '                        End If
    '                        ' transferencias1
    '                        If Me.TablaImportar.Item(ImpT2.Index, i).Value > 0 Then

    '                            If Me.TablaImportar.Item(BankOT2.Index, i).Value = Nothing Or Me.TablaImportar.Item(CtaOT2.Index, i).Value = Nothing Or Me.TablaImportar.Item(BankDT2.Index, i).Value = Nothing Or Me.TablaImportar.Item(CtaDT2.Index, i).Value = Nothing Or Me.TablaImportar.Item(FT2.Index, i).Value = Nothing Or Me.TablaImportar.Item(CtaT2.Index, i).Value = Nothing Then
    '                                Me.TablaImportar.Item(Aplic.Index, i).Value = False
    '                            Else
    '                                Me.TablaImportar.Item(Aplic.Index, i).Value = True
    '                            End If
    '                        End If

    '                        If Me.TablaImportar.Item(BancosCheques.Index, i).Value = Nothing Or Me.TablaImportar.Item(CuentaC.Index, i).Value = Nothing Or Me.TablaImportar.Item(NoCheque.Index, i).Value = Nothing Or Me.TablaImportar.Item(FechaC.Index, i).Value = Nothing Then
    '                            Me.TablaImportar.Item(Aplic.Index, i).Value = False
    '                        Else
    '                            Me.TablaImportar.Item(Aplic.Index, i).Value = True
    '                        End If
    '                    Else
    '                        Me.TablaImportar.Item(Aplic.Index, i).Value = True
    '                    End If
    '                    If Me.TablaImportar.Item(Ajus.Index, i).Value <> 0 Then ' Bloqueo Ajuste
    '                        If IIf(IsDBNull(Me.TablaImportar.Item(CtaAjustes.Index, i).Value) = True, "", Me.TablaImportar.Item(CtaAjustes.Index, i).Value) = "" Then
    '                            Me.TablaImportar.Item(Aplic.Index, i).Value = False
    '                        Else
    '                            Me.TablaImportar.Item(Aplic.Index, i).Value = True
    '                        End If
    '                    End If

    '                    If Me.TablaImportar.Item(Anti.Index, i).Value <> 0 Then ' Bloqueo Anticipo
    '                        If IIf(IsDBNull(Me.TablaImportar.Item(CtaAnti.Index, i).Value) = True, "", Me.TablaImportar.Item(CtaAnti.Index, i).Value) = "" Then
    '                            Me.TablaImportar.Item(Aplic.Index, i).Value = False
    '                        Else
    '                            Me.TablaImportar.Item(Aplic.Index, i).Value = True
    '                        End If
    '                    End If
    '                Catch ex As Exception
    '                    Me.TablaImportar.Item(Aplic.Index, i).Value = False
    '                End Try

    '            End If
    '        Else
    '            'sin contabilidad electronica
    '            If Me.TablaImportar.Item(Dif.Index, i).Value > 0 Or Me.TablaImportar.Item(Ser.Index, i).Value = Nothing Or Me.TablaImportar.Item(TipoPoliza.Index, i).Value = Nothing Or IIf(IsDBNull(Me.TablaImportar.Item(NumPol.Index, i).Value) = True, "", Me.TablaImportar.Item(NumPol.Index, i).Value.ToString()) = "" Then
    '                Me.TablaImportar.Item(Aplic.Index, i).Value = False
    '            Else
    '                Me.TablaImportar.Item(Aplic.Index, i).Value = True
    '            End If
    '            Try
    '                If Me.TablaImportar.Item(Ajus.Index, i).Value <> 0 Then ' Bloqueo Ajuste
    '                    If IIf(IsDBNull(Me.TablaImportar.Item(CtaAjustes.Index, i).Value) = True, "", Me.TablaImportar.Item(CtaAjustes.Index, i).Value) = "" Then
    '                        Me.TablaImportar.Item(Aplic.Index, i).Value = False
    '                    Else
    '                        Me.TablaImportar.Item(Aplic.Index, i).Value = True
    '                    End If
    '                End If

    '                If Me.TablaImportar.Item(Anti.Index, i).Value <> 0 Then ' Bloqueo Anticipo
    '                    If IIf(IsDBNull(Me.TablaImportar.Item(CtaAnti.Index, i).Value) = True, "", Me.TablaImportar.Item(CtaAnti.Index, i).Value) = "" Then
    '                        Me.TablaImportar.Item(Aplic.Index, i).Value = False
    '                    Else
    '                        Me.TablaImportar.Item(Aplic.Index, i).Value = True
    '                    End If
    '                End If
    '            Catch ex As Exception

    '            End Try

    '        End If

    '        For s As Integer = 0 To Me.TablaImportar.Rows.Count - 1
    '            If Me.TablaImportar.Item(0, s).Value = True Then
    '                contador = contador + 1
    '            End If
    '        Next
    '        If contador > 0 Then
    '            Me.Cmd_Procesar.Enabled = True
    '        End If
    '    End Sub

    '    Private Function Calcula_diferencia(ByVal total As Decimal, ByVal monto_Efectivo As Decimal, ByVal monto_cheque As Decimal, ByVal monto_Transferencia As Decimal, ByVal ajuste As Decimal, ByVal Anticipo As Decimal, ByVal Provision As Decimal
    '                                   )
    '        Dim Diferencia As Decimal = 0
    '        Diferencia = total - (monto_Efectivo + monto_cheque + monto_Transferencia + ajuste + Anticipo + Provision)
    '        Return Diferencia
    '    End Function
    '    Private Sub ChkIvisible_CheckedChanged(sender As Object, e As EventArgs) Handles ChkIvisible.CheckedChanged

    '    End Sub
    '    Private Function Verifica_catalogo_cliente(ByVal cliente As Integer) ' se verifica el Catalogo de cuentas

    '        Dim hacer As Boolean
    '        Dim sql As String = " Select * From catalogo_de_cuentas where Id_Empresa = " & cliente & ""
    '        Dim ds As DataSet = Eventos.Obtener_DS(sql)
    '        If ds.Tables(0).Rows.Count > 0 Then
    '            hacer = True
    '        Else
    '            hacer = False
    '        End If
    '        Return hacer
    '    End Function

    '    Private Sub TablaImportar_CellMouseDoubleClick(sender As Object, e As DataGridViewCellMouseEventArgs) Handles TablaImportar.CellMouseDoubleClick
    '        'Condicionar el tipo de poliza a los valores de la tabla
    '        'Control_de_Polizas.Id_Empresa = Me.lstCliente.SelectItem
    '        'Control_de_Polizas.concepto = Me.TablaImportar.Item(7, Me.TablaImportar.CurrentRow.Index).Value
    '        'Control_de_Polizas.id_tipo = Me.TablaImportar.Item(bancoorigen.INDEX, Me.TablaImportar.CurrentRow.Index).Value
    '        'Control_de_Polizas.Nuevo = True
    '        'Eventos.abrir_form(Control_de_Polizas)
    '    End Sub
    '    Private Function Obtener_index(ByVal valor As String)

    '        Dim Indice As Integer = -1
    '        For i As Integer = 0 To Me.ContabilizacionC.Items.Count - 1
    '            If valor = Trim(Me.ContabilizacionC.Items(i)) Then
    '                Indice = i
    '                Exit For
    '            End If
    '        Next
    '        Return Indice

    '    End Function
    '    Private Function Obtener_index2(ByVal valor As String)

    '        Dim Indice As Integer = -1
    '        For i As Integer = 0 To Me.TipoPoliza.Items.Count - 1
    '            If valor = Trim(Me.TipoPoliza.Items(i)) Then
    '                Indice = i
    '                Exit For
    '            End If
    '        Next
    '        Return Indice

    '    End Function
    '    Private Function Obtener_indexSer(ByVal valor As String)

    '        Dim Indice As Integer = -1
    '        For i As Integer = 0 To Me.Ser.Items.Count - 1
    '            If valor = Trim(Me.Ser.Items(i)) Then
    '                Indice = i
    '                Exit For
    '            End If
    '        Next
    '        Return Indice

    '    End Function
    '    Private Function Obtener_indexSerD(ByVal valor As String)

    '        Dim Indice As Integer = -1
    '        For i As Integer = 0 To Me.SerD.Items.Count - 1
    '            If valor = Trim(Me.SerD.Items(i)) Then
    '                Indice = i
    '                Exit For
    '            End If
    '        Next
    '        Return Indice

    '    End Function
    '    Private Function Obtener_indexSerC(ByVal valor As String)

    '        Dim Indice As Integer = -1
    '        For i As Integer = 0 To Me.SerC.Items.Count - 1
    '            If valor = Trim(Me.SerC.Items(i)) Then
    '                Indice = i
    '                Exit For
    '            End If
    '        Next
    '        Return Indice

    '    End Function
    '    Private Function Obtener_indexB(ByVal valor As String)

    '        Dim Indice As Integer = -1
    '        For i As Integer = 0 To Me.Bancodestino.Items.Count - 1
    '            If valor = Trim(Me.Bancodestino.Items(i)) Then
    '                Indice = i
    '                Exit For
    '            End If
    '        Next
    '        Return Indice

    '    End Function
    '    Private Function Obtener_indexBancoOrigenT2(ByVal valor As String)

    '        Dim Indice As Integer = -1
    '        For i As Integer = 0 To Me.BankOT2.Items.Count - 1
    '            If valor = Trim(Me.BankOT2.Items(i)) Then
    '                Indice = i
    '                Exit For
    '            End If
    '        Next
    '        Return Indice

    '    End Function
    '    Private Function Obtener_indexBT(ByVal valor As String)

    '        Dim Indice As Integer = 1000
    '        For i As Integer = 0 To Me.Bancodestino.Items.Count - 1

    '            Dim largo As Integer = Len(Trim(Me.Bancodestino.Items(i)))
    '            Dim posicion As Integer = InStr(1, Trim(Me.Bancodestino.Items(i)), "-", CompareMethod.Binary)
    '            Dim Al As String = Trim(Me.Bancodestino.Items(i)).Substring(posicion, largo - posicion)

    '            If Al = valor Then
    '                Indice = i
    '                Exit For
    '            End If
    '        Next
    '        Return Indice

    '    End Function
    '    Private Function Obtener_indexbN(ByVal valor As String)

    '        Dim Indice As Integer = -1
    '        For i As Integer = 0 To Me.BancoDE.Items.Count - 1
    '            If valor = Trim(Me.BancoDE.Items(i)) Then
    '                Indice = i
    '                Exit For
    '            End If
    '        Next
    '        Return Indice

    '    End Function
    '    Private Function Obtener_indexCtaOrden(ByVal valor As String)

    '        Dim Indice As Integer = -1
    '        For i As Integer = 0 To Me.CtaOrden.Items.Count - 1
    '            If valor = Trim(Me.CtaOrden.Items(i)) Then
    '                Indice = i
    '                Exit For
    '            End If
    '        Next
    '        Return Indice

    '    End Function

    '    Private Function Obtener_Index(ByVal valor As String, ByVal Col As DataGridViewComboBoxColumn)
    '        Dim Indice As Integer = -1
    '        For i As Integer = 0 To Col.Items.Count - 1
    '            If valor = Trim(Col.Items(i)) Then
    '                Indice = i
    '                Exit For
    '            End If
    '        Next
    '        Return Indice
    '    End Function

    '    Private Function Obtener_indexCtaOrdenC(ByVal valor As String)

    '        Dim Indice As Integer = -1
    '        For i As Integer = 0 To Me.CtaOrdenC.Items.Count - 1
    '            If valor = Trim(Me.CtaOrdenC.Items(i)) Then
    '                Indice = i
    '                Exit For
    '            End If
    '        Next
    '        Return Indice

    '    End Function
    '    Private Sub CmdActulizar_Click(sender As Object, e As EventArgs)
    '        Dim contab As DataSet = Eventos.Obtener_DS(" Select Clave from Letras_Contabilidad ")
    '        If contab.Tables(0).Rows.Count > 0 Then
    '            If Me.ContabilizacionC.Items.Count = 0 Then

    '                For i As Integer = 0 To contab.Tables(0).Rows.Count - 1
    '                    Me.ContabilizacionC.Items.Add(Trim(contab.Tables(0).Rows(i)("Clave")))
    '                Next
    '            Else
    '                Try
    '                    Me.ContabilizacionC.Items.Clear()
    '                Catch ex As Exception

    '                End Try

    '                For i As Integer = 0 To contab.Tables(0).Rows.Count - 1
    '                    Me.ContabilizacionC.Items.Add(Trim(contab.Tables(0).Rows(i)("Clave")))
    '                Next
    '            End If
    '        End If

    '    End Sub
    '    Private Sub TablaImportar_CellClick(sender As Object, e As DataGridViewCellEventArgs) Handles TablaImportar.CellClick

    '        Dim columna As Integer = Me.TablaImportar.CurrentCell.ColumnIndex
    '        Dim Nombre As String
    '        Nombre = Me.TablaImportar.Columns.Item(Me.TablaImportar.CurrentCell.ColumnIndex).Name.ToString
    '        Me.LstTexto.Cargar(" Select '','' ")

    '        Select Case Nombre
    '            Case "ContabilizacionC"
    '                Me.LstTexto.Cargar(" Select 'I' as Clave ,'I' as Cla  union select 'IPC' AS Clave ,'IPC' as Cla  ")
    '                Me.LstTexto.SelectText = ""
    '            Case "CuentasEfectivo"
    '                Me.LstTexto.Cargar(" Select Id_cat_cuentas, rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1010' and Nivel2 > 0 and Nivel3 > 0 ")
    '                Me.LstTexto.SelectText = ""
    '            Case "CuentaBancos"
    '                Me.LstTexto.Cargar(" Select Id_cat_cuentas, rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1020'and Nivel2 > 0 and Nivel3 > 0  ")
    '                Me.LstTexto.SelectText = ""
    '            Case "BancoDE"
    '                Me.LstTexto.Cargar("SELECT rtrim(Bancos.Clave) +'-'+ Bancos_Clientes.Alias AS Alias ,  rtrim(Bancos.Clave) +'-'+ Bancos_Clientes.Alias AS Ali FROM Bancos_Clientes INNER JOIN Bancos ON Bancos_Clientes.Id_Banco =Bancos.Id_Banco  where Id_Empresa = " & Me.lstCliente.SelectItem & " and alias like '%Chec%' ")
    '                Me.LstTexto.SelectText = ""
    '            Case "BancoOrigen"
    '                'Me.LstTexto.cargar(" SELECT DISTINCT Bancos.clave, CONVERT(NVARCHAR, Bancos_RFC.Id_Banco, 103) + '-' + Bancos.Nombre AS Banco   FROM     Bancos INNER JOIN     Bancos_RFC ON Bancos.Id_Banco = Bancos_RFC.Id_Banco WHERE  (Bancos_RFC.Id_Empresa  = " & Me.lstCliente.SelectItem & ")")
    '                'Me.LstTexto.SelectText = ""

    '            Case "Bancodestino"
    '                Me.LstTexto.Cargar("SELECT rtrim(Bancos.Clave) +'-'+ Bancos_Clientes.Alias AS Alias ,  rtrim(Bancos.Clave) +'-'+ Bancos_Clientes.Alias AS Ali  FROM Bancos_Clientes INNER JOIN Bancos ON Bancos_Clientes.Id_Banco =Bancos.Id_Banco  where Id_Empresa = " & Me.lstCliente.SelectItem & " and alias like '%Transf%' ")
    '                Me.LstTexto.SelectText = ""
    '            Case "TipoPoliza"
    '                Me.LstTexto.Cargar("  Select convert(NVARCHAR,Clave,103)  +' - ' + Nombre as Clave, convert(NVARCHAR,Clave,103)  +' - ' + Nombre as Clave  from Tipos_Poliza_Sat INNER JOIN Tipo_Poliza ON Tipo_Poliza.Id_Tipo_poliza = Tipos_Poliza_Sat.Id_Tipo_poliza  where Id_Empresa= " & Me.lstCliente.SelectItem & "     ")
    '                Me.LstTexto.SelectText = ""
    '            Case "CtaAjustes"
    '                Me.LstTexto.Cargar("Select  Id_cat_cuentas,  rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " ")
    '                Me.LstTexto.SelectText = ""
    '            Case "CtaAnti"
    '                'Me.LstTexto.cargar("Select Id_cat_cuentas,  rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1070' and Nivel2 > 0 and Nivel3 > 0 ")
    '                'Me.LstTexto.SelectText = ""
    '        End Select
    '    End Sub
    '    Private Sub LstTexto_Enters() Handles LstTexto.Enters
    '        Try

    '            If Me.TablaImportar.Rows.Count > 0 Then
    '                For Each Fila As DataGridViewRow In TablaImportar.Rows
    '                    If Fila.Cells(ContabilizacionC.Index).Selected = True Then

    '                        Try
    '                            If Me.LstTexto.SelectText = "" Then
    '                                Fila.Cells(ContabilizacionC.Index).Value = ""
    '                            Else
    '                                If Obtener_index(Me.LstTexto.SelectText) < 0 Then
    '                                    Fila.Cells(ContabilizacionC.Index).Value = ""
    '                                Else
    '                                    Dim s As String = Me.ContabilizacionC.Items(1)
    '                                    Fila.Cells(ContabilizacionC.Index).Value = Me.ContabilizacionC.Items(Obtener_index(Me.LstTexto.SelectText))
    '                                End If
    '                            End If


    '                        Catch ex As Exception

    '                        End Try
    '                    ElseIf Fila.Cells(Bancodestino.Index).Selected = True Then



    '                        Try
    '                            If Me.LstTexto.SelectText = "" Then
    '                                Fila.Cells(Bancodestino.Index).Value = ""

    '                            Else
    '                                If Obtener_indexB(Me.LstTexto.SelectText) = 0 Then

    '                                    Fila.Cells(Bancodestino.Index).Value = Me.Bancodestino.Items(Obtener_indexB(Me.LstTexto.SelectText))

    '                                Else

    '                                    Fila.Cells(Bancodestino.Index).Value = Me.Bancodestino.Items(Obtener_indexB(Me.LstTexto.SelectText))
    '                                End If
    '                            End If

    '                        Catch ex As Exception

    '                        End Try

    '                    ElseIf Fila.Cells(BancoOrigen.Index).Selected = True Then
    '                        If Me.LstTexto.SelectText = "" Then
    '                            Fila.Cells(BancoOrigen.Index).Value = ""
    '                        End If
    '                    ElseIf Fila.Cells(TipoPoliza.Index).Selected = True Then
    '                        Try

    '                            If Me.LstTexto.SelectText = "" Then
    '                                Fila.Cells(TipoPoliza.Index).Value = ""
    '                            Else
    '                                Try
    '                                    If Obtener_index2(Me.LstTexto.SelectText) < 0 Then
    '                                        Fila.Cells(TipoPoliza.Index).Value = ""
    '                                    Else
    '                                        Dim s As String = Me.TipoPoliza.Items(1)
    '                                        Fila.Cells(TipoPoliza.Index).Value = Me.TipoPoliza.Items(Obtener_index2(Me.LstTexto.SelectText))
    '                                    End If

    '                                Catch ex As Exception

    '                                End Try
    '                            End If

    '                        Catch ex As Exception

    '                        End Try

    '                    Else
    '                        ' For I As Integer = 0 To Me.TablaImportar.Rows.Count - 1
    '                        For j As Integer = 0 To Me.TablaImportar.Columns.Count - 1
    '                            If Me.TablaImportar.Item(j, Fila.Index).Selected = True And (j <> ContabilizacionC.Index And j <> BancoOrigen.Index And j <> TipoPoliza.Index) Then
    '                                Me.TablaImportar.Item(j, Fila.Index).Value = Me.LstTexto.SelectText
    '                            ElseIf Me.TablaImportar.Item(j, Fila.Index).Selected = True And (j = ContabilizacionC.Index And j = BancoOrigen.Index And j = TipoPoliza.Index) Then
    '                                Me.TablaImportar.Item(j, Fila.Index).Value = ""
    '                            End If
    '                        Next

    '                        ' Next
    '                    End If

    '                Next
    '            End If
    '        Catch ex As Exception

    '        End Try
    '    End Sub
    '    Private Sub ToolStripMenuItem1_Click(sender As Object, e As EventArgs) Handles ToolStripMenuItem1.Click
    '        ' If Me.TablaImportar.Rows.Count > 0 Then
    '        If Me.TCEmitidas.SelectedIndex = 0 Then
    '            'Verificar la columna del click secundario
    '            If Me.TablaImportar.CurrentCell.ColumnIndex = Me.NCuenta.Index Then 'Cuentas del Cargo

    '                Dim ds As DataSet = Eventos.Obtener_DS("select Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta,Rtrim(Descripcion) as Des from catalogo_de_cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and  clave= '" & Trim(Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value) & "' and nivel3 >0  and rfc= '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "' order by cta")
    '                Dim actividad(,) As String
    '                ReDim actividad(2, ds.Tables(0).Rows.Count + 1)

    '                For i As Integer = 0 To ds.Tables(0).Rows.Count - 1
    '                    Dim cadena As String = ds.Tables(0).Rows(i)("Cuenta")
    '                    Dim posi As Integer = InStr(1, cadena, "-", CompareMethod.Binary)
    '                    Dim cuantos As Integer = Len(cadena) - Len(cadena.Substring(0, posi))
    '                    Dim consecutivo As String = cadena.Substring(posi, cuantos)
    '                    Dim Sql As String = " select Rtrim(Descripcion) as Cuenta from catalogo_de_cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and  Nivel1= '" & consecutivo.ToString.Substring(0, 4) & "' and nivel2= '" & consecutivo.ToString.Substring(4, 4) & "'  and nivel3 ='" & consecutivo.ToString.Substring(8, 4) & "'  and nivel4= '0000'"
    '                    Dim ds2 As DataSet = Eventos.Obtener_DS(Sql)
    '                    If Trim(ds.Tables(0).Rows(0)("DES")) = Trim(ds2.Tables(0).Rows(0)("Cuenta")) Then
    '                        actividad(0, i) = ds.Tables(0).Rows(0)("Cuenta")
    '                    Else
    '                        actividad(0, i) = ds2.Tables(0).Rows(0)("Cuenta") & " " & ds.Tables(0).Rows(i)(0)
    '                    End If

    '                    '  actividad(0, i) = ds2.Tables(0).Rows(0)("Cuenta") & " " & ds.Tables(0).Rows(i)(0)
    '                    Debug.Print(ds.Tables(0).Rows(i)(0))
    '                    actividad(1, i) = "0"
    '                Next
    '                With My.Forms.DialogUnaSeleccion
    '                    .limpiar()
    '                    .Titulo = Eventos.titulo_app
    '                    .Texto = "Selecciona la Cuenta:"
    '                    .MinSeleccion = 1
    '                    .MaxSeleccion = 1
    '                    .elementos = actividad
    '                    .ShowDialog()
    '                    actividad = .elementos
    '                    If .DialogResult = Windows.Forms.DialogResult.Cancel Then
    '                        Exit Sub
    '                    End If
    '                End With

    '                Dim descrip As String = ""
    '                For i As Integer = 0 To actividad.GetLength(1)
    '                    If actividad(1, i) = "1" Then
    '                        descrip = actividad(0, i)
    '                        Exit For
    '                    End If
    '                Next
    '                Me.TablaImportar.Item(NCuenta.Index, Me.TablaImportar.CurrentRow.Index).Value = descrip
    '            ElseIf Me.TablaImportar.CurrentCell.ColumnIndex = CuentasEfectivo.Index Then 'Cuentas del Efectivo

    '                Dim ds As DataSet = Eventos.Obtener_DS("Select rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta, cuenta as cta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1010' and Nivel2 > 0 and Nivel3 > 0 order by cta ")
    '                Dim actividad(,) As String
    '                ReDim actividad(2, ds.Tables(0).Rows.Count + 1)

    '                For i As Integer = 0 To ds.Tables(0).Rows.Count - 1

    '                    actividad(0, i) = ds.Tables(0).Rows(i)(0)
    '                    Debug.Print(ds.Tables(0).Rows(i)(0))
    '                    actividad(1, i) = "0"
    '                Next
    '                With My.Forms.DialogUnaSeleccion
    '                    .limpiar()
    '                    .Titulo = Eventos.titulo_app
    '                    .Texto = "Selecciona la Cuenta para el Efectivo:"
    '                    .MinSeleccion = 1
    '                    .MaxSeleccion = 1
    '                    .elementos = actividad
    '                    .ShowDialog()
    '                    actividad = .elementos
    '                    If .DialogResult = Windows.Forms.DialogResult.Cancel Then
    '                        Exit Sub
    '                    End If
    '                End With
    '                Dim descrip As String = ""
    '                For i As Integer = 0 To actividad.GetLength(1)
    '                    If actividad(1, i) = "1" Then
    '                        descrip = actividad(0, i)
    '                        Exit For
    '                    End If
    '                Next
    '                Me.TablaImportar.Item(CuentasEfectivo.Index, Me.TablaImportar.CurrentRow.Index).Value = descrip
    '            ElseIf Me.TablaImportar.CurrentCell.ColumnIndex = CtaAnti.Index Then 'Cuentas del Anticipos
    '                Dim ds As DataSet
    '                If Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value <> Nothing Then
    '                    If Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value = "C" Or Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value = "CPP" Then
    '                        ds = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1200' and Nivel2 > 0   ORDER BY cta")

    '                    ElseIf Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value = "GG" Or Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value = "GGPP" Then
    '                        ds = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1210' and Nivel2 > 0   ORDER BY cta")

    '                    End If
    '                End If



    '                '  ds = Eventos.Obtener_DS("Select rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta, cuenta as cta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1070' and Nivel2 > 0 and Nivel3 > 0 order by cta")
    '                Dim actividad(,) As String
    '                ReDim actividad(2, ds.Tables(0).Rows.Count + 1)

    '                For i As Integer = 0 To ds.Tables(0).Rows.Count - 1

    '                    actividad(0, i) = ds.Tables(0).Rows(i)(0)
    '                    Debug.Print(ds.Tables(0).Rows(i)(0))
    '                    actividad(1, i) = "0"
    '                Next
    '                With My.Forms.DialogUnaSeleccion
    '                    .limpiar()
    '                    .Titulo = Eventos.titulo_app
    '                    .Texto = "Selecciona la Cuenta para el Anticipos:"
    '                    .MinSeleccion = 1
    '                    .MaxSeleccion = 1
    '                    .elementos = actividad
    '                    .ShowDialog()
    '                    actividad = .elementos
    '                    If .DialogResult = Windows.Forms.DialogResult.Cancel Then
    '                        Exit Sub
    '                    End If
    '                End With
    '                Dim descrip As String = ""
    '                For i As Integer = 0 To actividad.GetLength(1)
    '                    If actividad(1, i) = "1" Then
    '                        descrip = actividad(0, i)
    '                        Exit For
    '                    End If
    '                Next
    '                Me.TablaImportar.Item(CtaAnti.Index, Me.TablaImportar.CurrentRow.Index).Value = descrip
    '            ElseIf Me.TablaImportar.CurrentCell.ColumnIndex = CtaAjustes.Index Then 'Cuentas del Ajuste



    '                Dim ds As DataSet = Eventos.Obtener_DS("Select rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta, cuenta as cta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " order by cta")
    '                Dim actividad(,) As String
    '                ReDim actividad(2, ds.Tables(0).Rows.Count + 1)

    '                For i As Integer = 0 To ds.Tables(0).Rows.Count - 1

    '                    actividad(0, i) = ds.Tables(0).Rows(i)(0)
    '                    Debug.Print(ds.Tables(0).Rows(i)(0))
    '                    actividad(1, i) = "0"
    '                Next
    '                With My.Forms.DialogUnaSeleccion
    '                    .limpiar()
    '                    .Titulo = Eventos.titulo_app
    '                    .Texto = "Selecciona la Cuenta para el Ajuste:"
    '                    .MinSeleccion = 1
    '                    .MaxSeleccion = 1
    '                    .elementos = actividad
    '                    .ShowDialog()
    '                    actividad = .elementos
    '                    If .DialogResult = Windows.Forms.DialogResult.Cancel Then
    '                        Exit Sub
    '                    End If
    '                End With
    '                Dim descrip As String = ""
    '                For i As Integer = 0 To actividad.GetLength(1)
    '                    If actividad(1, i) = "1" Then
    '                        descrip = actividad(0, i)
    '                        Exit For
    '                    End If
    '                Next
    '                Me.TablaImportar.Item(CtaAjustes.Index, Me.TablaImportar.CurrentRow.Index).Value = descrip
    '            End If
    '        ElseIf Me.TCEmitidas.SelectedIndex = 1 Then
    '            If Me.TablaD.CurrentCell.ColumnIndex = Me.NomCuentaD.Index Then 'Cuentas del Cargo
    '                Dim ds As DataSet = Eventos.Obtener_DS("select Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta,Rtrim(Descripcion) as des from catalogo_de_cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and clave= '" & Trim(Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value) & "' and nivel3 >0  and rfc= '" & Me.TablaD.Item(RFCED.Index, Me.TablaD.CurrentRow.Index).Value & "' order by cta")
    '                Dim actividad(,) As String
    '                ReDim actividad(2, ds.Tables(0).Rows.Count + 1)

    '                For i As Integer = 0 To ds.Tables(0).Rows.Count - 1
    '                    Dim cadena As String = ds.Tables(0).Rows(i)("Cuenta")
    '                    Dim posi As Integer = InStr(1, cadena, "-", CompareMethod.Binary)
    '                    Dim cuantos As Integer = Len(cadena) - Len(cadena.Substring(0, posi))
    '                    Dim consecutivo As String = cadena.Substring(posi, cuantos)
    '                    Dim Sql As String = " select Rtrim(Descripcion) as Cuenta from catalogo_de_cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and Nivel1= '" & consecutivo.ToString.Substring(0, 4) & "' and nivel2= '" & consecutivo.ToString.Substring(4, 4) & "'  and nivel3 ='" & consecutivo.ToString.Substring(8, 4) & "'  and nivel4= '0000'"
    '                    Dim ds2 As DataSet = Eventos.Obtener_DS(Sql)

    '                    If Trim(ds.Tables(0).Rows(0)("DES")) = Trim(ds2.Tables(0).Rows(0)("Cuenta")) Then
    '                        actividad(0, i) = ds.Tables(0).Rows(0)("Cuenta")
    '                    Else
    '                        actividad(0, i) = ds2.Tables(0).Rows(0)("Cuenta") & " " & ds.Tables(0).Rows(i)(0)
    '                    End If
    '                    '  actividad(0, i) = ds2.Tables(0).Rows(0)("Cuenta") & " " & ds.Tables(0).Rows(i)(0)
    '                    Debug.Print(ds.Tables(0).Rows(i)(0))
    '                    actividad(1, i) = "0"
    '                Next
    '                With My.Forms.DialogUnaSeleccion
    '                    .limpiar()
    '                    .Titulo = Eventos.titulo_app
    '                    .Texto = "Selecciona la Cuenta:"
    '                    .MinSeleccion = 1
    '                    .MaxSeleccion = 1
    '                    .elementos = actividad
    '                    .ShowDialog()
    '                    actividad = .elementos
    '                    If .DialogResult = Windows.Forms.DialogResult.Cancel Then
    '                        Exit Sub
    '                    End If
    '                End With

    '                Dim descrip As String = ""
    '                For i As Integer = 0 To actividad.GetLength(1)
    '                    If actividad(1, i) = "1" Then
    '                        descrip = actividad(0, i)
    '                        Exit For
    '                    End If
    '                Next
    '                Me.TablaD.Item(NomCuentaD.Index, Me.TablaD.CurrentRow.Index).Value = descrip

    '            ElseIf Me.TablaD.CurrentCell.ColumnIndex = CtaEfD.Index Then 'Cuentas del Efectivo

    '                Dim ds As DataSet = Eventos.Obtener_DS("Select rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta, cuenta as cta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1010' and Nivel2 > 0 and Nivel3 > 0 order by cta ")
    '                Dim actividad(,) As String
    '                ReDim actividad(2, ds.Tables(0).Rows.Count + 1)

    '                For i As Integer = 0 To ds.Tables(0).Rows.Count - 1

    '                    actividad(0, i) = ds.Tables(0).Rows(i)(0)
    '                    Debug.Print(ds.Tables(0).Rows(i)(0))
    '                    actividad(1, i) = "0"
    '                Next
    '                With My.Forms.DialogUnaSeleccion
    '                    .limpiar()
    '                    .Titulo = Eventos.titulo_app
    '                    .Texto = "Selecciona la Cuenta para el Efectivo:"
    '                    .MinSeleccion = 1
    '                    .MaxSeleccion = 1
    '                    .elementos = actividad
    '                    .ShowDialog()
    '                    actividad = .elementos
    '                    If .DialogResult = Windows.Forms.DialogResult.Cancel Then
    '                        Exit Sub
    '                    End If
    '                End With
    '                Dim descrip As String = ""
    '                For i As Integer = 0 To actividad.GetLength(1)
    '                    If actividad(1, i) = "1" Then
    '                        descrip = actividad(0, i)
    '                        Exit For
    '                    End If
    '                Next
    '                Me.TablaD.Item(CtaEfD.Index, Me.TablaD.CurrentRow.Index).Value = descrip

    '            ElseIf Me.TablaD.CurrentCell.ColumnIndex = CtaAntiD.Index Then 'Cuentas del Anticipos

    '                Dim ds As DataSet = Eventos.Obtener_DS("Select rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta, cuenta as cta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1070' and Nivel2 > 0 and Nivel3 > 0 order by cta")
    '                Dim actividad(,) As String
    '                ReDim actividad(2, ds.Tables(0).Rows.Count + 1)

    '                For i As Integer = 0 To ds.Tables(0).Rows.Count - 1

    '                    actividad(0, i) = ds.Tables(0).Rows(i)(0)
    '                    Debug.Print(ds.Tables(0).Rows(i)(0))
    '                    actividad(1, i) = "0"
    '                Next
    '                With My.Forms.DialogUnaSeleccion
    '                    .limpiar()
    '                    .Titulo = Eventos.titulo_app
    '                    .Texto = "Selecciona la Cuenta para el Anticipos:"
    '                    .MinSeleccion = 1
    '                    .MaxSeleccion = 1
    '                    .elementos = actividad
    '                    .ShowDialog()
    '                    actividad = .elementos
    '                    If .DialogResult = Windows.Forms.DialogResult.Cancel Then
    '                        Exit Sub
    '                    End If
    '                End With
    '                Dim descrip As String = ""
    '                For i As Integer = 0 To actividad.GetLength(1)
    '                    If actividad(1, i) = "1" Then
    '                        descrip = actividad(0, i)
    '                        Exit For
    '                    End If
    '                Next
    '                Me.TablaD.Item(CtaAntiD.Index, Me.TablaD.CurrentRow.Index).Value = descrip

    '            ElseIf Me.TablaD.CurrentCell.ColumnIndex = CtaAD.Index Then 'Cuentas del Ajuste

    '                Dim ds As DataSet = Eventos.Obtener_DS("Select rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta, cuenta as cta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " order by cta")
    '                Dim actividad(,) As String
    '                ReDim actividad(2, ds.Tables(0).Rows.Count + 1)

    '                For i As Integer = 0 To ds.Tables(0).Rows.Count - 1

    '                    actividad(0, i) = ds.Tables(0).Rows(i)(0)
    '                    Debug.Print(ds.Tables(0).Rows(i)(0))
    '                    actividad(1, i) = "0"
    '                Next
    '                With My.Forms.DialogUnaSeleccion
    '                    .limpiar()
    '                    .Titulo = Eventos.titulo_app
    '                    .Texto = "Selecciona la Cuenta para el Ajuste:"
    '                    .MinSeleccion = 1
    '                    .MaxSeleccion = 1
    '                    .elementos = actividad
    '                    .ShowDialog()
    '                    actividad = .elementos
    '                    If .DialogResult = Windows.Forms.DialogResult.Cancel Then
    '                        Exit Sub
    '                    End If
    '                End With
    '                Dim descrip As String = ""
    '                For i As Integer = 0 To actividad.GetLength(1)
    '                    If actividad(1, i) = "1" Then
    '                        descrip = actividad(0, i)
    '                        Exit For
    '                    End If
    '                Next
    '                Me.TablaD.Item(CtaAD.Index, Me.TablaD.CurrentRow.Index).Value = descrip
    '            End If
    '        ElseIf Me.TCEmitidas.SelectedIndex = 2 Then
    '            If Me.TablaC.CurrentCell.ColumnIndex = Me.NomCuentaD.Index Then 'Cuentas del Cargo
    '                Dim ds As DataSet = Eventos.Obtener_DS("select Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta,  Rtrim(Descripcion) as des from catalogo_de_cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and clave= '" & Trim(Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value) & "' and nivel3 >0  and rfc= '" & Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value & "' order by cta")
    '                Dim actividad(,) As String
    '                ReDim actividad(2, ds.Tables(0).Rows.Count + 1)

    '                For i As Integer = 0 To ds.Tables(0).Rows.Count - 1
    '                    Dim cadena As String = ds.Tables(0).Rows(i)("Cuenta")
    '                    Dim posi As Integer = InStr(1, cadena, "-", CompareMethod.Binary)
    '                    Dim cuantos As Integer = Len(cadena) - Len(cadena.Substring(0, posi))
    '                    Dim consecutivo As String = cadena.Substring(posi, cuantos)
    '                    Dim Sql As String = " select Rtrim(Descripcion) as Cuenta from catalogo_de_cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and  Nivel1= '" & consecutivo.ToString.Substring(0, 4) & "' and nivel2= '" & consecutivo.ToString.Substring(4, 4) & "'  and nivel3 ='" & consecutivo.ToString.Substring(8, 4) & "'  and nivel4= '0000'"
    '                    Dim ds2 As DataSet = Eventos.Obtener_DS(Sql)

    '                    If Trim(ds.Tables(0).Rows(0)("DES")) = Trim(ds2.Tables(0).Rows(0)("Cuenta")) Then
    '                        actividad(0, i) = ds.Tables(0).Rows(0)("Cuenta")
    '                    Else
    '                        actividad(0, i) = ds2.Tables(0).Rows(0)("Cuenta") & " " & ds.Tables(0).Rows(i)(0)
    '                    End If

    '                    Debug.Print(ds.Tables(0).Rows(i)(0))
    '                    actividad(1, i) = "0"
    '                Next
    '                With My.Forms.DialogUnaSeleccion
    '                    .limpiar()
    '                    .Titulo = Eventos.titulo_app
    '                    .Texto = "Selecciona la Cuenta:"
    '                    .MinSeleccion = 1
    '                    .MaxSeleccion = 1
    '                    .elementos = actividad
    '                    .ShowDialog()
    '                    actividad = .elementos
    '                    If .DialogResult = Windows.Forms.DialogResult.Cancel Then
    '                        Exit Sub
    '                    End If
    '                End With

    '                Dim descrip As String = ""
    '                For i As Integer = 0 To actividad.GetLength(1)
    '                    If actividad(1, i) = "1" Then
    '                        descrip = actividad(0, i)
    '                        Exit For
    '                    End If
    '                Next
    '                Me.TablaC.Item(NomCtaComplemento.Index, Me.TablaC.CurrentRow.Index).Value = descrip

    '            ElseIf Me.TablaC.CurrentCell.ColumnIndex = CtaEfComplemento.Index Then 'Cuentas del Efectivo

    '                Dim ds As DataSet = Eventos.Obtener_DS("Select rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta, cuenta as cta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1010' and Nivel2 > 0 and Nivel3 > 0 order by cta ")
    '                Dim actividad(,) As String
    '                ReDim actividad(2, ds.Tables(0).Rows.Count + 1)

    '                For i As Integer = 0 To ds.Tables(0).Rows.Count - 1

    '                    actividad(0, i) = ds.Tables(0).Rows(i)(0)
    '                    Debug.Print(ds.Tables(0).Rows(i)(0))
    '                    actividad(1, i) = "0"
    '                Next
    '                With My.Forms.DialogUnaSeleccion
    '                    .limpiar()
    '                    .Titulo = Eventos.titulo_app
    '                    .Texto = "Selecciona la Cuenta para el Efectivo:"
    '                    .MinSeleccion = 1
    '                    .MaxSeleccion = 1
    '                    .elementos = actividad
    '                    .ShowDialog()
    '                    actividad = .elementos
    '                    If .DialogResult = Windows.Forms.DialogResult.Cancel Then
    '                        Exit Sub
    '                    End If
    '                End With
    '                Dim descrip As String = ""
    '                For i As Integer = 0 To actividad.GetLength(1)
    '                    If actividad(1, i) = "1" Then
    '                        descrip = actividad(0, i)
    '                        Exit For
    '                    End If
    '                Next
    '                Me.TablaC.Item(CtaEfComplemento.Index, Me.TablaC.CurrentRow.Index).Value = descrip

    '            ElseIf Me.TablaC.CurrentCell.ColumnIndex = CtaAntiComplemento.Index Then 'Cuentas del Anticipos
    '                Dim ds As DataSet
    '                If Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value <> Nothing Then
    '                    If Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value = "C" Or Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value = "CPP" Then
    '                        ds = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1200' and Nivel2 > 0   ORDER BY cta")
    '                    ElseIf Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value = "GG" Or Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value = "GGPP" Then
    '                        ds = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1210' and Nivel2 > 0   ORDER BY cta")
    '                    End If
    '                End If


    '                ' ds = Eventos.Obtener_DS("Select rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta, cuenta as cta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1070' and Nivel2 > 0 and Nivel3 > 0 order by cta")




    '                Dim actividad(,) As String
    '                ReDim actividad(2, ds.Tables(0).Rows.Count + 1)

    '                For i As Integer = 0 To ds.Tables(0).Rows.Count - 1

    '                    actividad(0, i) = ds.Tables(0).Rows(i)(0)
    '                    Debug.Print(ds.Tables(0).Rows(i)(0))
    '                    actividad(1, i) = "0"
    '                Next
    '                With My.Forms.DialogUnaSeleccion
    '                    .limpiar()
    '                    .Titulo = Eventos.titulo_app
    '                    .Texto = "Selecciona la Cuenta para el Anticipos:"
    '                    .MinSeleccion = 1
    '                    .MaxSeleccion = 1
    '                    .elementos = actividad
    '                    .ShowDialog()
    '                    actividad = .elementos
    '                    If .DialogResult = Windows.Forms.DialogResult.Cancel Then
    '                        Exit Sub
    '                    End If
    '                End With
    '                Dim descrip As String = ""
    '                For i As Integer = 0 To actividad.GetLength(1)
    '                    If actividad(1, i) = "1" Then
    '                        descrip = actividad(0, i)
    '                        Exit For
    '                    End If
    '                Next
    '                Me.TablaC.Item(CtaAntiComplemento.Index, Me.TablaC.CurrentRow.Index).Value = descrip

    '            ElseIf Me.TablaC.CurrentCell.ColumnIndex = CtaAjusComplemento.Index Then 'Cuentas del Ajuste

    '                Dim ds As DataSet = Eventos.Obtener_DS("Select rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta, cuenta as cta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " order by cta")
    '                Dim actividad(,) As String
    '                ReDim actividad(2, ds.Tables(0).Rows.Count + 1)

    '                For i As Integer = 0 To ds.Tables(0).Rows.Count - 1

    '                    actividad(0, i) = ds.Tables(0).Rows(i)(0)
    '                    Debug.Print(ds.Tables(0).Rows(i)(0))
    '                    actividad(1, i) = "0"
    '                Next
    '                With My.Forms.DialogUnaSeleccion
    '                    .limpiar()
    '                    .Titulo = Eventos.titulo_app
    '                    .Texto = "Selecciona la Cuenta para el Ajuste:"
    '                    .MinSeleccion = 1
    '                    .MaxSeleccion = 1
    '                    .elementos = actividad
    '                    .ShowDialog()
    '                    actividad = .elementos
    '                    If .DialogResult = Windows.Forms.DialogResult.Cancel Then
    '                        Exit Sub
    '                    End If
    '                End With
    '                Dim descrip As String = ""
    '                For i As Integer = 0 To actividad.GetLength(1)
    '                    If actividad(1, i) = "1" Then
    '                        descrip = actividad(0, i)
    '                        Exit For
    '                    End If
    '                Next
    '                Me.TablaC.Item(CtaAjusComplemento.Index, Me.TablaC.CurrentRow.Index).Value = descrip
    '            End If
    '        End If

    '    End Sub
    '    Private Sub TablaImportar_CellEndEdit(sender As Object, e As DataGridViewCellEventArgs) Handles TablaImportar.CellEndEdit
    '        Liberar_Proceso(Me.TablaImportar.CurrentRow.Index)


    '        'CALCULAR CUENTA DE EFECTIVO
    '        If Me.TablaImportar.Item(ImpEf.Index, Me.TablaImportar.CurrentRow.Index).Value > 0 Then
    '            'If Candado_Importe_Efectivo(Me.TablaImportar.CurrentRow.Index) = True Then ' se verifica candado
    '            '    ' IMPORTE DE EFECTIVO Antiguo Codigo

    '            Me.TablaImportar.Item(CuentasEfectivo.Index, Me.TablaImportar.CurrentRow.Index).Value = Cuenta_Efectivo()
    '            Me.TablaImportar.Columns(CuentasEfectivo.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
    '            'Else
    '            '    If MessageBox.Show("El importe de efectivo Excede los $2,000 deseas usarlo?", Eventos.titulo_app, MessageBoxButtons.YesNo, MessageBoxIcon.Question) = Windows.Forms.DialogResult.Yes Then

    '            '        Me.TablaImportar.Item(CuentasEfectivo.Index, Me.TablaImportar.CurrentRow.Index).Value = Cuenta_Efectivo()
    '            '        Me.TablaImportar.Columns(CuentasEfectivo.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
    '            '    Else
    '            '        Me.TablaImportar.Item(ImpEf.Index, Me.TablaImportar.CurrentRow.Index).Value = 0
    '            '        Exit Sub
    '            '    End If
    '            'End If
    '        Else
    '            Me.TablaImportar.Item(CuentasEfectivo.Index, Me.TablaImportar.CurrentRow.Index).Value = ""
    '        End If

    '        'CALCULAR CUENTA DE Ajustes
    '        If Me.TablaImportar.Item(Ajus.Index, Me.TablaImportar.CurrentRow.Index).Value <> 0 Then
    '            'If Candado_Importe_Efectivo(Me.TablaImportar.CurrentRow.Index) = True Then ' se verifica candado
    '            '    ' IMPORTE DE EFECTIVO Antiguo Codigo

    '            Me.TablaImportar.Item(CtaAjustes.Index, Me.TablaImportar.CurrentRow.Index).Value = Cuenta_Efectivo()
    '            Me.TablaImportar.Columns(CtaAjustes.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
    '            'Else
    '            '    If MessageBox.Show("El importe de efectivo Excede los $2,000 deseas usarlo?", Eventos.titulo_app, MessageBoxButtons.YesNo, MessageBoxIcon.Question) = Windows.Forms.DialogResult.Yes Then

    '            '        Me.TablaImportar.Item(CtaAjustes.Index, Me.TablaImportar.CurrentRow.Index).Value = Cuenta_Efectivo()
    '            '        Me.TablaImportar.Columns(CtaAjustes.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
    '            '    Else
    '            '        Me.TablaImportar.Item(Ajus.Index, Me.TablaImportar.CurrentRow.Index).Value = 0
    '            '        Exit Sub
    '            '    End If
    '            'End If
    '        Else
    '            Me.TablaImportar.Item(CtaAjustes.Index, Me.TablaImportar.CurrentRow.Index).Value = ""
    '        End If
    '        'CALCULAR CUENTA DE anticipos
    '        If Me.TablaImportar.Item(Anti.Index, Me.TablaImportar.CurrentRow.Index).Value > 0 Then

    '            Me.TablaImportar.Item(CtaAnti.Index, Me.TablaImportar.CurrentRow.Index).Value = Cuenta_Anticipo()
    '            Me.TablaImportar.Columns(CtaAnti.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
    '        Else
    '            Me.TablaImportar.Item(CtaAnti.Index, Me.TablaImportar.CurrentRow.Index).Value = ""
    '        End If



    '        ' Importe de Transferencia
    '        If Me.TablaImportar.Item(ImpT.Index, Me.TablaImportar.CurrentRow.Index).Value > 0 Then
    '            ' BUSCAR BANCOS EN AUTOMATICO DEL DESTINO
    '            If Trim(Me.TablaImportar.Item(Bancodestino.Index, Me.TablaImportar.CurrentRow.Index).Value) <> Nothing Then
    '                If Trim(Me.TablaImportar.Item(CtaBD.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" Or Trim(Me.TablaImportar.Item(CtaBD.Index, Me.TablaImportar.CurrentRow.Index).Value) <> Nothing Then
    '                Else
    '                    Dim posi As Integer = InStr(1, Me.TablaImportar.Item(Bancodestino.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
    '                    Dim cuantos As Integer = Len(Me.TablaImportar.Item(Bancodestino.Index, Me.TablaImportar.CurrentRow.Index).Value) - Len(Me.TablaImportar.Item(Bancodestino.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, posi))
    '                    Dim Al As String = Me.TablaImportar.Item(Bancodestino.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(posi, cuantos)
    '                    Me.TablaImportar.Item(CtaBD.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes", "No_Cuenta", " Id_Empresa =" & Me.lstCliente.SelectItem & " and Alias = '" & Trim(Al) & "'", True)

    '                    Me.TablaImportar.Item(CuentaBancos.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes INNER JOIN Catalogo_de_Cuentas ON Catalogo_de_Cuentas.Id_cat_Cuentas = Bancos_Clientes.Id_cat_Cuentas", "Catalogo_de_Cuentas.Cuenta", " Bancos_Clientes.Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos_Clientes.Alias = '" & Trim(Al) & "'", True)

    '                End If

    '            End If

    '            If Trim(Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value) <> Nothing Then
    '                Try
    '                    If Trim(Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" And Trim(Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "0" Then
    '                        Dim largo As Integer = Len(Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value)
    '                        Dim cadena As String = Trim(Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value.ToString.Substring(largo - 3, 3))
    '                        largo = Len(Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value)
    '                        Dim Al As String = Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(largo - 3, 3)
    '                        If cadena <> Al Then
    '                            largo = InStr(1, Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
    '                            Al = Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, largo - 1)
    '                            Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos.Clave = '" & Trim(Al) & "' and  RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "'", True)
    '                        End If
    '                    Else
    '                        Dim posi As Integer = InStr(1, Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
    '                        Dim Al As String = Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, posi - 1)
    '                        Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos.Clave = '" & Trim(Al) & "' and  RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "'", True)
    '                    End If
    '                Catch ex As Exception

    '                End Try
    '            Else
    '                Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value = Banco_destino(Me.lstCliente.SelectItem, Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value)
    '                Try
    '                    If Trim(Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" And Trim(Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "0" Then
    '                        Dim largo As Integer = Len(Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value)
    '                        Dim cadena As String = Trim(Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value.ToString.Substring(largo - 3, 3))
    '                        largo = Len(Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value)
    '                        Dim Al As String = Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(largo - 3, 3)
    '                        If cadena <> Al Then
    '                            largo = InStr(1, Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
    '                            Al = Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, largo - 1)
    '                            Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos.Clave = '" & Trim(Al) & "' and  RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "'", True)
    '                        End If
    '                    Else
    '                        Dim posi As Integer = InStr(1, Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
    '                        Dim Al As String = Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, posi - 1)
    '                        Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos.Clave = '" & Trim(Al) & "' and  RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "'", True)
    '                    End If
    '                Catch ex As Exception

    '                End Try
    '            End If

    '            'Tipos Polizas

    '            'If Trim(Me.TablaImportar.Item(TipoPoliza.Index, Me.TablaImportar.CurrentRow.Index).Value) <> Nothing Then
    '            '    If Trim(Me.TablaImportar.Item(Bancodestino.Index, Me.TablaImportar.CurrentRow.Index).Value) <> Nothing Then
    '            '    Else
    '            '        Dim fila As DataGridViewRow = Me.TablaImportar.Rows(Me.TablaImportar.CurrentRow.Index)
    '            '        Try
    '            '            If Trim(Me.TablaImportar.Item(TipoPoliza.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" Then
    '            '                Dim largo As Integer = Len(Me.TablaImportar.Item(TipoPoliza.Index, Me.TablaImportar.CurrentRow.Index).Value)
    '            '                Dim posicion As Integer = InStr(1, Me.TablaImportar.Item(TipoPoliza.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
    '            '                Dim Al As String = Me.TablaImportar.Item(TipoPoliza.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(posicion + 1, largo - posicion - 1)
    '            '                Dim indice As Integer = Obtener_indexBT(Al)
    '            '                If indice = 1000 Then
    '            '                Else
    '            '                    fila.Cells(BancoOrigen.Index).Value = Me.Bancodestino.Items(indice)
    '            '                End If
    '            '            End If
    '            '        Catch ex As Exception

    '            '        End Try
    '            '    End If
    '            'End If


    '            If Trim(UCase(Me.lblce.Text)) = "FALSE" Then
    '                Me.TablaImportar.Columns(Fechat.Index).Visible = True
    '                Me.TablaImportar.Columns(BancoOrigen.Index).Visible = False
    '                Me.TablaImportar.Columns(CuentaO.Index).Visible = False
    '                Me.TablaImportar.Columns(Bancodestino.Index).Visible = False
    '                Me.TablaImportar.Columns(CtaBD.Index).Visible = False
    '            End If


    '            If Me.TablaImportar.Item(ImpT2.Index, Me.TablaImportar.CurrentRow.Index).Value > 0 Then
    '                If Trim(Me.TablaImportar.Item(BankOT2.Index, Me.TablaImportar.CurrentRow.Index).Value) <> Nothing Then
    '                    If Trim(Me.TablaImportar.Item(CtaOT2.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" Then
    '                    Else
    '                        Dim posi As Integer = InStr(1, Me.TablaImportar.Item(BankOT2.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
    '                        Dim cuantos As Integer = Len(Me.TablaImportar.Item(BankOT2.Index, Me.TablaImportar.CurrentRow.Index).Value) - Len(Me.TablaImportar.Item(BankOT2.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, posi))
    '                        Dim Al As String = Me.TablaImportar.Item(BankOT2.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(posi, cuantos)
    '                        Me.TablaImportar.Item(CtaOT2.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes", "No_Cuenta", " Id_Empresa =" & Me.lstCliente.SelectItem & " and Alias = '" & Trim(Al) & "'", True)
    '                        Me.TablaImportar.Item(CtaT2.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes INNER JOIN Catalogo_de_Cuentas ON Catalogo_de_Cuentas.Id_cat_Cuentas = Bancos_Clientes.Id_cat_Cuentas", "Catalogo_de_Cuentas.Cuenta", " Bancos_Clientes.Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos_Clientes.Alias = '" & Trim(Al) & "'", True)
    '                    End If

    '                End If

    '                If Trim(Me.TablaImportar.Item(BankDT2.Index, Me.TablaImportar.CurrentRow.Index).Value) <> Nothing Then
    '                    Try
    '                        If Trim(Me.TablaImportar.Item(CtaDT2.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" And Trim(Me.TablaImportar.Item(CtaDT2.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "0" Then
    '                            Dim largo As Integer = Len(Me.TablaImportar.Item(BankDT2.Index, Me.TablaImportar.CurrentRow.Index).Value)
    '                            Dim cadena As String = Trim(Me.TablaImportar.Item(BankDT2.Index, Me.TablaImportar.CurrentRow.Index).Value.ToString.Substring(largo - 3, 3))
    '                            largo = Len(Me.TablaImportar.Item(CtaDT2.Index, Me.TablaImportar.CurrentRow.Index).Value)
    '                            Dim Al As String = Me.TablaImportar.Item(CtaDT2.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(largo - 3, 3)
    '                            If cadena <> Al Then
    '                                largo = InStr(1, Me.TablaImportar.Item(BankDT2.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
    '                                Al = Me.TablaImportar.Item(BankDT2.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, largo - 1)
    '                                Me.TablaImportar.Item(CtaDT2.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC", "Clabe", " Id_Empresa =" & Me.lstCliente.SelectItem & " and id_banco = '" & Trim(Al) & "' and  RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "'", True)
    '                            End If
    '                        Else
    '                            Dim posi As Integer = InStr(1, Me.TablaImportar.Item(BankDT2.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
    '                            Dim Al As String = Me.TablaImportar.Item(BankDT2.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, posi - 1)
    '                            Me.TablaImportar.Item(CtaDT2.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC", "Clabe", " Id_Empresa =" & Me.lstCliente.SelectItem & " and id_banco = '" & Trim(Al) & "' and  RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "'", True)
    '                        End If
    '                    Catch ex As Exception

    '                    End Try
    '                Else
    '                    Me.TablaImportar.Item(BankDT2.Index, Me.TablaImportar.CurrentRow.Index).Value = Banco_destino(Me.lstCliente.SelectItem, Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value)
    '                    Try
    '                        If Trim(Me.TablaImportar.Item(CtaDT2.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" And Trim(Me.TablaImportar.Item(CtaDT2.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "0" Then
    '                            Dim largo As Integer = Len(Me.TablaImportar.Item(BankDT2.Index, Me.TablaImportar.CurrentRow.Index).Value)
    '                            Dim cadena As String = Trim(Me.TablaImportar.Item(BankDT2.Index, Me.TablaImportar.CurrentRow.Index).Value.ToString.Substring(largo - 3, 3))
    '                            largo = Len(Me.TablaImportar.Item(CtaDT2.Index, Me.TablaImportar.CurrentRow.Index).Value)
    '                            Dim Al As String = Me.TablaImportar.Item(CtaDT2.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(largo - 3, 3)
    '                            If cadena <> Al Then
    '                                largo = InStr(1, Me.TablaImportar.Item(BankDT2.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
    '                                Al = Me.TablaImportar.Item(BankDT2.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, largo - 1)
    '                                Me.TablaImportar.Item(CtaDT2.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC", "Clabe", " Id_Empresa =" & Me.lstCliente.SelectItem & " and id_banco = '" & Trim(Al) & "' and  RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "'", True)
    '                            End If
    '                        Else
    '                            Dim posi As Integer = InStr(1, Me.TablaImportar.Item(BankDT2.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
    '                            Dim Al As String = Me.TablaImportar.Item(BankDT2.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, posi - 1)
    '                            Me.TablaImportar.Item(CtaDT2.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC", "Clabe", " Id_Empresa =" & Me.lstCliente.SelectItem & " and id_banco = '" & Trim(Al) & "' and  RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "'", True)
    '                        End If
    '                    Catch ex As Exception

    '                    End Try
    '                End If

    '                If Trim(UCase(Me.lblce.Text)) = "FALSE" Then
    '                    Me.TablaImportar.Columns(FT2.Index).Visible = True
    '                    Me.TablaImportar.Columns(BankOT2.Index).Visible = False
    '                    Me.TablaImportar.Columns(CtaOT2.Index).Visible = False
    '                    Me.TablaImportar.Columns(BankDT2.Index).Visible = False
    '                    Me.TablaImportar.Columns(CtaDT2.Index).Visible = False
    '                End If
    '            End If

    '        End If
    '        'Importe cheque
    '        If Me.TablaImportar.Item(ImpC.Index, Me.TablaImportar.CurrentRow.Index).Value > 0 Then
    '            'Cheques
    '            'Cargar bancos destino para ingresos de Cheques
    '            Dim posi As Integer = 0
    '            Dim Al As String = ""
    '            If Trim(Me.TablaImportar.Item(BancoDE.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" Then
    '                If Trim(Me.TablaImportar.Item(CtaDestinoChe.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" Then


    '                Else
    '                    posi = InStr(1, Me.TablaImportar.Item(BancoDE.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
    '                    Dim cuantos As Integer = Len(Me.TablaImportar.Item(BancoDE.Index, Me.TablaImportar.CurrentRow.Index).Value) - Len(Me.TablaImportar.Item(BancoDE.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, posi))
    '                    Al = Me.TablaImportar.Item(BancoDE.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(posi, cuantos)
    '                    Me.TablaImportar.Item(CtaDestinoChe.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes", "No_Cuenta", " Id_Empresa =" & Me.lstCliente.SelectItem & " and Alias = '" & Trim(Al) & "'", True)
    '                    Me.TablaImportar.Item(CtaCheque.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes INNER JOIN Catalogo_de_Cuentas ON Catalogo_de_Cuentas.Id_cat_Cuentas = Bancos_Clientes.Id_cat_Cuentas", "Catalogo_de_Cuentas.Cuenta", " Bancos_Clientes.Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos_Clientes.Alias = '" & Trim(Al) & "'", True)
    '                End If
    '            Else

    '            End If
    '            'Cargar bancos Origen para ingresos de Cheques
    '            If Trim(Me.TablaImportar.Item(BancosCheques.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" Then
    '                If Trim(Me.TablaImportar.Item(CuentaC.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" Then
    '                    Dim largo As Integer = Len(Me.TablaImportar.Item(BancosCheques.Index, Me.TablaImportar.CurrentRow.Index).Value)
    '                    Dim cadena As String = Trim(Me.TablaImportar.Item(BancosCheques.Index, Me.TablaImportar.CurrentRow.Index).Value.ToString.Substring(largo - 3, 3))
    '                    largo = Len(Me.TablaImportar.Item(CuentaC.Index, Me.TablaImportar.CurrentRow.Index).Value)
    '                    Al = Me.TablaImportar.Item(CuentaC.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(largo - 3, 3)
    '                    If cadena <> Al Then
    '                        posi = InStr(1, Me.TablaImportar.Item(BancosCheques.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
    '                        Al = Trim(Me.TablaImportar.Item(BancosCheques.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, posi - 1))
    '                        Me.TablaImportar.Item(CuentaC.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos.Clave = " & Trim(Al) & " and  RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "' and Bancos_RFC.clabe like '%" & cadena & "%'", True)
    '                    End If
    '                Else
    '                    posi = InStr(1, Me.TablaImportar.Item(BancosCheques.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
    '                    Al = Trim(Me.TablaImportar.Item(BancosCheques.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, posi - 1))
    '                    Me.TablaImportar.Item(CuentaC.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos.Clave = " & Trim(Al) & " and  RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "'", True)
    '                End If
    '            Else
    '                Me.TablaImportar.Item(BancosCheques.Index, Me.TablaImportar.CurrentRow.Index).Value = Banco_OrigenChe(Me.lstCliente.SelectItem, Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value)
    '                Me.TablaImportar.Item(CuentaC.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & "  and  RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "'", True)
    '            End If
    '            'Se Muestran Columnas de Contabilidad Electronica
    '            If Trim(UCase(Me.lblce.Text)) = "FALSE" Then
    '                Me.TablaImportar.Columns(BancosCheques.Index).Visible = False
    '                Me.TablaImportar.Columns(CuentaC.Index).Visible = False
    '                Me.TablaImportar.Columns(NoCheque.Index).Visible = False
    '                Me.TablaImportar.Columns(FechaC.Index).Visible = True

    '            End If

    '        End If


    '        If Me.TablaImportar.Item(ImpProvis.Index, Me.TablaImportar.CurrentRow.Index).Value > 0 Then
    '            'If Trim(Me.TablaImportar.Item(CtaProv.Index, Me.TablaImportar.CurrentRow.Index).Value) <> Nothing Then
    '            'Else
    '            '    Me.TablaImportar.Item(CtaProv.Index, Me.TablaImportar.CurrentRow.Index).Value = Buscacuenta_Provision()
    '            'End If
    '        Else
    '            Me.TablaImportar.Item(CtaProv.Index, Me.TablaImportar.CurrentRow.Index).Value = ""
    '        End If

    '        'candados
    '        Candados(Me.TablaImportar.CurrentRow.Index)

    '    End Sub
    '    Private Function Buscacuenta_Provision()
    '        Dim cta As String = ""
    '        Dim leyenda As String = ""
    '        Dim dsconta As DataSet
    '        Dim columna As Integer = Me.TablaImportar.CurrentCell.ColumnIndex
    '        dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas WHERE Nivel1 >0 AND (Nivel2 >0 AND Nivel2 not in ('0009','0006') ) AND Clave = 'IPC' and Id_Empresa = " & Me.lstCliente.SelectItem & " and rfc = '" & Trim(Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value) & "' ORDER BY cta")
    '        If dsconta.Tables(0).Rows.Count > 0 Then
    '            cta = dsconta.Tables(0).Rows(0)(0)
    '        Else
    '            Try
    '                dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas WHERE Nivel1 >0 AND (Nivel2 >0 AND Nivel2 not in ('0009','0006') ) AND Clave = 'IPC' and Id_Empresa = " & Me.lstCliente.SelectItem & "  ORDER BY cta")
    '                leyenda = "IPC"
    '                Dim cuenta As String = ""
    '                Dim act(,) As String
    '                ReDim act(2, dsconta.Tables(0).Rows.Count + 1)
    '                For s As Integer = 0 To dsconta.Tables(0).Rows.Count - 1
    '                    act(0, s) = dsconta.Tables(0).Rows(s)(0)
    '                    Debug.Print(dsconta.Tables(0).Rows(s)(0))
    '                    act(1, s) = "0"
    '                Next
    '                With My.Forms.DialogUnaSeleccion
    '                    .limpiar()
    '                    .Titulo = Eventos.titulo_app
    '                    .Texto = "Selecciona la Cuenta Madre para " & leyenda & ":"
    '                    .MinSeleccion = 1
    '                    .MaxSeleccion = 1
    '                    .elementos = act
    '                    .ShowDialog()
    '                    act = .elementos
    '                    If .DialogResult = Windows.Forms.DialogResult.Cancel Then
    '                        cta = ""
    '                    End If
    '                End With

    '                Dim Letra As String = ""
    '                For s As Integer = 0 To act.GetLength(1)
    '                    If act(1, s) = "1" Then
    '                        Letra = act(0, s)
    '                        Exit For
    '                    End If
    '                Next
    '                Dim cadena As String = Trim(Letra)
    '                Dim posi As Integer = InStr(1, cadena, "-", CompareMethod.Binary)
    '                Dim cuantos As Integer = Len(cadena) - Len(cadena.Substring(0, posi))
    '                Letra = cadena.Substring(posi, cuantos)
    '                If Verifica_existencia(Letra.ToString.Substring(0, 4), Letra.ToString.Substring(4, 4), "IPC", Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value) = True Then
    '                    cuenta = Val(ObtenerValorDB("Catalogo_de_cuentas", "CASE WHEN max (Nivel3 ) + 1 IS NULL THEN 1 WHEN max (Nivel3 ) + 1 IS NOT NULL THEN   max (Nivel3 ) + 1 END AS C ", "  Nivel1 =" & Letra.ToString.Substring(0, 4) & "  AND Nivel2 =" & Letra.ToString.Substring(4, 4) & " and Id_Empresa = " & Me.lstCliente.SelectItem & " ", True))
    '                    cuenta = Format(cuenta).PadLeft(4, "0")
    '                    Crear_cuenta(Letra.ToString.Substring(0, 4), Letra.ToString.Substring(4, 4), cuenta,
    '                                             "0000", Letra.Substring(0, 8) & cuenta & "0000", Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & " " & Me.TablaImportar.Item(NomEmisor.Index, Me.TablaImportar.CurrentRow.Index).Value,
    '                                            Me.lstCliente.SelectItem, "IPC", Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value)
    '                Else
    '                    MessageBox.Show("La cuenta ya existe ...", Eventos.titulo_app, MessageBoxButtons.OK, MessageBoxIcon.Warning)
    '                End If
    '            Catch ex As Exception
    '                cta = ""
    '                Me.TablaImportar.Item(ImpProvis.Index, Me.TablaImportar.CurrentRow.Index).Value = 0
    '            End Try
    '        End If
    '        Return cta
    '    End Function
    '    Private Sub Cargar_bancos(ByVal bancos As String)
    '        Dim sql As String = " SELECT rtrim(Bancos.Clave) +'-'+ Bancos_Clientes.Alias AS Alias FROM Bancos_Clientes INNER JOIN Bancos ON Bancos_Clientes.Id_Banco =Bancos.Id_Banco  where Id_Empresa = " & Me.lstCliente.SelectItem & " and alias like '%" & bancos & "%'"
    '        Dim ds As DataSet = Eventos.Obtener_DS(sql)
    '        If ds.Tables(0).Rows.Count > 0 Then
    '            If bancos = "Ch" Then
    '                'Cheque
    '                If Me.BancoDE.Items.Count = 0 Then
    '                    For i As Integer = 0 To ds.Tables(0).Rows.Count - 1
    '                        Me.BancoDE.Items.Add(ds.Tables(0).Rows(i)("Alias"))
    '                    Next
    '                Else
    '                    Try
    '                        Me.BancoDE.Items.Clear()
    '                    Catch ex As Exception

    '                    End Try

    '                    For i As Integer = 0 To ds.Tables(0).Rows.Count - 1
    '                        Me.BancoDE.Items.Add(ds.Tables(0).Rows(i)("Alias"))
    '                    Next
    '                End If
    '            Else
    '                'Transferencia
    '                'Origen
    '                If Me.Bancodestino.Items.Count = 0 Then
    '                    For i As Integer = 0 To ds.Tables(0).Rows.Count - 1
    '                        Me.Bancodestino.Items.Add(ds.Tables(0).Rows(i)("Alias"))

    '                    Next
    '                Else
    '                    Try
    '                        Me.Bancodestino.Items.Clear()
    '                    Catch ex As Exception

    '                    End Try


    '                    For i As Integer = 0 To ds.Tables(0).Rows.Count - 1
    '                        Me.Bancodestino.Items.Add(ds.Tables(0).Rows(i)("Alias"))

    '                    Next
    '                End If
    '                If Me.BankOT2.Items.Count = 0 Then
    '                    For i As Integer = 0 To ds.Tables(0).Rows.Count - 1
    '                        Me.BankOT2.Items.Add(ds.Tables(0).Rows(i)("Alias"))

    '                    Next
    '                Else
    '                    Try
    '                        Me.BankOT2.Items.Clear()
    '                    Catch ex As Exception

    '                    End Try


    '                    For i As Integer = 0 To ds.Tables(0).Rows.Count - 1
    '                        Me.BankOT2.Items.Add(ds.Tables(0).Rows(i)("Alias"))

    '                    Next
    '                End If
    '            End If
    '        End If

    '    End Sub
    '    Private Function Banco_OrigenChe(ByVal Cliente As Integer, ByVal Rfc As String)
    '        Dim banco As String = ""
    '        Dim sql2 As String = " SELECT DISTINCT CONVERT(NVARCHAR, Bancos.clave, 103) + '-' + Bancos.Nombre AS Banco ,clabe  FROM     Bancos INNER JOIN     Bancos_RFC ON Bancos.Id_Banco = Bancos_RFC.Id_Banco  WHERE emitidas=1 and (Bancos_RFC.Id_Empresa  = " & Cliente & ") and RFC = '" & Rfc & "' and Favorito=1"
    '        Dim ds2 As DataSet = Eventos.Obtener_DS(sql2)

    '        If ds2.Tables(0).Rows.Count > 0 Then
    '            Dim largo As Integer = Len(ds2.Tables(0).Rows(0)("Clabe"))
    '            Try
    '                banco = Trim(ds2.Tables(0).Rows(0)("Banco")) & " " & Trim(ds2.Tables(0).Rows(0)("Clabe").ToString.Substring(largo - 3, 3))
    '            Catch ex As Exception

    '            End Try
    '        Else
    '            banco = ""
    '        End If

    '        Return banco
    '    End Function
    '    Private Function Banco_destino(ByVal Cliente As Integer, ByVal Rfc As String)
    '        Dim banco As String = ""
    '        Dim sql2 As String = " SELECT DISTINCT CONVERT(NVARCHAR, Bancos.clave, 103) + '-' + Bancos.Nombre AS Banco ,clabe  FROM     Bancos INNER JOIN     Bancos_RFC ON Bancos.Id_Banco = Bancos_RFC.Id_Banco  WHERE emitidas=1 and (Bancos_RFC.Id_Empresa  = " & Cliente & ") and RFC = '" & Rfc & "' and Favorito=1"
    '        Dim ds2 As DataSet = Eventos.Obtener_DS(sql2)

    '        If ds2.Tables(0).Rows.Count > 0 Then
    '            Dim largo As Integer = Len(ds2.Tables(0).Rows(0)("Clabe"))
    '            Try
    '                banco = Trim(ds2.Tables(0).Rows(0)("Banco")) & " " & Trim(ds2.Tables(0).Rows(0)("Clabe").ToString.Substring(largo - 3, 3))
    '            Catch ex As Exception

    '            End Try
    '        Else
    '            banco = ""
    '        End If

    '        Return banco
    '    End Function
    '    Private Function Calcula_Moneda(ByVal fecha As String)
    '        Dim importe As Decimal = 0
    '        Dim ds As DataSet = Eventos.Obtener_DS(" Select Costo_Pesos FROM Tipos_de_Cambio WHERE Fecha_Aplicacion = " & Eventos.Sql_hoy(fecha) & "")
    '        If ds.Tables(0).Rows.Count > 0 Then
    '            importe = ds.Tables(0).Rows(0)("Costo_Pesos")
    '        Else
    '            importe = 0
    '        End If
    '        Return importe
    '    End Function
    '    Private Function Cuenta_cargos(ByVal rfc As String, ByVal letra As String)
    '        Dim cuenta As String
    '        Dim sql As String = " select Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, Rtrim(Descripcion) as DES from catalogo_de_cuentas where  clave= '" & Trim(letra) & "'  and nivel3 >0  and rfc= '" & rfc & "' and Id_Empresa = " & Me.lstCliente.SelectItem & ""
    '        Dim ds As DataSet = Eventos.Obtener_DS(sql)
    '        If ds.Tables(0).Rows.Count > 0 Then
    '            Dim cadena As String = ds.Tables(0).Rows(0)("Cuenta")
    '            Dim posi As Integer = InStr(1, cadena, "-", CompareMethod.Binary)
    '            Dim cuantos As Integer = Len(cadena) - Len(cadena.Substring(0, posi))
    '            Dim consecutivo As String = cadena.Substring(posi, cuantos)

    '            sql = " select Rtrim(Descripcion) as Cuenta from catalogo_de_cuentas where  Nivel1= '" & consecutivo.ToString.Substring(0, 4) & "' and nivel2= '" & consecutivo.ToString.Substring(4, 4) & "'  and nivel3 ='" & consecutivo.ToString.Substring(8, 4) & "'  and nivel4= '0000'  and Id_Empresa = " & Me.lstCliente.SelectItem & ""

    '            Dim ds2 As DataSet = Eventos.Obtener_DS(sql)
    '            If Trim(ds.Tables(0).Rows(0)("DES")) = Trim(ds2.Tables(0).Rows(0)("Cuenta")) Then
    '                cuenta = ds.Tables(0).Rows(0)("Cuenta")
    '            Else
    '                cuenta = ds2.Tables(0).Rows(0)("Cuenta") & " " & ds.Tables(0).Rows(0)("Cuenta")
    '            End If

    '        Else
    '            cuenta = ""
    '        End If
    '        Return cuenta
    '    End Function
    '    Private Function Cuenta_Efectivo()
    '        Dim cuenta As String
    '        Dim sql As String = " Select rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1010' and Nivel2 > 0 and Nivel3 > 1 "
    '        Dim ds As DataSet = Eventos.Obtener_DS(sql)
    '        If ds.Tables(0).Rows.Count > 0 Then
    '            cuenta = ds.Tables(0).Rows(0)("Cuenta")
    '        Else
    '            cuenta = ""
    '        End If
    '        Return cuenta
    '    End Function

    '    Private Function Cuenta_Anticipo()
    '        Dim cuenta As String
    '        Dim ds As DataSet
    '        If Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value <> Nothing Then
    '            If Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value = "C" Or Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value = "CPP" Then
    '                ds = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1200' and Nivel2 > 0   ORDER BY cta")
    '            ElseIf Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value = "GG" Or Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value = "GGPP" Then
    '                ds = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1210' and Nivel2 > 0   ORDER BY cta")
    '            End If
    '        End If

    '        'Dim sql As String = " Select rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1070' and Nivel2 > 0 and Nivel3 > 0 "
    '        'Dim ds As DataSet = Eventos.Obtener_DS(sql)
    '        If ds.Tables(0).Rows.Count > 0 Then
    '            cuenta = ds.Tables(0).Rows(0)("Cuenta")
    '        Else
    '            cuenta = ""
    '        End If
    '        Return cuenta
    '    End Function

    '    Private Function Cuenta_dev()
    '        Dim cuenta As String
    '        Dim sql As String = " Select rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1010' and Nivel2 > 0 and Nivel3 > 0 "
    '        Dim ds As DataSet = Eventos.Obtener_DS(sql)
    '        If ds.Tables(0).Rows.Count > 0 Then
    '            cuenta = ds.Tables(0).Rows(0)("Cuenta")
    '        Else
    '            cuenta = ""
    '        End If
    '        Return cuenta
    '    End Function
    '    Private Function Candado_Importe_Efectivo(ByVal i As Integer)
    '        Dim hacer As Boolean
    '        If Me.TablaImportar.Item(ImpEf.Index, i).Value > 2000 Then

    '            hacer = False
    '        Else
    '            hacer = True
    '        End If
    '        Return hacer
    '    End Function
    '    Private Sub Cargar_valores_contables()
    '        If Me.TablaImportar.Rows.Count >= 1 Then
    '            Dim frm As New BarraProcesovb
    '            frm.Show()
    '            frm.Text = "Calculando Importes Gravados, Exentos e IVA's por favor espere..."
    '            frm.Barra.Minimum = 0
    '            frm.Barra.Maximum = Me.TablaImportar.Rows.Count
    '            For i As Integer = 0 To Me.TablaImportar.Rows.Count - 1
    '                If Trim(Me.TablaImportar.Item(Tot.Index, i).Value) <> "P" Then
    '                    If Trim(Me.TablaImportar.Item(Mone.Index, i).Value.ToString) <> "USD" Then
    '                        If Me.TablaImportar.Item(Tot.Index, i).Value > 0 And Me.TablaImportar.Item(Tot.Index, i).Value <> Nothing Then
    '                            'importe gravado
    '                            Me.TablaImportar.Item(ImpG.Index, i).Value = Math.Round(IIf(IsDBNull(Me.TablaImportar.Item(CIVA.Index, i).Value) = True, 0, Me.TablaImportar.Item(CIVA.Index, i).Value / 0.16), 2)
    '                            'importe exento
    '                            Me.TablaImportar.Item(ImpEx.Index, i).Value = Math.Round(IIf(IsDBNull(Me.TablaImportar.Item(Subtotal.Index, i).Value) = True, 0, Me.TablaImportar.Item(Subtotal.Index, i).Value - Me.TablaImportar.Item(ImpG.Index, i).Value), 2)
    '                            'Iva_real
    '                            Me.TablaImportar.Item(IVAR.Index, i).Value = Math.Round(IIf(IsDBNull(Me.TablaImportar.Item(ImpG.Index, i).Value) = True, 0, Me.TablaImportar.Item(ImpG.Index, i).Value * 0.16), 2)
    '                            'calcula el % Pago Acumulado
    '                            If Me.TablaImportar.Item(ImpEx.Index, i).Value < 1 Then
    '                                Me.TablaImportar.Item(ImpG.Index, i).Value = Me.TablaImportar.Item(ImpG.Index, i).Value + Me.TablaImportar.Item(ImpEx.Index, i).Value
    '                                Me.TablaImportar.Item(ImpEx.Index, i).Value = 0
    '                            End If
    '                            'Total real
    '                            Me.TablaImportar.Item(TReal.Index, i).Value = Me.TablaImportar.Item(ImpG.Index, i).Value + Me.TablaImportar.Item(ImpEx.Index, i).Value + Me.TablaImportar.Item(IVAR.Index, i).Value
    '                        End If
    '                    Else
    '                        ' calcular en dolares
    '                        If Me.TablaImportar.Item(Tot.Index, i).Value > 0 And Me.TablaImportar.Item(Tot.Index, i).Value <> Nothing Then

    '                            If Calcula_Moneda(Me.TablaImportar.Item(Fecha_Emi.Index, i).Value.ToString.Substring(0, 10)) = 0 Then
    '                                Me.TablaImportar.Rows(i).DefaultCellStyle.BackColor = Color.Red
    '                            End If
    '                            'importe gravado
    '                            Me.TablaImportar.Item(ImpG.Index, i).Value = Math.Round(IIf(IsDBNull(Me.TablaImportar.Item(CIVA.Index, i).Value) = True, 0, (Me.TablaImportar.Item(CIVA.Index, i).Value * Calcula_Moneda(Me.TablaImportar.Item(Fecha_Emi.Index, i).Value.ToString.Substring(0, 10))) / 0.16), 2)
    '                            'importe exento
    '                            Me.TablaImportar.Item(ImpEx.Index, i).Value = Math.Round(IIf(IsDBNull(Me.TablaImportar.Item(Subtotal.Index, i).Value) = True, 0, (Me.TablaImportar.Item(Subtotal.Index, i).Value * Calcula_Moneda(Me.TablaImportar.Item(Fecha_Emi.Index, i).Value.ToString.Substring(0, 10))) - Me.TablaImportar.Item(ImpG.Index, i).Value), 2)
    '                            'Iva_real
    '                            Me.TablaImportar.Item(IVAR.Index, i).Value = Math.Round(IIf(IsDBNull(Me.TablaImportar.Item(ImpG.Index, i).Value) = True, 0, Me.TablaImportar.Item(ImpG.Index, i).Value * 0.16), 2)
    '                            'calcula el % Pago Acumulado
    '                            'Total real
    '                            If Me.TablaImportar.Item(ImpEx.Index, i).Value < 1 Then
    '                                Me.TablaImportar.Item(ImpG.Index, i).Value = Me.TablaImportar.Item(ImpG.Index, i).Value + Me.TablaImportar.Item(ImpEx.Index, i).Value
    '                                Me.TablaImportar.Item(ImpEx.Index, i).Value = 0
    '                            End If
    '                            Me.TablaImportar.Item(TReal.Index, i).Value = Me.TablaImportar.Item(ImpG.Index, i).Value + Me.TablaImportar.Item(ImpEx.Index, i).Value + Me.TablaImportar.Item(IVAR.Index, i).Value
    '                        End If

    '                    End If
    '                End If
    '                frm.Barra.value = i
    '            Next
    '            frm.Close()
    '        End If
    '    End Sub
    '    'Eventos control de las polizas
    '    Private Sub Codificar_polizas(ByVal posicion As Integer)
    '        Dim poliza_Sistema As String = ""
    '        '  If Me.TablaImportar.Item(Psistema.Index, posicion).Value <> "" Then ' quitar linea despues del desbloqueo
    '        poliza_Sistema = Calcula_poliza(posicion)
    '        '  End If

    '        'Calcular consecutivo poliza
    '        Dim posi As Integer = InStr(1, poliza_Sistema, "-", CompareMethod.Binary)
    '        Dim cuantos As Integer = Len(poliza_Sistema) - Len(poliza_Sistema.Substring(0, posi))
    '        Dim consecutivo As Integer = Val(poliza_Sistema.Substring(posi, cuantos))
    '        'Crear poliza
    '        'Checar dia de la Poliza poner if
    '        Dim dia As String = ""
    '        If Me.TablaImportar.Item(ImpT.Index, posicion).Value > 0 Then
    '            dia = Me.TablaImportar.Item(Fechat.Index, posicion).Value.ToString.Substring(0, 2)
    '        ElseIf Me.TablaImportar.Item(ImpEf.Index, posicion).Value > 0 Then
    '            dia = Me.TablaImportar.Item(Fecha_Emi.Index, posicion).Value.ToString.Substring(0, 2)
    '        ElseIf Me.TablaImportar.Item(ImpC.Index, posicion).Value > 0 Then
    '            dia = Me.TablaImportar.Item(FechaC.Index, posicion).Value.ToString.Substring(0, 2)
    '        Else
    '            dia = Me.TablaImportar.Item(Fecha_Emi.Index, posicion).Value.ToString.Substring(0, 2)
    '        End If

    '        ' CREAR iF para calcular el dia
    '        If Creapoliza(poliza_Sistema, Me.TablaImportar.Item(anio.Index, posicion).Value, Me.TablaImportar.Item(Mes.Index, posicion).Value, dia,
    '                   consecutivo, Checa_tipo(Me.TablaImportar.Item(TipoPoliza.Index, posicion).Value, Me.lstCliente.SelectItem),
    '                   Me.TablaImportar.Item(Fecha_Emi.Index, posicion).Value, Leyenda(Trim(Me.TablaImportar.Item(ContabilizacionC.Index, posicion).Value)) & " " & Trim(Me.TablaImportar.Item(UUI.Index, posicion).Value), "Carga", Me.TablaImportar.Item(NumPol.Index, posicion).Value, Me.TablaImportar.Item(Id_Xml.Index, posicion).Value, False) = True Then



    '            If Buscafactura(Me.TablaImportar.Item(UUI.Index, posicion).Value, "C") = True Then
    '                'Se inserta la Factura
    '                Inserta_Comprobante_Fiscal(poliza_Sistema, Me.TablaImportar.Item(anio.Index, posicion).Value, Me.TablaImportar.Item(Mes.Index, posicion).Value,
    '                             Me.TablaImportar.Item(RFCE.Index, posicion).Value, Me.TablaImportar.Item(Fecha_Emi.Index, posicion).Value,
    '                               Me.TablaImportar.Item(UUI.Index, posicion).Value, "Factura " & Trim(Me.TablaImportar.Item(RFCE.Index, posicion).Value) & " C", Me.TablaImportar.Item(TReal.Index, posicion).Value)
    '            Else
    '                'Se Edita la Factura
    '                Edita_Factura(Me.TablaImportar.Item(UUI.Index, posicion).Value, "C", poliza_Sistema)
    '            End If


    '            If Me.TablaImportar.Item(ImpEf.Index, posicion).Value > 0 Then
    '                ' Insertar registro contabiidad electronica efectivo
    '                Inserta_Comprobante_Fiscal_Efectivo(poliza_Sistema, Me.TablaImportar.Item(anio.Index, posicion).Value, Me.TablaImportar.Item(Mes.Index, posicion).Value,
    '                                Me.TablaImportar.Item(RFCE.Index, posicion).Value, Me.TablaImportar.Item(TipoPoliza.Index, posicion).Value.ToString.Substring(0, 3), Me.TablaImportar.Item(Fecha_Emi.Index, posicion).Value,
    '                              "", "", "", "", Me.TablaImportar.Item(ImpEf.Index, posicion).Value)
    '            End If
    '            If Trim(UCase(Me.lblce.Text)) = "TRUE" Then ' SE INSERTA CONTABILIDAD ELECTRONICA

    '                If Me.TablaImportar.Item(ImpT.Index, posicion).Value > 0 Then
    '                    ' Insertar registro contabiidad electronica Transferencia
    '                    Dim cadena As String = Me.TablaImportar.Item(BancoOrigen.Index, posicion).Value
    '                    Dim posil As Integer = InStr(1, cadena, "-", CompareMethod.Binary)
    '                    Dim BO As String = cadena.Substring(0, posil - 1)

    '                    cadena = Me.TablaImportar.Item(Bancodestino.Index, posicion).Value
    '                    posil = InStr(1, cadena, "-", CompareMethod.Binary)
    '                    Dim Bd As String = cadena.Substring(0, posil - 1)

    '                    Inserta_Comprobante_Fiscal_Transf(poliza_Sistema, Me.TablaImportar.Item(anio.Index, posicion).Value, Me.TablaImportar.Item(Mes.Index, posicion).Value,
    '                                    Me.TablaImportar.Item(RFCE.Index, posicion).Value, Me.TablaImportar.Item(TipoPoliza.Index, posicion).Value.ToString.Substring(0, 3), Me.TablaImportar.Item(Fechat.Index, posicion).Value,
    '                                  "", BO, Me.TablaImportar.Item(CuentaO.Index, posicion).Value, Me.TablaImportar.Item(UUI.Index, posicion).Value, Me.TablaImportar.Item(ImpT.Index, posicion).Value, Bd, Me.TablaImportar.Item(CtaBD.Index, posicion).Value)
    '                End If
    '                ' insertar 10 Transf
    '                If Me.TablaImportar.Item(ImpT2.Index, posicion).Value > 0 Then
    '                    ' Insertar registro contabiidad electronica Transferencia
    '                    Dim cadena As String = Me.TablaImportar.Item(BankOT2.Index, posicion).Value
    '                    Dim posil As Integer = InStr(1, cadena, "-", CompareMethod.Binary)
    '                    Dim BO As String = cadena.Substring(0, posil - 1)

    '                    cadena = Me.TablaImportar.Item(BankDT2.Index, posicion).Value
    '                    posil = InStr(1, cadena, "-", CompareMethod.Binary)
    '                    Dim Bd As String = cadena.Substring(0, posil - 1)

    '                    Inserta_Comprobante_Fiscal_Transf(poliza_Sistema, Me.TablaImportar.Item(anio.Index, posicion).Value, Me.TablaImportar.Item(Mes.Index, posicion).Value,
    '                                    Me.TablaImportar.Item(RFCE.Index, posicion).Value, Me.TablaImportar.Item(TipoPoliza.Index, posicion).Value.ToString.Substring(0, 3), Me.TablaImportar.Item(FT2.Index, posicion).Value,
    '                                  "", BO, Me.TablaImportar.Item(CtaOT2.Index, posicion).Value, Me.TablaImportar.Item(UUI.Index, posicion).Value, Me.TablaImportar.Item(ImpT2.Index, posicion).Value, Bd, Me.TablaImportar.Item(CtaDT2.Index, posicion).Value)
    '                End If

    '                If Me.TablaImportar.Item(ImpC.Index, posicion).Value > 0 Then
    '                    ' Insertar registro contabiidad electronica Cheque
    '                    Dim cadena As String = Me.TablaImportar.Item(BancosCheques.Index, posicion).Value
    '                    Dim posil As Integer = InStr(1, cadena, "-", CompareMethod.Binary)
    '                    Dim BO As String = cadena.Substring(0, posil - 1)

    '                    Inserta_Comprobante_Fiscal_Cheque(poliza_Sistema, Me.TablaImportar.Item(anio.Index, posicion).Value, Me.TablaImportar.Item(Mes.Index, posicion).Value,
    '                                    Me.TablaImportar.Item(RFCE.Index, posicion).Value, Me.TablaImportar.Item(TipoPoliza.Index, posicion).Value.ToString.Substring(0, 3), Me.TablaImportar.Item(FechaC.Index, posicion).Value,
    '                                  Me.TablaImportar.Item(NoCheque.Index, posicion).Value, BO, Me.TablaImportar.Item(CuentaC.Index, posicion).Value, Me.TablaImportar.Item(UUI.Index, posicion).Value, Me.TablaImportar.Item(ImpC.Index, posicion).Value)
    '                End If
    '            End If

    '            'Verificara el sistema las polizas automatizadas
    '            Crear_detalle(posicion, poliza_Sistema)
    '        End If
    '    End Sub
    '    Private Function Buscafactura(ByVal Folio_Fiscal As String, ByVal detaclle As String)
    '        Dim hacer As Boolean
    '        Dim sql As String = "select * from Facturas where Folio_Fiscal = '" & Folio_Fiscal & "' and Detalle_Comp_Electronico ='" & detaclle & "'"
    '        Dim ds As DataSet = Eventos.Obtener_DS(sql)
    '        If ds.Tables(0).Rows.Count > 0 Then
    '            hacer = False
    '        Else
    '            hacer = True
    '        End If
    '        Return hacer
    '    End Function
    '    Private Function Creapoliza(ByVal id_poliza As String, ByVal anio As Integer, ByVal mes As String, ByVal dia As String,
    '                         ByVal consecutivo As Integer, ByVal tipo As Integer, ByVal fecha As String,
    '                         ByVal concepto As String, ByVal movimiento As String, ByVal num_pol As Integer, ByVal registro As Integer, Optional ByVal comple As Boolean = False)
    '        Dim hacer As Boolean
    '        Dim sql As String = ""
    '        sql &= "         INSERT INTO dbo.Polizas"
    '        sql &= "("
    '        sql &= " 	ID_poliza,      "
    '        sql &= "     ID_anio,        "
    '        sql &= "     ID_mes,        "
    '        sql &= "     ID_dia,        "
    '        sql &= "     consecutivo,    "
    '        sql &= "     Num_Pol,    "
    '        sql &= "     Id_Tipo_Pol_Sat,"
    '        sql &= "     Fecha,          "
    '        sql &= "     Concepto,      "
    '        sql &= "     Id_Empresa,     "
    '        sql &= "     No_Mov,        "
    '        sql &= "     Fecha_captura,  "
    '        sql &= "     Movto,         "
    '        sql &= "     Usuario,Aplicar_Poliza         "
    '        sql &= " 	)               "
    '        sql &= " VALUES              "
    '        sql &= " 	(               "
    '        sql &= " 	'" & id_poliza & "'," '@id_poliza,         
    '        sql &= " 	" & anio & "," '@id_anio,           
    '        sql &= " 	'" & mes & "'," '@id_mes,     
    '        sql &= " 	'" & dia & "'," '@id_dia,     
    '        sql &= " 	" & consecutivo & "," '@consecutivo,   
    '        sql &= " 	" & num_pol & "," '@num_pol,  
    '        sql &= " 	" & tipo & "," '@id_tipo_poliza, 
    '        sql &= " 	" & Eventos.Sql_hoy(fecha) & "," '@fecha,             
    '        sql &= " 	'" & concepto & "'," '@concepto,          
    '        sql &= " 	" & Me.lstCliente.SelectItem & "," '@Id_Empresa,        
    '        sql &= " 	'" & movimiento & "'," '@no_mov,            
    '        sql &= " 	" & Eventos.Sql_hoy("" & dia & "/" & mes & "/" & anio & "") & "," '@fecha_captura,     
    '        sql &= " 	'A'," '@movto,             
    '        sql &= "  '" & Eventos.Usuario(My.Forms.Inicio.LblUsuario.Text) & "', 1" '@usuario            
    '        sql &= " 	) "

    '        If Eventos.Comando_sql(sql) > 0 Then
    '            hacer = True
    '            Eventos.Insertar_usuariol("InsertarPolizCp", sql)
    '            If comple = True Then
    '                Actualiza_RegistroC(id_poliza, registro)
    '                Dim iD As String = "SELECT Xml_Sat.Id_Registro_Xml  FROM Xml_Sat WHERE Id_Empresa = " & Me.lstCliente.SelectItem & " AND UUID = (SELECT IdDocumento FROM Xml_Complemento WHERE Id_Xml_Complemento = " & registro & ")"
    '                Dim DS As DataSet = Eventos.Obtener_DS(iD)
    '                If DS.Tables(0).Rows.Count > 0 Then
    '                    Eventos.Actualiza_Factura(DS.Tables(0).Rows(0)(0))
    '                End If
    '            Else
    '                Actualiza_Registro(id_poliza, registro)
    '            End If
    '        Else
    '            hacer = False
    '        End If
    '        Return hacer
    '    End Function
    '    Private Sub Crea_detalle_poliza(ByVal id_poliza As String, ByVal item As Integer, ByVal cargo As Decimal,
    '                                       ByVal Abono As Decimal, ByVal cuenta As String, ByVal cheque As String)
    '        Dim sql As String = ""
    '        sql &= "         INSERT INTO dbo.Detalle_Polizas"
    '        sql &= "(   "
    '        sql &= " ID_poliza,      "
    '        sql &= " ID_item,       "
    '        sql &= " Cargo,          "
    '        sql &= " Abono,         "
    '        sql &= " Fecha_captura,  "
    '        sql &= " Movto,"
    '        sql &= " Cuenta, "
    '        sql &= " No_cheque  "
    '        sql &= " ) "
    '        sql &= " VALUES "
    '        sql &= "( "
    '        sql &= " '" & id_poliza & "'	," '@id_poliza,     
    '        sql &= "" & item & "," '@id_item,       
    '        sql &= "" & cargo & "," '@cargo,         
    '        sql &= "" & Abono & "," '@abono,         
    '        sql &= "" & Eventos.Sql_hoy() & "," '@fecha_captura, 
    '        sql &= " 'A'	," '@movto,         
    '        sql &= " " & cuenta & "	," '@cuenta,        
    '        sql &= " '" & cheque & "'" '@no_cheque      
    '        sql &= " 	)"
    '        If Eventos.Comando_sql(sql) > 0 Then
    '            Eventos.Insertar_usuariol("InsertarPolizD", sql)
    '        End If
    '    End Sub
    '    Private Sub Inserta_Comprobante_Fiscal_Cheque(ByVal id_poliza As String, ByVal anio As Integer, ByVal mes As String,
    '                           ByVal Rfc_Emisor As String, ByVal tipo As String, ByVal fecha As String,
    '                           ByVal No_cheque As String, ByVal no_banco As String, ByVal cuenta_origen As String, ByVal Referencia As String, ByVal Importe As Decimal)
    '        Dim sql As String = "  INSERT INTO dbo.Conta_E_Sistema
    '	(
    '    anio,    mes,    tipo,      RFC_Ce,
    '    No_Cheque,    No_Banco,    Cuenta_Origen,    Fecha_Mov,    Importe,
    '    ID_poliza,    Tipo_CE	) VALUES	("

    '        sql &= " '" & anio & "',	" '@id_anio,                   
    '        sql &= " '" & mes & "'," '@id_mes,     
    '        sql &= " '" & tipo & "'," '@tipo    

    '        sql &= " '" & Rfc_Emisor & "'," '@rfc_ce,                
    '        sql &= " '" & No_cheque & "'," '@no_cheque,  
    '        sql &= " '" & no_banco & "'," '@no_banco,  
    '        sql &= " '" & cuenta_origen & "'," '@cuenta_origen,  
    '        sql &= " " & Eventos.Sql_hoy(fecha) & "," '@fecha_mov,    
    '        sql &= " " & Importe & "	," '@importe,                    
    '        sql &= " '" & id_poliza & "', " '@id_poliza,  
    '        sql &= " 'H' " '@tipo_ce, 
    '        sql &= " )"
    '        If Eventos.Comando_sql(sql) > 0 Then
    '            Eventos.Insertar_usuariol("InsertarCeH", sql)
    '        End If
    '    End Sub
    '    Private Sub Inserta_Comprobante_Fiscal_Efectivo(ByVal id_poliza As String, ByVal anio As Integer, ByVal mes As String,
    '                           ByVal Rfc_Emisor As String, ByVal tipo As String, ByVal fecha As String,
    '                           ByVal No_cheque As String, ByVal no_banco As String, ByVal cuenta_origen As String, ByVal Referencia As String, ByVal Importe As Decimal)
    '        Dim sql As String = "  INSERT INTO dbo.Conta_E_Sistema
    '	(     anio,    mes,    tipo,       RFC_Ce,
    '    No_Cheque,    No_Banco,    Cuenta_Origen,    Fecha_Mov,    Importe,
    '    ID_poliza,    Tipo_CE	) VALUES	("

    '        sql &= " '" & anio & "',	" '@id_anio,                   
    '        sql &= " '" & mes & "'," '@id_mes,     
    '        sql &= " '" & tipo & "'," '@tipo    

    '        sql &= " '" & Rfc_Emisor & "'," '@rfc_ce,                
    '        sql &= " '" & No_cheque & "'," '@no_cheque,  
    '        sql &= " '" & no_banco & "'," '@no_banco,  
    '        sql &= " '" & cuenta_origen & "'," '@cuenta_origen,  
    '        sql &= " " & Eventos.Sql_hoy(fecha) & "," '@fecha_mov,    
    '        sql &= " " & Importe & "	," '@importe,                    
    '        sql &= " '" & id_poliza & "', " '@id_poliza,  
    '        sql &= " 'P' " '@tipo_ce, 
    '        sql &= " )"
    '        If Eventos.Comando_sql(sql) > 0 Then
    '            Eventos.Insertar_usuariol("InsertarCeE", sql)
    '        End If
    '    End Sub
    '    Private Sub Inserta_Comprobante_Fiscal_Transf(ByVal id_poliza As String, ByVal anio As Integer, ByVal mes As String,
    '                           ByVal Rfc_Emisor As String, ByVal tipo As String, ByVal fecha As String,
    '                           ByVal No_cheque As String, ByVal no_banco As String, ByVal cuenta_origen As String, ByVal Referencia As String, ByVal Importe As Decimal, ByVal bancoD As String, ByVal cuentaD As String)
    '        Dim sql As String = "  INSERT INTO dbo.Conta_E_Sistema
    '	(
    '    anio,    mes,    tipo,       RFC_Ce,
    '    No_Cheque,    No_Banco,    Cuenta_Origen,    Fecha_Mov,    Importe,
    '    ID_poliza,    Tipo_CE,Banco_Destino,Cuenta_Destino	) VALUES	("

    '        sql &= " '" & anio & "',	" '@id_anio,                   
    '        sql &= " '" & mes & "'," '@id_mes,     
    '        sql &= " '" & tipo & "'," '@tipo    

    '        sql &= " '" & Rfc_Emisor & "'," '@rfc_ce,                
    '        sql &= " '" & No_cheque & "'," '@no_cheque,  
    '        sql &= " '" & no_banco & "'," '@no_banco,  
    '        sql &= " '" & cuenta_origen & "'," '@cuenta_origen,  
    '        sql &= " " & Eventos.Sql_hoy(fecha) & "," '@fecha_mov,    
    '        sql &= " " & Importe & "	," '@importe,                    
    '        sql &= " '" & id_poliza & "', " '@id_poliza,  
    '        sql &= " 'T','" & Trim(bancoD) & "', '" & Trim(cuentaD.Replace("/", "")) & "' " '@tipo_ce, 
    '        sql &= " )"
    '        If Eventos.Comando_sql(sql) > 0 Then
    '            Eventos.Insertar_usuariol("InsertarCeT", sql)
    '        End If
    '    End Sub
    '    Private Sub Inserta_Comprobante_Fiscal(ByVal id_poliza As String, ByVal anio As Integer, ByVal mes As String,
    '                           ByVal Rfc_Emisor As String, ByVal fecha As String,
    '                           ByVal Folio_Fiscal As String, ByVal Referencia As String, ByVal Importe As Decimal)
    '        Dim sql As String = "INSERT INTO dbo.Facturas"
    '        sql &= " 	(                   "
    '        sql &= " 	ID_anio,                    "
    '        sql &= " 	ID_mes,                     "
    '        sql &= " 	ID_poliza,                  "
    '        sql &= " 	RFC_Emisor,                 "
    '        sql &= " 	Folio_Fiscal,               "
    '        sql &= " 	Referencia,                 "
    '        sql &= " 	Importe,                "
    '        sql &= " 	Fecha_Comprobante,          "
    '        sql &= " 	Detalle_Comp_Electronico,Id_Empresa"
    '        sql &= "    )                         "
    '        sql &= " VALUES "
    '        sql &= "(                             "
    '        sql &= " '" & anio & "',	" '@id_anio,                   
    '        sql &= " '" & mes & "'," '@id_mes,                    
    '        sql &= " '" & id_poliza & "'," '@id_poliza,                 
    '        sql &= " '" & Rfc_Emisor & "'," '@rfc_emisor,                
    '        sql &= " '" & Folio_Fiscal & "'," '@folio_fiscal,              
    '        sql &= " '" & Referencia & "'," '@referencia,                
    '        sql &= " " & Importe & "	," '@importe,                   
    '        sql &= " " & Eventos.Sql_hoy(fecha) & "," '@fecha_comprobante,         
    '        sql &= " 'C'," & Me.lstCliente.SelectItem & "" '@detalle_comp_electronico   
    '        sql &= " )"
    '        If Eventos.Comando_sql(sql) > 0 Then
    '            Eventos.Insertar_usuariol("InsertarFacturas", sql)

    '        End If
    '    End Sub
    '    Private Sub Edita_Factura(ByVal Folio_Fiscal As String, ByVal detaclle As String, ByVal Poliza As String)
    '        Dim sql As String = " UPDATE dbo.Facturas
    '                        SET ID_poliza = '" & Poliza & "'
    '                        WHERE Folio_Fiscal = '" & Folio_Fiscal & "' and Detalle_Comp_Electronico ='" & detaclle & "' "
    '        If Eventos.Comando_sql(sql) > 0 Then
    '            Eventos.Insertar_usuariol("EditaFacturas", sql)

    '        End If
    '    End Sub
    '    Private Function Calcula_poliza(ByVal i As Integer)
    '        Dim mess As String = IIf(Len(Me.TablaImportar.Item(Mes.Index, i).Value) = 1, "0" & Me.TablaImportar.Item(Mes.Index, i).Value, Me.TablaImportar.Item(Mes.Index, i).Value)
    '        Dim poliza As String = Eventos.Num_polizaS(Me.lstCliente.SelectItem, Checa_tipo(Me.TablaImportar.Item(TipoPoliza.Index, i).Value, Me.lstCliente.SelectItem), Me.TablaImportar.Item(anio.Index, i).Value, mess, Busca_tipificar(Me.TablaImportar.Item(TipoPoliza.Index, i).Value))
    '        Me.TablaImportar.Item(Psistema.Index, i).Value = poliza
    '        Return poliza
    '    End Function
    '    Private Function Calcula_polizaD(ByVal i As Integer)
    '        Dim mess As String = IIf(Len(Me.TablaD.Item(MesCD.Index, i).Value) = 1, "0" & Me.TablaD.Item(MesCD.Index, i).Value, Me.TablaD.Item(MesCD.Index, i).Value)
    '        Dim poliza As String = Eventos.Num_polizaS(Me.lstCliente.SelectItem, Checa_tipo(Me.TablaD.Item(TipPolD.Index, i).Value, Me.lstCliente.SelectItem), Me.TablaD.Item(AnioCD.Index, i).Value, mess, Busca_tipificar(Me.TablaD.Item(TipPolD.Index, i).Value))
    '        Me.TablaD.Item(PolSD.Index, i).Value = poliza
    '        Return poliza
    '    End Function
    '    Private Function Calcula_polizaC(ByVal i As Integer)
    '        Dim mess As String = IIf(Len(Me.TablaC.Item(MesComplemento.Index, i).Value) = 1, "0" & Me.TablaC.Item(MesComplemento.Index, i).Value, Me.TablaC.Item(MesComplemento.Index, i).Value)
    '        Dim poliza As String = Eventos.Num_polizaS(Me.lstCliente.SelectItem, Checa_tipo(Me.TablaC.Item(TipPolComplemento.Index, i).Value, Me.lstCliente.SelectItem), Me.TablaC.Item(AnioComplemento.Index, i).Value, mess, Busca_tipificar(Me.TablaC.Item(TipPolComplemento.Index, i).Value))
    '        Me.TablaC.Item(PolSD.Index, i).Value = poliza
    '        Return poliza
    '    End Function
    '    Private Function Checa_tipo(ByVal tipo As String, ByVal cliente As Integer)
    '        Dim clave As String = ""
    '        Dim sql As String = "SELECT Id_Tipo_Pol_Sat FROM Tipos_Poliza_Sat WHERE Id_Empresa= " & cliente & " AND clave = '" & tipo.Substring(0, 3) & "'"
    '        Dim ds As DataSet = Eventos.Obtener_DS(sql)
    '        If ds.Tables(0).Rows.Count > 0 Then
    '            clave = ds.Tables(0).Rows(0)("Id_Tipo_Pol_Sat")
    '        Else
    '            clave = 0
    '        End If
    '        Return clave
    '    End Function
    '    Private Function Busca_tipificar(ByVal tipos As String)
    '        Dim tipo As String = ""
    '        Dim sql As String = " SELECT Id_Tipo_Pol_Sat FROM Tipos_Poliza_Sat WHERE Id_Empresa= " & Me.lstCliente.SelectItem & " AND clave = '" & tipos.Substring(0, 3) & "' "
    '        Dim ds As DataSet = Eventos.Obtener_DS(sql)
    '        If ds.Tables(0).Rows.Count > 0 Then
    '            tipo = ds.Tables(0).Rows(0)(0)
    '        Else
    '            tipo = "N/A"
    '        End If
    '        Return tipo
    '    End Function

    '    Private Sub Guardar_Carga()
    '        If Me.TablaImportar.Rows.Count >= 1 Then
    '            For i As Integer = 0 To Me.TablaImportar.Rows.Count - 1
    '                Dim tabla As String = ""
    '                If Me.TablaImportar.Item(2, i).Value = "P" Then
    '                    tabla = "Xml_Complemento"
    '                Else
    '                    tabla = "Xml_Sat"
    '                End If
    '                Guardar_XML(IIf(IsDBNull(Me.TablaImportar.Item(LetraS.Index, i).Value), "", Me.TablaImportar.Item(LetraS.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(NCuenta.Index, i).Value), "", Me.TablaImportar.Item(NCuenta.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(ContabilizacionC.Index, i).Value), "", Me.TablaImportar.Item(ContabilizacionC.Index, i).Value),
    '                           Me.TablaImportar.Item(anio.Index, i).Value, Me.TablaImportar.Item(Mes.Index, i).Value, Me.TablaImportar.Item(ImpEf.Index, i).Value, IIf(IsDBNull(Me.TablaImportar.Item(CuentasEfectivo.Index, i).Value), "", Me.TablaImportar.Item(CuentasEfectivo.Index, i).Value),
    '                           Me.TablaImportar.Item(ImpT.Index, i).Value, IIf(IsDBNull(Me.TablaImportar.Item(BancoOrigen.Index, i).Value), "", Me.TablaImportar.Item(BancoOrigen.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(CuentaO.Index, i).Value), "", Me.TablaImportar.Item(CuentaO.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(Bancodestino.Index, i).Value), "", Me.TablaImportar.Item(Bancodestino.Index, i).Value),
    '                           IIf(IsDBNull(Me.TablaImportar.Item(Fechat.Index, i).Value), "", Me.TablaImportar.Item(Fechat.Index, i).Value), Me.TablaImportar.Item(ImpC.Index, i).Value, IIf(IsDBNull(Me.TablaImportar.Item(BancosCheques.Index, i).Value), "", Me.TablaImportar.Item(BancosCheques.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(CuentaC.Index, i).Value), "", Me.TablaImportar.Item(CuentaC.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(NoCheque.Index, i).Value), "", Me.TablaImportar.Item(NoCheque.Index, i).Value),
    '                          IIf(IsDBNull(Me.TablaImportar.Item(FechaC.Index, i).Value), "", Me.TablaImportar.Item(FechaC.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(CuentaBancos.Index, i).Value), "", Me.TablaImportar.Item(CuentaBancos.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(ProvA.Index, i).Value), 0, Me.TablaImportar.Item(ProvA.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(ProvP.Index, i).Value), 0, Me.TablaImportar.Item(ProvP.Index, i).Value),
    '                           IIf(IsDBNull(Me.TablaImportar.Item(Dif.Index, i).Value), 0, Me.TablaImportar.Item(Dif.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(TipoPoliza.Index, i).Value), "", Me.TablaImportar.Item(TipoPoliza.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(ImpG.Index, i).Value), 0, Me.TablaImportar.Item(ImpG.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(ImpEx.Index, i).Value), 0, Me.TablaImportar.Item(ImpEx.Index, i).Value),
    '                          IIf(IsDBNull(Me.TablaImportar.Item(IVAR.Index, i).Value), 0, Me.TablaImportar.Item(IVAR.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(PagoA.Index, i).Value), 0, Me.TablaImportar.Item(PagoA.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(TReal.Index, i).Value), 0, Me.TablaImportar.Item(TReal.Index, i).Value), Me.TablaImportar.Item(UCambaria.Index, i).Value, IIf(IsDBNull(Me.TablaImportar.Item(PCambiaria.Index, i).Value), 0, Me.TablaImportar.Item(PCambiaria.Index, i).Value),
    '                           Me.TablaImportar.Item(ImpD.Index, i).Value, IIf(IsDBNull(Me.TablaImportar.Item(CuntaDev.Index, i).Value), "", Me.TablaImportar.Item(CuntaDev.Index, i).Value), Me.TablaImportar.Item(Id_Xml.Index, i).Value, IIf(IsDBNull(Me.TablaImportar.Item(NumPol.Index, i).Value), "", Me.TablaImportar.Item(NumPol.Index, i).Value),
    '                           Me.TablaImportar.Item(RISR.Index, i).Value, Me.TablaImportar.Item(RIVA.Index, i).Value, tabla, IIf(IsDBNull(Me.TablaImportar.Item(CtaBD.Index, i).Value), "", Me.TablaImportar.Item(CtaBD.Index, i).Value),
    '                           IIf(IsDBNull(Me.TablaImportar.Item(Ajus.Index, i).Value), 0, Me.TablaImportar.Item(Ajus.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(CtaAjustes.Index, i).Value), "", Me.TablaImportar.Item(CtaAjustes.Index, i).Value),
    '                           IIf(IsDBNull(Me.TablaImportar.Item(Anti.Index, i).Value), 0, Me.TablaImportar.Item(Anti.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(CtaAnti.Index, i).Value), "", Me.TablaImportar.Item(CtaAnti.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(ImpProvis.Index, i).Value), 0, Me.TablaImportar.Item(ImpProvis.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(CtaOrden.Index, i).Value), "", Me.TablaImportar.Item(CtaOrden.Index, i).Value),
    '                                IIf(IsDBNull(Me.TablaImportar.Item(ImpT2.Index, i).Value), 0, Me.TablaImportar.Item(ImpT2.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(BankOT2.Index, i).Value), "", Me.TablaImportar.Item(BankOT2.Index, i).Value),
    '                    IIf(IsDBNull(Me.TablaImportar.Item(CtaOT2.Index, i).Value), "", Me.TablaImportar.Item(CtaOT2.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(BankDT2.Index, i).Value), "", Me.TablaImportar.Item(BankDT2.Index, i).Value),
    '                    IIf(IsDBNull(Me.TablaImportar.Item(CtaDT2.Index, i).Value), "", Me.TablaImportar.Item(CtaDT2.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(FT2.Index, i).Value), "", Me.TablaImportar.Item(FT2.Index, i).Value),
    '                    IIf(IsDBNull(Me.TablaImportar.Item(CtaT2.Index, i).Value), "", Me.TablaImportar.Item(CtaT2.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(CtaProv.Index, i).Value), "", Me.TablaImportar.Item(CtaProv.Index, i).Value),
    '                    IIf(IsDBNull(Me.TablaImportar.Item(Ser.Index, i).Value), "", Me.TablaImportar.Item(Ser.Index, i).Value),
    'IIf(IsDBNull(Me.TablaImportar.Item(BancoDE.Index, i).Value), "", Me.TablaImportar.Item(BancoDE.Index, i).Value),
    'IIf(IsDBNull(Me.TablaImportar.Item(CtaDestinoChe.Index, i).Value), "", Me.TablaImportar.Item(CtaDestinoChe.Index, i).Value),
    'IIf(IsDBNull(Me.TablaImportar.Item(CtaCheque.Index, i).Value), "", Me.TablaImportar.Item(CtaCheque.Index, i).Value))


    '            Next
    '            MessageBox.Show("Proceso Guardado Completado ...", Eventos.titulo_app, MessageBoxButtons.OK, MessageBoxIcon.Information)
    '        End If
    '    End Sub
    '    Private Sub Guardar_XML(ByVal Letra_Sat As String, ByVal Nombre_cuenta As String, ByVal Clave As String,
    '                            ByVal Anio_Contable As String, ByVal Mes_Contable As String, ByVal Imp_Efectivo As Decimal, ByVal Cuenta_Efectivo As String,
    '                            ByVal Imp_Transf As Decimal, ByVal Banco_Origen As String, ByVal Cuenta_Origen As String, ByVal Banco_Destino As String,
    '                            ByVal Fecha_Transaccion As String, ByVal Imp_Cheque As Decimal, ByVal Nom_Banco_Ch As String, ByVal Cuenta_Origen_Ch As String, ByVal No_Cheque As String,
    '                            ByVal Fecha_Ch As String, ByVal Cuenta_Bancos As String, ByVal Provision_Acreedor As Decimal, ByVal Provision_Proveedor As Decimal,
    '                            ByVal Diferencia As Decimal, ByVal Tipo_Poliza As String, ByVal Imp_Grabado As Decimal, ByVal Imp_Exento As Decimal,
    '                            ByVal IVA_real As Decimal, ByVal Prc_Pago_Acumulado As Decimal, ByVal Total_Real As Decimal, ByVal Utilidad_Cambiaria As Decimal, ByVal Perdida_Cambiaria As Decimal,
    '                            ByVal Imp_Devolucion As Decimal, ByVal Cuenta_Devolucion As String, ByVal Id_Registro_Xml As Integer, ByVal numpol As String, ByVal risr As Decimal, ByVal riva As Decimal,
    '                            ByVal Tabla As String, ByVal ctadestino As String, ByVal ajus As Decimal, ByVal ctaajus As String, ByVal anti As Decimal, ByVal ctaanti As String, ByVal ImpProvis As Decimal,
    '                            ByVal Cta_Orden As String, ByVal Imp_Transf1 As Decimal, ByVal Banco_Origen1 As String, ByVal Cuenta_Origen1 As String, ByVal Banco_Destino1 As String,
    '                            ByVal Cuenta_Destino1 As String, ByVal Fecha_Transaccion1 As String, ByVal Cuenta_Bancos1 As String, ByVal provi As String, ByVal ser As String,
    '                            ByVal Banco_Dest_Cheque As String, ByVal Cuenta_Dest_Cheque As String, ByVal Cuenta_Cheques As String)
    '        Dim sql As String = "UPDATE dbo." & Tabla & "
    '                SET 		Letra_Sat = '" & Letra_Sat & "',
    '                	Nombre_cuenta = '" & Nombre_cuenta & "',
    '                	Clave = '" & Clave & "',
    '                	Anio_Contable = '" & Anio_Contable & "',
    '                	Mes_Contable = '" & Mes_Contable & "',
    '                	Imp_Efectivo = " & Imp_Efectivo & ",
    '                	Cuenta_Efectivo = '" & Cuenta_Efectivo & "',
    '                	Imp_Transf = " & Imp_Transf & ",
    '                	Banco_Origen = '" & Banco_Origen & "',
    '                	Cuenta_Origen = '" & Cuenta_Origen & "',
    '                	Banco_Destino = '" & Banco_Destino & "',
    '                	Fecha_Transaccion = " & Eventos.Sql_hoy(Fecha_Transaccion) & ",
    '                	Imp_Cheque =" & Imp_Cheque & ",
    '                	Nom_Banco_Ch = '" & Nom_Banco_Ch & "',
    '                	Cuenta_Origen_Ch = '" & Cuenta_Origen_Ch & "',
    '                	No_Cheque = '" & No_Cheque & "',
    '                	Fecha_Ch = " & Eventos.Sql_hoy(Fecha_Ch) & ",
    '                	Cuenta_Bancos = '" & Cuenta_Bancos & "',
    '                	Provision_Acreedor = " & Provision_Acreedor & ",
    '                	Provision_Proveedor = " & Provision_Proveedor & ",
    '                	Diferencia = " & Diferencia & ",
    '                	Tipo_Poliza = '" & Tipo_Poliza & "',
    '                	Imp_Grabado =  " & Imp_Grabado & ",
    '                	Imp_Exento =  " & Imp_Exento & ",
    '                	IVA_real =  " & IVA_real & ",
    '                	Prc_Pago_Acumulado =  " & Prc_Pago_Acumulado & ",
    '                	Total_Real =  " & Total_Real & ",
    '                	Utilidad_Cambiaria =  " & Utilidad_Cambiaria & ",
    '                	Perdida_Cambiaria =  " & Perdida_Cambiaria & ",
    '                	Imp_Devolucion =  " & Imp_Devolucion & ",
    '                	Cuenta_Devolucion = '" & Cuenta_Devolucion & "', 
    '                    Numpol= '" & Trim(numpol) & "', 
    '                    RIRS= " & risr & ", 
    '                    RIVA= " & riva & ", 
    '                    Cuenta_Destino= '" & ctadestino & "',
    '                    Ajuste= " & ajus & ", 
    '                    Anticipos= " & anti & ",  
    '                    Cta_Ajuste= '" & ctaajus & "', 
    '                    Cta_Anticipos= '" & ctaanti & "',
    '                    Imp_Provision= " & ImpProvis & ",
    '                    Cta_Orden= '" & Cta_Orden & "',
    '                    Imp_Transf1 = " & Imp_Transf1 & " ,       
    '                    Banco_Origen1 = '" & Banco_Origen1 & "',	 
    '                    Cuenta_Origen1 = '" & Cuenta_Origen1 & "',	 
    '                    Banco_Destino1 = '" & Banco_Destino1 & "',
    '                    Cuenta_Destino1 = '" & Cuenta_Destino1 & "'	,	 
    '                    Fecha_Transaccion1 = '" & Fecha_Transaccion1 & "',	 
    '                    Cuenta_Bancos1  = '" & Cta_Orden & "',Cta_Provision='" & provi & "' ,Ser='" & ser & "',
    '                    Banco_Dest_Cheque = '" & Banco_Dest_Cheque & "',	 
    '                    Cuenta_Dest_Cheque  = '" & Cuenta_Dest_Cheque & "', Cuenta_Cheques='" & Cuenta_Cheques & "'
    '                WHERE Id_Registro_Xml = " & Id_Registro_Xml & ""
    '        If Eventos.Comando_sql(sql) > 0 Then
    '            Eventos.Insertar_usuariol("GuardaXMLC", sql)
    '        End If
    '    End Sub
    '    Private Sub CmdGuardar_Click(sender As Object, e As EventArgs) Handles CmdGuardar.Click
    '        Guardar_Carga()
    '    End Sub

    '    Private Sub CrearCuentaCargoToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles CrearCuentaCargoToolStripMenuItem.Click
    '        'Crear Cuenta en catalogo del cliente para el Cargo
    '        If Me.TCEmitidas.SelectedIndex = 0 Then
    '            Dim leyenda As String = ""
    '            Dim dsconta As DataSet
    '            Dim columna As Integer = Me.TablaImportar.CurrentCell.ColumnIndex
    '            Dim Nombre As String
    '            Nombre = Me.TablaImportar.Columns.Item(Me.TablaImportar.CurrentCell.ColumnIndex).Name.ToString
    '            Me.LstTexto.Cargar(" Select '','' ")
    '            Dim consulta As String = "SELECT 'Serie/ '+  Rtrim(Series.Serie) + ' '+  Rtrim(Catalogo_de_Cuentas.Descripcion) + '-'+ convert(nvarchar,Catalogo_de_Cuentas.cuenta,103) as Cuenta, " +
    '                                "Catalogo_de_Cuentas.cuenta As cta FROM Catalogo_de_Cuentas  INNER JOIN Series On Series.Cuenta = Catalogo_de_Cuentas.Cuenta " +
    '                                "WHERE Nivel1 In('4010','4015') AND Nivel2 >0 AND Nivel3 = '0000'and Catalogo_de_Cuentas.Id_Empresa =  " & Me.lstCliente.SelectItem & " AND Clave in( 'I','IPC') " +
    '                                " ORDER BY cta"
    '            Select Case Nombre ' Cambiar Consulta por series

    '                Case "ContabilizacionC"

    '                    dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas WHERE Nivel1 >0 AND Nivel2 >0 AND Nivel3 = '0000' AND Clave = '" & Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value & "' and Id_Empresa = " & Me.lstCliente.SelectItem & " ORDER BY cta")
    '                    '  dsconta = Eventos.Obtener_DS(consulta)
    '                    leyenda = Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value
    '                Case "NCuenta"
    '                    dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas WHERE Nivel1 >0 AND Nivel2 >0 AND Nivel3 = '0000' AND Clave = '" & Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value & "' and Id_Empresa = " & Me.lstCliente.SelectItem & " ORDER BY cta")
    '                    'dsconta = Eventos.Obtener_DS(consulta)
    '                    leyenda = Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value
    '                Case "CuentasEfectivo"
    '                    dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1010' and Nivel2 > 0 ORDER BY cta")
    '                    leyenda = " Efectivo"
    '                Case "CuentaBancos"
    '                    dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1020' and Nivel2 > 0 ORDER BY cta")
    '                    leyenda = " Bancos"
    '                Case "CtaAjustes"
    '                    dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & "   ORDER BY cta")
    '                    leyenda = " Ajustes"
    '                Case "CtaAnti"
    '                    If Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value <> Nothing Then
    '                        If Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value = "C" Or Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value = "CPP" Then
    '                            dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1200' and Nivel2 > 0   ORDER BY cta")
    '                            leyenda = " Anticipos Proveedores"
    '                        ElseIf Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value = "GG" Or Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value = "GGPP" Then
    '                            dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1210' and Nivel2 > 0   ORDER BY cta")
    '                            leyenda = " Anticipos Acreedores"
    '                        End If
    '                    End If

    '            End Select
    '            Dim cuenta As String = ""
    '            Dim act(,) As String
    '            ReDim act(2, dsconta.Tables(0).Rows.Count + 1)
    '            For s As Integer = 0 To dsconta.Tables(0).Rows.Count - 1
    '                act(0, s) = dsconta.Tables(0).Rows(s)(0)
    '                Debug.Print(dsconta.Tables(0).Rows(s)(0))
    '                act(1, s) = "0"
    '            Next
    '            With My.Forms.DialogUnaSeleccion
    '                .limpiar()
    '                .Titulo = Eventos.titulo_app
    '                .Texto = "Selecciona la Cuenta Madre para " & leyenda & ":"
    '                .MinSeleccion = 1
    '                .MaxSeleccion = 1
    '                .elementos = act
    '                .ShowDialog()
    '                act = .elementos
    '                If .DialogResult = Windows.Forms.DialogResult.Cancel Then
    '                    Exit Sub
    '                End If
    '            End With

    '            Dim Letra As String = ""
    '            For s As Integer = 0 To act.GetLength(1)
    '                If act(1, s) = "1" Then
    '                    Letra = act(0, s)
    '                    Exit For
    '                End If
    '            Next
    '            Dim cadena As String = Trim(Letra)
    '            Dim posi As Integer = InStr(1, cadena, "-", CompareMethod.Binary)
    '            Dim cuantos As Integer = Len(cadena) - Len(cadena.Substring(0, posi))
    '            Letra = cadena.Substring(posi, cuantos)

    '            '    ' Se crea cuenta de tercer nivel
    '            If Verifica_existencia(Letra.ToString.Substring(0, 4), Letra.ToString.Substring(4, 4), Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value, Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value) = True Then
    '                cuenta = Val(ObtenerValorDB("Catalogo_de_cuentas", "CASE WHEN max (Nivel3 ) + 1 IS NULL THEN 1 WHEN max (Nivel3 ) + 1 IS NOT NULL THEN   max (Nivel3 ) + 1 END AS C ", "  Nivel1 =" & Letra.ToString.Substring(0, 4) & "  AND Nivel2 =" & Letra.ToString.Substring(4, 4) & " and Id_Empresa = " & Me.lstCliente.SelectItem & " ", True))
    '                cuenta = Format(cuenta).PadLeft(4, "0")
    '                Crear_cuenta(Letra.ToString.Substring(0, 4), Letra.ToString.Substring(4, 4), cuenta,
    '                                         "0000", Letra.Substring(0, 8) & cuenta & "0000", Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & " " & Me.TablaImportar.Item(NomEmisor.Index, Me.TablaImportar.CurrentRow.Index).Value,
    '                                        Me.lstCliente.SelectItem, Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value, Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value)
    '            Else
    '                MessageBox.Show("La cuenta ya existe ...", Eventos.titulo_app, MessageBoxButtons.OK, MessageBoxIcon.Warning)
    '            End If

    '            'End If
    '            Me.TablaImportar_CellEndEdit(Me.TablaImportar, Nothing)
    '        ElseIf Me.TCEmitidas.SelectedIndex = 1 Then
    '            Dim leyenda As String = ""
    '            Dim dsconta As DataSet
    '            Dim columna As Integer = Me.TablaD.CurrentCell.ColumnIndex
    '            Dim Nombre As String
    '            Nombre = Me.TablaD.Columns.Item(Me.TablaD.CurrentCell.ColumnIndex).Name.ToString
    '            Me.LstTexto.Cargar(" Select '','' ")
    '            Dim consulta As String = "SELECT 'Serie/ '+  Rtrim(Series.Serie) + ' '+  Rtrim(Catalogo_de_Cuentas.Descripcion) + '-'+ convert(nvarchar,Catalogo_de_Cuentas.cuenta,103) as Cuenta, " +
    '                                "Catalogo_de_Cuentas.cuenta As cta FROM Catalogo_de_Cuentas  INNER JOIN Series On Series.Cuenta = Catalogo_de_Cuentas.Cuenta " +
    '                                "WHERE Nivel1 In('4010','4015') AND Nivel2 >0 AND Nivel3 = '0000'and Catalogo_de_Cuentas.Id_Empresa =  " & Me.lstCliente.SelectItem & " AND Clave in( 'I','IPC') " +
    '                                " ORDER BY cta"
    '            Select Case Nombre
    '                Case "LetraCd"
    '                    ' dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas WHERE Nivel1 >0 AND Nivel2 >0 AND Nivel3 = '0000' AND Clave = '" & Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value & "' and Id_Empresa = " & Me.lstCliente.SelectItem & " ORDER BY cta")
    '                    leyenda = Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value
    '                    dsconta = Eventos.Obtener_DS(consulta)
    '                Case "NomCuentaD"
    '                    ' dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas WHERE Nivel1 >0 AND Nivel2 >0 AND Nivel3 = '0000' AND Clave = '" & Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value & "' and Id_Empresa = " & Me.lstCliente.SelectItem & " ORDER BY cta")
    '                    dsconta = Eventos.Obtener_DS(consulta)
    '                    leyenda = Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value
    '                Case "CtaEfD"
    '                    dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1010' and Nivel2 > 0  ORDER BY cta")
    '                    leyenda = " Efectivo"
    '                Case "CtaBancosD"
    '                    dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1020' and Nivel2 > 0 ORDER BY cta")
    '                    leyenda = " Bancos"
    '                Case "CtaAD"
    '                    dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & "   ORDER BY cta")
    '                    leyenda = " Ajustes"
    '                Case "CtaAntiD"
    '                    dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1070' and Nivel2 > 0   ORDER BY cta")
    '                    leyenda = " Anticipos"
    '            End Select
    '            Dim cuenta As String = ""
    '            Dim act(,) As String
    '            ReDim act(2, dsconta.Tables(0).Rows.Count + 1)
    '            For s As Integer = 0 To dsconta.Tables(0).Rows.Count - 1
    '                act(0, s) = dsconta.Tables(0).Rows(s)(0)
    '                Debug.Print(dsconta.Tables(0).Rows(s)(0))
    '                act(1, s) = "0"
    '            Next
    '            With My.Forms.DialogUnaSeleccion
    '                .limpiar()
    '                .Titulo = Eventos.titulo_app
    '                .Texto = "Selecciona la Cuenta Madre para " & leyenda & ":"
    '                .MinSeleccion = 1
    '                .MaxSeleccion = 1
    '                .elementos = act
    '                .ShowDialog()
    '                act = .elementos
    '                If .DialogResult = Windows.Forms.DialogResult.Cancel Then
    '                    Exit Sub
    '                End If
    '            End With

    '            Dim Letra As String = ""
    '            For s As Integer = 0 To act.GetLength(1)
    '                If act(1, s) = "1" Then
    '                    Letra = act(0, s)
    '                    Exit For
    '                End If
    '            Next
    '            Dim cadena As String = Trim(Letra)
    '            Dim posi As Integer = InStr(1, cadena, "-", CompareMethod.Binary)
    '            Dim cuantos As Integer = Len(cadena) - Len(cadena.Substring(0, posi))
    '            Letra = cadena.Substring(posi, cuantos)
    '            Dim ds As DataSet = Eventos.Obtener_DS("Select Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta from Catalogo_de_cuentas where nivel1 = '" & Letra.ToString.Substring(0, 4) & "' and Nivel2 = '" & Letra.ToString.Substring(4, 4) & "' and nivel3 > 0 and Nivel4 = '0000' and Id_Empresa = " & Me.lstCliente.SelectItem & " order by cta")
    '            If ds.Tables(0).Rows.Count > 0 Then
    '                Dim actv(,) As String
    '                ReDim actv(2, ds.Tables(0).Rows.Count + 1)
    '                For s As Integer = 0 To ds.Tables(0).Rows.Count - 1
    '                    actv(0, s) = ds.Tables(0).Rows(s)(0)
    '                    Debug.Print(ds.Tables(0).Rows(s)(0))
    '                    actv(1, s) = "0"
    '                Next
    '                With My.Forms.DialogUnaSeleccion
    '                    .limpiar()
    '                    .Titulo = Eventos.titulo_app
    '                    .Texto = "Selecciona la Sub Cuenta de " & cadena & ":"
    '                    .MinSeleccion = 1
    '                    .MaxSeleccion = 1
    '                    .elementos = actv
    '                    .ShowDialog()
    '                    actv = .elementos
    '                    If .DialogResult = Windows.Forms.DialogResult.Cancel Then
    '                        Exit Sub
    '                    End If
    '                End With

    '                Dim Sub_cuenta As String = ""
    '                For s As Integer = 0 To actv.GetLength(1)
    '                    If actv(1, s) = "1" Then
    '                        Sub_cuenta = actv(0, s)
    '                        Exit For
    '                    End If
    '                Next
    '                ' Se crea cuenta de cuarto nivel
    '                cadena = Trim(Sub_cuenta)
    '                posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '                Sub_cuenta = cadena.Substring(posi, cuantos)

    '                If Verifica_existencia(Sub_cuenta.ToString.Substring(0, 4), Sub_cuenta.ToString.Substring(4, 4), Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value, Me.TablaD.Item(RFCED.Index, Me.TablaD.CurrentRow.Index).Value) = True Then
    '                    cuenta = Val(ObtenerValorDB("Catalogo_de_cuentas", "CASE WHEN max (Nivel4 ) + 1 IS NULL THEN 1 WHEN max (Nivel4 ) + 1 IS NOT NULL THEN   max (Nivel4 ) + 1 END AS C ", "  Nivel1 =" & Sub_cuenta.ToString.Substring(0, 4) & "  AND Nivel2 =" & Sub_cuenta.ToString.Substring(4, 4) & " AND Nivel3=" & Sub_cuenta.ToString.Substring(8, 4) & " AND Nivel4 >=" & Sub_cuenta.ToString.Substring(12, 4) & " and Id_Empresa = " & Me.lstCliente.SelectItem & "", True))
    '                    cuenta = Format(cuenta).PadLeft(4, "0")
    '                    Crear_cuenta(Sub_cuenta.ToString.Substring(0, 4), Sub_cuenta.ToString.Substring(4, 4), Sub_cuenta.ToString.Substring(8, 4),
    '                                           cuenta, Sub_cuenta.Substring(0, 12) & cuenta, Me.TablaD.Item(RFCED.Index, Me.TablaD.CurrentRow.Index).Value & " " & Me.TablaD.Item(NomEd.Index, Me.TablaD.CurrentRow.Index).Value,
    '                                           Me.lstCliente.SelectItem, Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value, Me.TablaD.Item(RFCED.Index, Me.TablaD.CurrentRow.Index).Value)
    '                Else
    '                    MessageBox.Show("La cuenta ya existe ...", Eventos.titulo_app, MessageBoxButtons.OK, MessageBoxIcon.Warning)
    '                End If

    '            Else
    '                ' Se crea cuenta de tercer nivel
    '                If Verifica_existencia(Letra.ToString.Substring(0, 4), Letra.ToString.Substring(4, 4), Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value, Me.TablaD.Item(RFCED.Index, Me.TablaD.CurrentRow.Index).Value) = True Then
    '                    cuenta = Val(ObtenerValorDB("Catalogo_de_cuentas", "CASE WHEN max (Nivel3 ) + 1 IS NULL THEN 1 WHEN max (Nivel3 ) + 1 IS NOT NULL THEN   max (Nivel3 ) + 1 END AS C ", "  Nivel1 =" & Letra.ToString.Substring(0, 4) & "  AND Nivel2 =" & Letra.ToString.Substring(4, 4) & " and Id_Empresa = " & Me.lstCliente.SelectItem & " ", True))
    '                    cuenta = Format(cuenta).PadLeft(4, "0")
    '                    Crear_cuenta(Letra.ToString.Substring(0, 4), Letra.ToString.Substring(4, 4), cuenta,
    '                                       "0000", Letra.Substring(0, 8) & cuenta & "0000", Me.TablaD.Item(RFCED.Index, Me.TablaD.CurrentRow.Index).Value & " " & Me.TablaD.Item(NomEd.Index, Me.TablaD.CurrentRow.Index).Value,
    '                                       Me.lstCliente.SelectItem, Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value, Me.TablaD.Item(RFCED.Index, Me.TablaD.CurrentRow.Index).Value)
    '                Else
    '                    MessageBox.Show("La cuenta ya existe ...", Eventos.titulo_app, MessageBoxButtons.OK, MessageBoxIcon.Warning)
    '                End If

    '            End If
    '        ElseIf Me.TCEmitidas.SelectedIndex = 2 Then
    '            Dim leyenda As String = ""
    '            Dim dsconta As DataSet
    '            Dim columna As Integer = Me.TablaC.CurrentCell.ColumnIndex
    '            Dim Nombre As String
    '            Nombre = Me.TablaC.Columns.Item(Me.TablaC.CurrentCell.ColumnIndex).Name.ToString
    '            Me.LstTexto.Cargar(" Select '','' ")

    '            Dim consulta As String = "SELECT 'Serie/ '+  Rtrim(Series.Serie) + ' '+  Rtrim(Catalogo_de_Cuentas.Descripcion) + '-'+ convert(nvarchar,Catalogo_de_Cuentas.cuenta,103) as Cuenta, " +
    '                                "Catalogo_de_Cuentas.cuenta As cta FROM Catalogo_de_Cuentas  INNER JOIN Series On Series.Cuenta = Catalogo_de_Cuentas.Cuenta " +
    '                                "WHERE Nivel1 In('4010','4015') AND Nivel2 >0 AND Nivel3 = '0000'and Catalogo_de_Cuentas.Id_Empresa =  " & Me.lstCliente.SelectItem & " AND Clave in( 'I','IPC') " +
    '                                " ORDER BY cta"
    '            Select Case Nombre
    '                Case "LetraContabilidadComplemento"
    '                    ' dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas WHERE Nivel1 >0 AND Nivel2 >0 AND Nivel3 = '0000' AND Clave = '" & Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value & "' and Id_Empresa = " & Me.lstCliente.SelectItem & " ORDER BY cta")
    '                    dsconta = Eventos.Obtener_DS(consulta)
    '                    leyenda = Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value
    '                Case "NomCtaComplemento"
    '                    ' dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas WHERE Nivel1 >0 AND Nivel2 >0 AND Nivel3 = '0000' AND Clave = '" & Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value & "' and Id_Empresa = " & Me.lstCliente.SelectItem & "  ORDER BY cta")
    '                    dsconta = Eventos.Obtener_DS(consulta)
    '                    leyenda = Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value
    '                Case "CtaEfComplemento"
    '                    dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1010' and Nivel2 > 0 ORDER BY cta")
    '                    leyenda = " Efectivo"
    '                Case "CtaBancosComplemento"
    '                    dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1020' and Nivel2 > 0 ORDER BY cta")
    '                    leyenda = " Bancos"
    '                Case "CtaAjusComplemento"
    '                    dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & "   ORDER BY cta")
    '                    leyenda = " Ajustes"
    '                Case "CtaAntiComplemento"

    '                    If Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value <> Nothing Then
    '                        If Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value = "C" Or Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value = "CPP" Then
    '                            dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1200' and Nivel2 > 0   ORDER BY cta")
    '                            leyenda = " Anticipos Proveedores"
    '                        ElseIf Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value = "GG" Or Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value = "GGPP" Then
    '                            dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1210' and Nivel2 > 0   ORDER BY cta")
    '                            leyenda = " Anticipos Acreedores"
    '                        End If
    '                    End If
    '            End Select
    '            Dim cuenta As String = ""
    '            Dim act(,) As String
    '            ReDim act(2, dsconta.Tables(0).Rows.Count + 1)
    '            For s As Integer = 0 To dsconta.Tables(0).Rows.Count - 1
    '                act(0, s) = dsconta.Tables(0).Rows(s)(0)
    '                Debug.Print(dsconta.Tables(0).Rows(s)(0))
    '                act(1, s) = "0"
    '            Next
    '            With My.Forms.DialogUnaSeleccion
    '                .limpiar()
    '                .Titulo = Eventos.titulo_app
    '                .Texto = "Selecciona la Cuenta Madre para " & leyenda & ":"
    '                .MinSeleccion = 1
    '                .MaxSeleccion = 1
    '                .elementos = act
    '                .ShowDialog()
    '                act = .elementos
    '                If .DialogResult = Windows.Forms.DialogResult.Cancel Then
    '                    Exit Sub
    '                End If
    '            End With

    '            Dim Letra As String = ""
    '            For s As Integer = 0 To act.GetLength(1)
    '                If act(1, s) = "1" Then
    '                    Letra = act(0, s)
    '                    Exit For
    '                End If
    '            Next
    '            Dim cadena As String = Trim(Letra)
    '            Dim posi As Integer = InStr(1, cadena, "-", CompareMethod.Binary)
    '            Dim cuantos As Integer = Len(cadena) - Len(cadena.Substring(0, posi))
    '            Letra = cadena.Substring(posi, cuantos)
    '            Dim ds As DataSet = Eventos.Obtener_DS("Select Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta from Catalogo_de_cuentas where nivel1 = '" & Letra.ToString.Substring(0, 4) & "' and Nivel2 = '" & Letra.ToString.Substring(4, 4) & "' and nivel3 > 0 and Nivel4 = '0000' and Id_Empresa = " & Me.lstCliente.SelectItem & " order by cta")
    '            If ds.Tables(0).Rows.Count > 0 Then
    '                Dim actv(,) As String
    '                ReDim actv(2, ds.Tables(0).Rows.Count + 1)
    '                For s As Integer = 0 To ds.Tables(0).Rows.Count - 1
    '                    actv(0, s) = ds.Tables(0).Rows(s)(0)
    '                    Debug.Print(ds.Tables(0).Rows(s)(0))
    '                    actv(1, s) = "0"
    '                Next
    '                With My.Forms.DialogUnaSeleccion
    '                    .limpiar()
    '                    .Titulo = Eventos.titulo_app
    '                    .Texto = "Selecciona la Sub Cuenta de " & cadena & ":"
    '                    .MinSeleccion = 1
    '                    .MaxSeleccion = 1
    '                    .elementos = actv
    '                    .ShowDialog()
    '                    actv = .elementos
    '                    If .DialogResult = Windows.Forms.DialogResult.Cancel Then
    '                        Exit Sub
    '                    End If
    '                End With

    '                Dim Sub_cuenta As String = ""
    '                For s As Integer = 0 To actv.GetLength(1)
    '                    If actv(1, s) = "1" Then
    '                        Sub_cuenta = actv(0, s)
    '                        Exit For
    '                    End If
    '                Next
    '                ' Se crea cuenta de cuarto nivel
    '                cadena = Trim(Sub_cuenta)
    '                posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '                Sub_cuenta = cadena.Substring(posi, cuantos)

    '                If Verifica_existencia(Sub_cuenta.ToString.Substring(0, 4), Sub_cuenta.ToString.Substring(4, 4), Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value, Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value) = True Then
    '                    cuenta = Val(ObtenerValorDB("Catalogo_de_cuentas", "CASE WHEN max (Nivel4 ) + 1 IS NULL THEN 1 WHEN max (Nivel4 ) + 1 IS NOT NULL THEN   max (Nivel4 ) + 1 END AS C ", "  Nivel1 =" & Sub_cuenta.ToString.Substring(0, 4) & "  AND Nivel2 =" & Sub_cuenta.ToString.Substring(4, 4) & " AND Nivel3=" & Sub_cuenta.ToString.Substring(8, 4) & " AND Nivel4 >=" & Sub_cuenta.ToString.Substring(12, 4) & " and Id_Empresa = " & Me.lstCliente.SelectItem & "", True))
    '                    cuenta = Format(cuenta).PadLeft(4, "0")
    '                    Crear_cuenta(Sub_cuenta.ToString.Substring(0, 4), Sub_cuenta.ToString.Substring(4, 4), Sub_cuenta.ToString.Substring(8, 4),
    '                                           cuenta, Sub_cuenta.Substring(0, 12) & cuenta, Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value & " " & Me.TablaC.Item(NEmComplemento.Index, Me.TablaC.CurrentRow.Index).Value,
    '                                           Me.lstCliente.SelectItem, Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value, Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value)
    '                Else
    '                    MessageBox.Show("La cuenta ya existe ...", Eventos.titulo_app, MessageBoxButtons.OK, MessageBoxIcon.Warning)
    '                End If

    '            Else
    '                ' Se crea cuenta de tercer nivel
    '                If Verifica_existencia(Letra.ToString.Substring(0, 4), Letra.ToString.Substring(4, 4), Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value, Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value) = True Then
    '                    cuenta = Val(ObtenerValorDB("Catalogo_de_cuentas", "CASE WHEN max (Nivel3 ) + 1 IS NULL THEN 1 WHEN max (Nivel3 ) + 1 IS NOT NULL THEN   max (Nivel3 ) + 1 END AS C ", "  Nivel1 =" & Letra.ToString.Substring(0, 4) & "  AND Nivel2 =" & Letra.ToString.Substring(4, 4) & " and Id_Empresa = " & Me.lstCliente.SelectItem & "", True))
    '                    cuenta = Format(cuenta).PadLeft(4, "0")
    '                    Crear_cuenta(Letra.ToString.Substring(0, 4), Letra.ToString.Substring(4, 4), cuenta,
    '                                       "0000", Letra.Substring(0, 8) & cuenta & "0000", Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value & " " & Me.TablaC.Item(NEmComplemento.Index, Me.TablaC.CurrentRow.Index).Value,
    '                                       Me.lstCliente.SelectItem, Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value, Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value)
    '                Else
    '                    MessageBox.Show("La cuenta ya existe ...", Eventos.titulo_app, MessageBoxButtons.OK, MessageBoxIcon.Warning)
    '                End If

    '            End If
    '        End If

    '    End Sub
    '    Private Sub Crear_cuenta(ByVal nivel1 As String, ByVal nivel2 As String, ByVal nivel3 As String,
    '                             ByVal nivel4 As String, ByVal cuenta As String, ByVal descripcion As String, ByVal cliente As Integer, ByVal letra As String, ByVal RFC As String)
    '        Dim ds As DataSet = Eventos.Obtener_DS("Select Naturaleza,Clasificacion,Balanza,Cta_ceros,Cta_Cargo_Cero,Cta_Abono_Cero from Catalogo_de_Cuentas where nivel1 ='" & cuenta.ToString.Substring(0, 4) & "' and Id_Empresa = " & cliente & "  ")

    '        If ds.Tables(0).Rows.Count > 0 Then
    '            Dim sql As String = ""
    '            sql = "INSERT INTO dbo.Catalogo_de_Cuentas "
    '            sql &= "("
    '            sql &= "Nivel1, "
    '            sql &= "Nivel2,"
    '            sql &= "Nivel3,"
    '            sql &= "Nivel4,"
    '            sql &= "Cuenta,"
    '            sql &= "Descripcion,"
    '            sql &= "Naturaleza,"
    '            sql &= "Clasificacion,"
    '            sql &= "Codigo_Agrupador,"
    '            If RFC <> "" Then
    '                sql &= "RFC,"
    '            Else
    '                sql &= "RFC,"
    '            End If
    '            sql &= "Id_Empresa,clave, "
    '            sql &= "Balanza,"
    '            sql &= "Cta_ceros,  "
    '            sql &= "Cta_Cargo_Cero,"
    '            sql &= "Cta_Abono_Cero  "

    '            sql &= "	)  "
    '            sql &= "VALUES  "
    '            sql &= "	(  "
    '            sql &= "	'" & nivel1 & "'," '@nivel1
    '            sql &= "	'" & nivel2 & "'," '@nivel2
    '            sql &= "	'" & nivel3 & "'," '@nivel3
    '            sql &= "	'" & nivel4 & "'," '@nivel4
    '            sql &= "	'" & cuenta & "'," '@cuenta
    '            If Len(descripcion) >= 50 Then
    '                sql &= "	'" & descripcion.Substring(0, 48) & "'," '@descripcion
    '            Else
    '                sql &= "	'" & descripcion & "'," '@descripcion
    '            End If
    '            sql &= "	'" & Trim(ds.Tables(0).Rows(0)("Naturaleza")) & "'," '@naturaleza
    '            sql &= "	'" & Trim(ds.Tables(0).Rows(0)("Clasificacion")) & "'," '@clasificacion
    '            Dim su As String = ""
    '            If (nivel4 <> "0000" Or nivel3 <> "0000") And nivel2 <> "0000" Then
    '                su = nivel3.Substring(2, 2)
    '            End If
    '            sql &= "	'" & nivel1.ToString.Substring(0, 3) & su & "'," '@codigo_agrupador
    '            If RFC = "" Then
    '                sql &= "	NULL," '@RFC
    '            Else
    '                sql &= "	'" & RFC & "'," '@RFC
    '            End If
    '            sql &= "	" & cliente & " , '" & Trim(letra) & "'," '@Id_Empresa    

    '            sql &= "	" & Eventos.Bool2(Trim(ds.Tables(0).Rows(0)("Balanza"))) & "," '@Balanza
    '            sql &= "	" & Eventos.Bool2(Trim(ds.Tables(0).Rows(0)("Cta_ceros"))) & "," '@Cta_ceros
    '            sql &= "	" & Eventos.Bool2(Trim(ds.Tables(0).Rows(0)("Cta_Cargo_Cero"))) & "," '@Balanza
    '            sql &= "	" & Eventos.Bool2(Trim(ds.Tables(0).Rows(0)("Cta_Abono_Cero"))) & "" '@Cta_ceros
    '            sql &= "  )"
    '            ' Ingresar codigo para importar catalogos
    '            If Eventos.Comando_sql(sql) > 0 Then
    '                Eventos.Insertar_usuariol("Crear_CtaCarga", sql)
    '            End If
    '        Else

    '        End If
    '    End Sub
    '    Private Function Verifica_existencia(ByVal Nivel1 As String, ByVal Nivel2 As String, ByVal clave As String, ByVal rfc As String)
    '        Dim hacer As Boolean
    '        Dim sql As String = " Select cuenta from catalogo_De_cuentas where nivel1= '" & Nivel1 & "' and nivel2 = '" & Nivel2 & "' and clave = '" & clave & "' and rfc = '" & rfc & "' AND Id_Empresa =" & Me.lstCliente.SelectItem & ""
    '        Dim ds As DataSet = Eventos.Obtener_DS(sql)
    '        If ds.Tables(0).Rows.Count > 0 Then
    '            hacer = False
    '        Else
    '            hacer = True
    '        End If
    '        Return hacer
    '    End Function
    '    Private Function Verifica_existenciaN3(ByVal Nivel1 As String, ByVal Nivel2 As String, ByVal Nivel3 As String, ByVal clave As String, ByVal rfc As String)
    '        Dim hacer As Boolean
    '        Dim sql As String = " Select cuenta from catalogo_De_cuentas where nivel1= '" & Nivel1 & "' and nivel2 = '" & Nivel2 & "' and nivel3 = '" & Nivel3 & "'  and clave = '" & clave & "' and rfc = '" & rfc & "' AND Id_Empresa =" & Me.lstCliente.SelectItem & ""
    '        Dim ds As DataSet = Eventos.Obtener_DS(sql)
    '        If ds.Tables(0).Rows.Count > 0 Then
    '            hacer = False
    '        Else
    '            hacer = True
    '        End If
    '        Return hacer
    '    End Function
    '    Private Sub Crear_detalle(ByVal p As Integer, ByVal pol As String)
    '        Dim Item As Integer = 1
    '        Dim PorcenProv, ImpGprov, ImpEprov, ImpIvaPr As Decimal
    '        PorcenProv = Me.TablaImportar.Item(ImpProvis.Index, p).Value / (Me.TablaImportar.Item(TReal.Index, p).Value - (Me.TablaImportar.Item(RIVA.Index, p).Value + Me.TablaImportar.Item(RISR.Index, p).Value))
    '        If PorcenProv = 1 Then
    '            ImpGprov = 0
    '            ImpEprov = 0
    '            ImpIvaPr = 0
    '        Else
    '            ImpGprov = Me.TablaImportar.Item(ImpG.Index, p).Value * PorcenProv
    '            ImpEprov = Me.TablaImportar.Item(ImpEx.Index, p).Value * PorcenProv
    '            ImpIvaPr = Me.TablaImportar.Item(IVAR.Index, p).Value * PorcenProv
    '        End If

    '        If Trim(Me.TablaImportar.Item(ContabilizacionC.Index, p).Value) = "I" Then ' Compras 

    '            Dim cadena As String = Trim(Me.TablaImportar.Item(NCuenta.Index, p).Value)
    '            Dim posi As Integer = InStr(1, cadena, "-", CompareMethod.Binary)
    '            Dim cuantos As Integer = Len(cadena) - Len(cadena.Substring(0, posi))
    '            Dim Cuenta_Cargo As String = cadena.Substring(posi, cuantos)
    '            Dim Cuenta2 As String = ""

    '            ' Cargos a las cuentas de Efectivo Transf o Cheques
    '            If Me.TablaImportar.Item(ImpEf.Index, p).Value > 0 And Me.TablaImportar.Item(ImpT.Index, p).Value > 0 And Me.TablaImportar.Item(ImpC.Index, p).Value > 0 Then 'TODOS
    '                Item = 1
    '                cadena = Trim(Me.TablaImportar.Item(CuentasEfectivo.Index, p).Value)
    '                posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '                Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(ImpEf.Index, p).Value, 0, Cuenta_Cargo, "")

    '                Item = Item + 1

    '                cadena = Trim(Me.TablaImportar.Item(CuentaBancos.Index, p).Value)
    '                posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '                Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(ImpT.Index, p).Value, 0, Cuenta_Cargo, "")

    '                Item = Item + 1
    '                cadena = Trim(Me.TablaImportar.Item(CtaCheque.Index, p).Value)
    '                posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '                Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(ImpC.Index, p).Value, 0, Cuenta_Cargo, Me.TablaImportar.Item(NoCheque.Index, p).Value)
    '                Item = Item + 1

    '            ElseIf Me.TablaImportar.Item(ImpEf.Index, p).Value > 0 And Me.TablaImportar.Item(ImpT.Index, p).Value > 0 And Me.TablaImportar.Item(ImpC.Index, p).Value = 0 Then 'Efectivo y Transferencia
    '                Item = 1
    '                cadena = Trim(Me.TablaImportar.Item(CuentasEfectivo.Index, p).Value)
    '                posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '                Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(ImpEf.Index, p).Value, 0, Cuenta_Cargo, "")
    '                Item = Item + 1
    '                cadena = Trim(Me.TablaImportar.Item(CuentaBancos.Index, p).Value)
    '                posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '                Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(ImpT.Index, p).Value, 0, Cuenta_Cargo, "")
    '                Item = Item + 1
    '            ElseIf Me.TablaImportar.Item(ImpEf.Index, p).Value = 0 And Me.TablaImportar.Item(ImpT.Index, p).Value > 0 And Me.TablaImportar.Item(ImpC.Index, p).Value > 0 Then 'Cheque y Transferencia
    '                Item = 1

    '                cadena = Trim(Me.TablaImportar.Item(CuentaBancos.Index, p).Value)
    '                posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '                Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(ImpT.Index, p).Value, 0, Cuenta_Cargo, "")
    '                Item = Item + 1
    '                cadena = Trim(Me.TablaImportar.Item(CtaCheque.Index, p).Value)
    '                posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '                Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(ImpC.Index, p).Value, 0, Cuenta_Cargo, Me.TablaImportar.Item(NoCheque.Index, p).Value)
    '                Item = Item + 1

    '            ElseIf Me.TablaImportar.Item(ImpEf.Index, p).Value > 0 And Me.TablaImportar.Item(ImpT.Index, p).Value = 0 And Me.TablaImportar.Item(ImpC.Index, p).Value > 0 Then 'Cheque y Efecivo
    '                Item = 1
    '                cadena = Trim(Me.TablaImportar.Item(CuentasEfectivo.Index, p).Value)
    '                posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '                Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(ImpEf.Index, p).Value, 0, Cuenta_Cargo, "")
    '                Item = Item + 1
    '                cadena = Trim(Me.TablaImportar.Item(CtaCheque.Index, p).Value)
    '                posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '                Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(ImpC.Index, p).Value, 0, Cuenta_Cargo, Me.TablaImportar.Item(NoCheque.Index, p).Value)
    '                Item = Item + 1
    '            ElseIf Me.TablaImportar.Item(ImpEf.Index, p).Value > 0 And Me.TablaImportar.Item(ImpT.Index, p).Value = 0 And Me.TablaImportar.Item(ImpC.Index, p).Value = 0 Then ' Efecivo
    '                Item = 1
    '                'Cuenta del Abono
    '                cadena = Trim(Me.TablaImportar.Item(CuentasEfectivo.Index, p).Value)
    '                posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '                Cuenta_Cargo = cadena.Substring(posi, cuantos)

    '                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(ImpEf.Index, p).Value, 0, Cuenta_Cargo, "")
    '                Item = Item + 1
    '            ElseIf Me.TablaImportar.Item(ImpEf.Index, p).Value = 0 And Me.TablaImportar.Item(ImpT.Index, p).Value > 0 And Me.TablaImportar.Item(ImpC.Index, p).Value = 0 Then ' Transferencia
    '                Item = 1
    '                'Cuenta del Abono transferencia
    '                cadena = Trim(Me.TablaImportar.Item(CuentaBancos.Index, p).Value)
    '                posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '                Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(ImpT.Index, p).Value, 0, Cuenta_Cargo, IIf(IsDBNull(Me.TablaImportar.Item(NoCheque.Index, p).Value) = True, "", Me.TablaImportar.Item(NoCheque.Index, p).Value))
    '                Item = Item + 1
    '            ElseIf Me.TablaImportar.Item(ImpEf.Index, p).Value = 0 And Me.TablaImportar.Item(ImpT.Index, p).Value = 0 And Me.TablaImportar.Item(ImpC.Index, p).Value > 0 Then 'Cheque 
    '                Item = 1
    '                cadena = Trim(Me.TablaImportar.Item(CtaCheque.Index, p).Value)
    '                posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '                Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(ImpC.Index, p).Value, 0, Cuenta_Cargo, Me.TablaImportar.Item(NoCheque.Index, p).Value)
    '                Item = Item + 1
    '            End If
    '            If Me.TablaImportar.Item(RIVA.Index, p).Value > 0 Then
    '                If Me.TablaImportar.Item(ImpProvis.Index, p).Value > 0 Then
    '                    Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(RIVA.Index, p).Value - (Me.TablaImportar.Item(RIVA.Index, p).Value * PorcenProv), 0, Regresa_Cuenta_Retencion(Me.lstCliente.SelectItem, True, Me.TablaImportar.Item(Ser.Index, p).Value), "")
    '                    Item = Item + 1
    '                Else

    '                    Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(RIVA.Index, p).Value, 0, Regresa_Cuenta_Retencion(Me.lstCliente.SelectItem, True, Me.TablaImportar.Item(Ser.Index, p).Value), "")
    '                    Item = Item + 1
    '                End If


    '            End If
    '            If Me.TablaImportar.Item(RISR.Index, p).Value > 0 Then
    '                If Me.TablaImportar.Item(ImpProvis.Index, p).Value > 0 Then
    '                    Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(RISR.Index, p).Value - (Me.TablaImportar.Item(RISR.Index, p).Value * PorcenProv), 0, Regresa_Cuenta_Retencion(Me.lstCliente.SelectItem, False, Me.TablaImportar.Item(Ser.Index, p).Value), "")
    '                    Item = Item + 1
    '                Else
    '                    Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(RISR.Index, p).Value, 0, Regresa_Cuenta_Retencion(Me.lstCliente.SelectItem, False, Me.TablaImportar.Item(Ser.Index, p).Value), "")
    '                    Item = Item + 1
    '                End If

    '            End If

    '            cadena = Trim(Me.TablaImportar.Item(NCuenta.Index, p).Value)
    '            posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '            Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '            Cuenta2 = ""

    '            If Me.TablaImportar.Item(ImpEx.Index, p).Value > 0 And Me.TablaImportar.Item(ImpG.Index, p).Value > 0 And Me.TablaImportar.Item(IVAR.Index, p).Value > 0 Then ' tiene grabado y exento
    '                If Me.lbl0.Text = True Then
    '                    Cuenta2 = RegresaCuneta(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngC", Me.TablaImportar.Item(Ser.Index, p).Value), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)
    '                Else
    '                    Cuenta2 = RegresaCuneta(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngEx", Me.TablaImportar.Item(Ser.Index, p).Value), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)
    '                End If

    '                Cuenta_Cargo = RegresaCuneta(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngG", Me.TablaImportar.Item(Ser.Index, p).Value), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)
    '                Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(ImpG.Index, p).Value - ImpGprov, Cuenta_Cargo, "")
    '                Item = Item + 1
    '                Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(ImpEx.Index, p).Value - ImpEprov, Cuenta2, "")
    '                Item = Item + 1
    '                Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(IVAR.Index, p).Value - ImpIvaPr, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "IVATras", Me.TablaImportar.Item(Ser.Index, p).Value), "")
    '                ' Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(IVAR.Index, p).Value - ImpIvaPr, "2080000100010000", "")
    '                Item = Item + 1

    '            ElseIf Me.TablaImportar.Item(ImpEx.Index, p).Value > 0 And Me.TablaImportar.Item(ImpG.Index, p).Value <= 0 Then 'Tiene Exento o 0
    '                If Me.lbl0.Text = True Then
    '                    Cuenta2 = RegresaCuneta(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngC", Me.TablaImportar.Item(Ser.Index, p).Value), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)
    '                Else
    '                    Cuenta2 = RegresaCuneta(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngEx", Me.TablaImportar.Item(Ser.Index, p).Value), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)
    '                End If
    '                Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(ImpEx.Index, p).Value - ImpEprov, Cuenta2, "")
    '                Item = Item + 1

    '            ElseIf Me.TablaImportar.Item(ImpEx.Index, p).Value <= 0 And Me.TablaImportar.Item(ImpG.Index, p).Value > 0 Then 'Tiene Grabado

    '                Cuenta_Cargo = RegresaCuneta(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngG", Me.TablaImportar.Item(Ser.Index, p).Value), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)
    '                Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(ImpG.Index, p).Value - ImpGprov, Cuenta_Cargo, "")
    '                Item = Item + 1
    '                Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(IVAR.Index, p).Value - ImpIvaPr, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "IVATras", Me.TablaImportar.Item(Ser.Index, p).Value), "")
    '                ' Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(IVAR.Index, p).Value - ImpIvaPr, "2080000100010000", "")
    '                Item = Item + 1

    '            End If
    '            'Abonos con cuentas efectivo bancos


    '            'si tienes mas tranf
    '            If Me.TablaImportar.Item(ImpT2.Index, p).Value > 0 Then
    '                cadena = Trim(Me.TablaImportar.Item(CtaT2.Index, p).Value)
    '                posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '                Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '                Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(ImpT2.Index, p).Value, Cuenta_Cargo, "")
    '                Item = Item + 1
    '            End If

    '            'Inserta Anticipos
    '            If Me.TablaImportar.Item(Anti.Index, p).Value > 0 Then ' Se verifica si cuenta con anticipos +
    '                Item = Item + 1
    '                cadena = Trim(Me.TablaImportar.Item(CtaAnti.Index, p).Value)
    '                posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '                Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '                Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(Anti.Index, p).Value, Cuenta_Cargo, "")
    '            ElseIf Me.TablaImportar.Item(Anti.Index, p).Value < 0 Then ' Se verifica si cuenta  anticipos -
    '                Item = Item + 1
    '                cadena = Trim(Me.TablaImportar.Item(CtaAnti.Index, p).Value)
    '                posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '                Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(Anti.Index, p).Value * -1, 0, Cuenta_Cargo, "")
    '            End If
    '            'Inserta Ajustes
    '            If Me.TablaImportar.Item(Ajus.Index, p).Value > 0 Then ' Se verifica si cuenta con ajuste +
    '                Item = Item + 1
    '                cadena = Trim(Me.TablaImportar.Item(CtaAjustes.Index, p).Value)
    '                posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '                Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '                'cargo de Ajuste
    '                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(Ajus.Index, p).Value, 0, Cuenta_Cargo, "")

    '            ElseIf Me.TablaImportar.Item(Ajus.Index, p).Value < 0 Then ' Se verifica si cuenta con ajuste -
    '                Item = Item + 1
    '                cadena = Trim(Me.TablaImportar.Item(CtaAjustes.Index, p).Value)
    '                posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '                Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '                'Abono de Ajuste
    '                Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(Ajus.Index, p).Value * -1, Cuenta_Cargo, "")
    '            End If
    '            If Me.TablaImportar.Item(PCambiaria.Index, p).Value > 0 Then ' Se perdida cambiaria
    '                Item = Item + 1
    '                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(PCambiaria.Index, p).Value, 0, "7010000100000000", "")
    '            End If
    '            If Me.TablaImportar.Item(UCambaria.Index, p).Value > 0 Then ' Se utilidad cambiaria
    '                Item = Item + 1
    '                Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(UCambaria.Index, p).Value, "7020000100000000", "")
    '            End If
    '            'Inserta Registros Combinada Provision Compras
    '            If Me.TablaImportar.Item(ImpProvis.Index, p).Value > 0 Then

    '                cadena = Trim(Me.TablaImportar.Item(CtaProv.Index, p).Value)
    '                posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '                Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '                Item = Item + 1

    '                If ImpEprov > 0 And ImpGprov > 0 Then ' tiene grabado y exento

    '                    If Me.lbl0.Text = True Then
    '                        Cuenta2 = RegresaCuneta(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCC", Me.TablaImportar.Item(Ser.Index, p).Value), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)
    '                    Else
    '                        Cuenta2 = RegresaCuneta(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCE", Me.TablaImportar.Item(Ser.Index, p).Value), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)

    '                    End If

    '                    'Cuenta2 = RegresaCuneta("40150006", Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)
    '                    Cuenta_Cargo = RegresaCuneta(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCG", Me.TablaImportar.Item(Ser.Index, p).Value), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)

    '                    Crea_detalle_poliza(pol, Item, 0, ImpGprov, Cuenta_Cargo, "")
    '                    Item = Item + 1
    '                    Crea_detalle_poliza(pol, Item, 0, ImpEprov, Cuenta2, "")
    '                    'Iva Gastos
    '                    Item = Item + 1
    '                    Crea_detalle_poliza(pol, Item, 0, ImpIvaPr, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "IVAPTras", Me.TablaImportar.Item(Ser.Index, p).Value), "")
    '                    ' Crea_detalle_poliza(pol, Item, 0, ImpIvaPr, "2090000100010000", "")
    '                    Item = Item + 1
    '                ElseIf ImpEprov > 0 And ImpGprov <= 0 Then 'Tiene Exento

    '                    If Me.lbl0.Text = True Then
    '                        Cuenta2 = RegresaCuneta(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCC", Me.TablaImportar.Item(Ser.Index, p).Value), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)
    '                    Else
    '                        Cuenta2 = RegresaCuneta(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCE", Me.TablaImportar.Item(Ser.Index, p).Value), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)

    '                    End If

    '                    Crea_detalle_poliza(pol, Item, 0, ImpEprov, Cuenta2, "")
    '                    Item = Item + 1
    '                ElseIf ImpEprov <= 0 And ImpGprov > 0 Then 'Tiene Grabado
    '                    Crea_detalle_poliza(pol, Item, 0, ImpGprov, Cuenta_Cargo, "")
    '                    Item = Item + 1
    '                    Crea_detalle_poliza(pol, Item, 0, ImpIvaPr, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "IVAPTras", Me.TablaImportar.Item(Ser.Index, p).Value), "")
    '                    Item = Item + 1
    '                End If

    '                cadena = Trim(Me.TablaImportar.Item(NCuenta.Index, p).Value)
    '                posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '                Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '                'Cuenta_Cargo = RegresaCuneta("10500001" & Cuenta_Cargo.Substring(8, 4), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)
    '                Cuenta_Cargo = RegresaCuneta(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "Clientes", Me.TablaImportar.Item(Ser.Index, p).Value), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)
    '                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(ImpProvis.Index, p).Value, 0, Cuenta_Cargo, "")


    '                If Me.TablaImportar.Item(RIVA.Index, p).Value > 0 Then
    '                    Item = Item + 1
    '                    Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(RIVA.Index, p).Value * PorcenProv, 0, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "IVARetPA", Me.TablaImportar.Item(Ser.Index, p).Value), "")
    '                    'Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(RIVA.Index, p).Value * PorcenProv, 0, "1035000800010000", "")
    '                End If
    '                If Me.TablaImportar.Item(RISR.Index, p).Value > 0 Then
    '                    Item = Item + 1
    '                    Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(RISR.Index, p).Value * PorcenProv, 0, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "ISRRPA", Me.TablaImportar.Item(Ser.Index, p).Value), "")
    '                    ' Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(RISR.Index, p).Value * PorcenProv, 0, "1035000800020000", "")
    '                End If

    '                If UCase(Me.TablaImportar.Item(CtaOrden.Index, p).Value) = "SI" Then
    '                    cadena = Trim(Me.TablaImportar.Item(CtaProv.Index, p).Value)
    '                    posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '                    cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '                    Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '                    Item = Item + 1

    '                    If ImpEprov > 0 And ImpGprov > 0 Then ' tiene grabado y exento
    '                        Cuenta2 = RegresaCuneta("9000" & cadena.Substring(4, 4), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)
    '                        Crea_detalle_poliza(pol, Item, 0, ImpGprov, Cuenta2, "")
    '                        Item = Item + 1
    '                        Cuenta2 = RegresaCuneta("90000006" & cadena.Substring(4, 4), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 0)
    '                        Crea_detalle_poliza(pol, Item, 0, ImpEprov, Cuenta2, "")

    '                    ElseIf ImpEprov > 0 And ImpGprov <= 0 Then 'Tiene Exento
    '                        If Cuenta_Cargo.Substring(4, 4) = "0006" Then
    '                            Cuenta2 = RegresaCuneta("90000006" & cadena.Substring(4, 4), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 0)
    '                            Crea_detalle_poliza(pol, Item, 0, ImpEprov, Cuenta2, "")
    '                        Else
    '                            Cuenta2 = RegresaCuneta("90000009" & cadena.Substring(4, 4), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 0)
    '                            Crea_detalle_poliza(pol, Item, 0, ImpEprov, Cuenta2, "")
    '                        End If
    '                        Crea_detalle_poliza(pol, Item, 0, ImpEprov, Cuenta_Cargo, "")
    '                        Item = Item + 1
    '                    ElseIf ImpEprov <= 0 And ImpGprov > 0 Then 'Tiene Grabado
    '                        Cuenta2 = RegresaCuneta("9000" & cadena.Substring(4, 4), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)
    '                        Crea_detalle_poliza(pol, Item, 0, ImpGprov, Cuenta2, "")
    '                    End If



    '                    If BuscaCtaOrden(Me.DtInicio.Value.ToString.Substring(6, 4)) = "" Then ' tiene grabado y exento
    '                        Cuenta2 = RegresaCuneta("9001" & cadena.Substring(4, 4), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)
    '                        Crea_detalle_poliza(pol, Item, ImpGprov, 0, Cuenta2, "")
    '                        Item = Item + 1
    '                        Cuenta2 = RegresaCuneta("90000006" & cadena.Substring(4, 4), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 0)
    '                        Crea_detalle_poliza(pol, Item, ImpEprov, 0, Cuenta2, "")

    '                    ElseIf ImpEprov > 0 And ImpGprov <= 0 Then 'Tiene Exento
    '                        If Cuenta_Cargo.Substring(4, 4) = "0006" Then
    '                            Cuenta2 = RegresaCuneta("90000006" & cadena.Substring(4, 4), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 0)
    '                            Crea_detalle_poliza(pol, Item, ImpEprov, 0, Cuenta2, "")
    '                        Else
    '                            Cuenta2 = RegresaCuneta("90000009" & cadena.Substring(4, 4), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 0)
    '                            Crea_detalle_poliza(pol, Item, ImpEprov, 0, Cuenta2, "")
    '                        End If
    '                        Crea_detalle_poliza(pol, Item, ImpEprov, 0, Cuenta_Cargo, "")
    '                        Item = Item + 1
    '                    ElseIf ImpEprov <= 0 And ImpGprov > 0 Then 'Tiene Grabado
    '                        Cuenta2 = RegresaCuneta("9000" & cadena.Substring(4, 4), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)
    '                        Crea_detalle_poliza(pol, Item, ImpGprov, 0, Cuenta2, "")
    '                    End If


    '                End If
    '            End If


    '            Exit Sub

    '        ElseIf Trim(Me.TablaImportar.Item(ContabilizacionC.Index, p).Value) = "IPC" Then

    '            Dim cadena As String = ""
    '            Dim posi As Integer = 0
    '            Dim cuantos As Integer = 0
    '            Dim Cuenta_Cargo As String = ""
    '            Dim Cuenta2 As String = ""

    '            ' Revision codigo de Excentos o cero

    '            If Me.TablaImportar.Item(ImpEx.Index, p).Value > 0 And Me.TablaImportar.Item(ImpG.Index, p).Value > 0 And Me.TablaImportar.Item(IVAR.Index, p).Value > 0 Then ' tiene grabado y exento
    '                ' If Cuenta_Cargo.Substring(0, 8) = Regresa_Cuenta_Ingresos(Me.lstCliente.SelectItem) Then ' recuperar la cuenta de ingresos

    '                If Me.lbl0.Text = True Then
    '                    Cuenta2 = RegresaCuneta(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCC", Me.TablaImportar.Item(Ser.Index, p).Value), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)
    '                Else
    '                    Cuenta2 = RegresaCuneta(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCE", Me.TablaImportar.Item(Ser.Index, p).Value), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)

    '                End If

    '                Cuenta_Cargo = RegresaCuneta(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCG", Me.TablaImportar.Item(Ser.Index, p).Value), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)

    '                Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(ImpG.Index, p).Value - ImpGprov, Cuenta_Cargo, "")
    '                Item = Item + 1
    '                Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(ImpEx.Index, p).Value - ImpEprov, Cuenta2, "")
    '                Item = Item + 1
    '                'Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(IVAR.Index, p).Value - ImpIvaPr, "2080000100010000", "")
    '                Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(IVAR.Index, p).Value - ImpIvaPr, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "IVAPTras", Me.TablaImportar.Item(Ser.Index, p).Value), "")

    '                Item = Item + 1
    '            ElseIf Me.TablaImportar.Item(ImpEx.Index, p).Value > 0 And Me.TablaImportar.Item(ImpG.Index, p).Value <= 0 Then 'Tiene Exento o 0 
    '                If Me.lbl0.Text = True Then
    '                    Cuenta2 = RegresaCuneta(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCC", Me.TablaImportar.Item(Ser.Index, p).Value), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)
    '                Else
    '                    Cuenta2 = RegresaCuneta(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCE", Me.TablaImportar.Item(Ser.Index, p).Value), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)

    '                End If
    '                Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(ImpEx.Index, p).Value - ImpEprov, Cuenta2, "")
    '                Item = Item + 1
    '            ElseIf Me.TablaImportar.Item(ImpEx.Index, p).Value <= 0 And Me.TablaImportar.Item(ImpG.Index, p).Value > 0 Then 'Tiene Grabado 
    '                Cuenta_Cargo = RegresaCuneta(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCG", Me.TablaImportar.Item(Ser.Index, p).Value), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)
    '                Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(ImpG.Index, p).Value - ImpGprov, Cuenta_Cargo, "")
    '                Item = Item + 1
    '                'Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(IVAR.Index, p).Value - ImpIvaPr, "2080000100010000", "")
    '                Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(IVAR.Index, p).Value - ImpIvaPr, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "IVAPTras", Me.TablaImportar.Item(Ser.Index, p).Value), "")

    '                Item = Item + 1
    '            End If
    '            'Abonos con cuentas efectivo bancos
    '            'cadena = Trim(Me.TablaImportar.Item(NCuenta.Index, p).Value)
    '            'posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '            'cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '            'Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '            'Cuenta_Cargo = RegresaCuneta("10500001" & Cuenta_Cargo.Substring(8, 4), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)

    '            Cuenta_Cargo = RegresaCuneta(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "Clientes", Me.TablaImportar.Item(Ser.Index, p).Value), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)
    '            Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(ImpProvis.Index, p).Value, 0, Cuenta_Cargo, "")

    '            If Me.TablaImportar.Item(RIVA.Index, p).Value > 0 Then

    '                If Me.TablaImportar.Item(RIVA.Index, p).Value - (Me.TablaImportar.Item(RIVA.Index, p).Value * PorcenProv) = 0 Then

    '                Else
    '                    Item += 1
    '                    Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(RIVA.Index, p).Value - (Me.TablaImportar.Item(RIVA.Index, p).Value * PorcenProv), 0, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "IVARet", Me.TablaImportar.Item(Ser.Index, p).Value), "")

    '                End If

    '                ' Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(RIVA.Index, p).Value - (Me.TablaImportar.Item(RIVA.Index, p).Value * PorcenProv), 0, Regresa_Cuenta_Retencion(Me.lstCliente.SelectItem, True), "")

    '            End If
    '            If Me.TablaImportar.Item(RISR.Index, p).Value > 0 Then

    '                If Me.TablaImportar.Item(RISR.Index, p).Value - (Me.TablaImportar.Item(RISR.Index, p).Value * PorcenProv) = 0 Then

    '                Else
    '                    Item += 1
    '                    Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(RISR.Index, p).Value - (Me.TablaImportar.Item(RISR.Index, p).Value * PorcenProv), 0, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "ISRRet", Me.TablaImportar.Item(Ser.Index, p).Value), "")

    '                End If


    '            End If

    '            If Me.TablaImportar.Item(RIVA.Index, p).Value > 0 Then
    '                Item = Item + 1

    '                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(RIVA.Index, p).Value * PorcenProv, 0, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "IVARetPA", Me.TablaImportar.Item(Ser.Index, p).Value), "")


    '                ' Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(RIVA.Index, p).Value * PorcenProv, 0, "1035000800010000", "")
    '            End If
    '            If Me.TablaImportar.Item(RISR.Index, p).Value > 0 Then
    '                Item = Item + 1
    '                ' Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(RISR.Index, p).Value * PorcenProv, 0, "1035000800020000", "")
    '                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(RISR.Index, p).Value * PorcenProv, 0, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "ISRRPA", Me.TablaImportar.Item(Ser.Index, p).Value), "")
    '            End If
    '            'Inserta Anticipos
    '            If Me.TablaImportar.Item(Anti.Index, p).Value > 0 Then ' Se verifica si cuenta con anticipos +
    '                Item = Item + 1
    '                cadena = Trim(Me.TablaImportar.Item(CtaAnti.Index, p).Value)
    '                posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '                Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '                Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(Anti.Index, p).Value, Cuenta_Cargo, "")
    '            ElseIf Me.TablaImportar.Item(Anti.Index, p).Value < 0 Then ' Se verifica si cuenta  anticipos -
    '                Item = Item + 1
    '                cadena = Trim(Me.TablaImportar.Item(CtaAnti.Index, p).Value)
    '                posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '                Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(Anti.Index, p).Value * -1, 0, Cuenta_Cargo, "")
    '            End If
    '            'Inserta Ajustes
    '            If Me.TablaImportar.Item(Ajus.Index, p).Value > 0 Then ' Se verifica si cuenta con ajuste +
    '                Item = Item + 1
    '                cadena = Trim(Me.TablaImportar.Item(CtaAjustes.Index, p).Value)
    '                posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '                Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '                'cargo de Ajuste
    '                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(Ajus.Index, p).Value, 0, Cuenta_Cargo, "")

    '            ElseIf Me.TablaImportar.Item(Ajus.Index, p).Value < 0 Then ' Se verifica si cuenta con ajuste -
    '                Item = Item + 1
    '                cadena = Trim(Me.TablaImportar.Item(CtaAjustes.Index, p).Value)
    '                posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '                Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '                'Abono de Ajuste
    '                Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(Ajus.Index, p).Value * -1, Cuenta_Cargo, "")
    '            End If
    '            If Me.TablaImportar.Item(PCambiaria.Index, p).Value > 0 Then ' Se perdida cambiaria
    '                Item = Item + 1
    '                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(PCambiaria.Index, p).Value, 0, "7010000100000000", "")
    '            End If
    '            If Me.TablaImportar.Item(UCambaria.Index, p).Value > 0 Then ' Se utilidad cambiaria
    '                Item = Item + 1
    '                Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(UCambaria.Index, p).Value, "7020000100000000", "")
    '            End If
    '            If UCase(Me.TablaImportar.Item(CtaOrden.Index, p).Value) = "SI" Then
    '                Item = Item + 1
    '                If ImpEprov > 0 And ImpGprov > 0 Then

    '                    Cuenta2 = RegresaCuneta("901000010003", Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 0)
    '                    Crea_detalle_poliza(pol, Item, ImpGprov, 0, Cuenta2, "")
    '                    Item = Item + 1
    '                    If Trim(UCase(Me.lble.Text)) = "TRUE" Then
    '                        Cuenta2 = RegresaCuneta("901000010001", Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 0)
    '                    Else
    '                        Cuenta2 = RegresaCuneta("901000010002", Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 0)
    '                    End If
    '                    Crea_detalle_poliza(pol, Item, ImpEprov, 0, Cuenta2, "")
    '                    Item = Item + 1

    '                ElseIf ImpEprov > 0 And ImpGprov <= 0 Then 'Tiene Exento
    '                    If Trim(UCase(Me.lble.Text)) = "TRUE" Then
    '                        Cuenta2 = RegresaCuneta("901000010001", Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 0)
    '                    Else
    '                        Cuenta2 = RegresaCuneta("901000010002", Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 0)
    '                    End If
    '                    Crea_detalle_poliza(pol, Item, ImpEprov, 0, Cuenta2, "")
    '                    Item = Item + 1
    '                ElseIf ImpEprov <= 0 And ImpGprov > 0 Then 'Tiene Grabado
    '                    Cuenta2 = RegresaCuneta("901000010003", Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 0)
    '                    Crea_detalle_poliza(pol, Item, ImpGprov, 0, Cuenta2, "")
    '                    Item = Item + 1
    '                End If

    '                If ImpEprov > 0 And ImpGprov > 0 Then
    '                    Crea_detalle_poliza(pol, Item, 0, ImpGprov, "9011001000010003", "")
    '                    Item = Item + 1
    '                    If Trim(UCase(Me.lble.Text)) = "TRUE" Then
    '                        Crea_detalle_poliza(pol, Item, 0, ImpEprov, "9011001000010001", "")
    '                    Else
    '                        Crea_detalle_poliza(pol, Item, 0, ImpEprov, "9011001000010002", "")
    '                    End If
    '                    Item = Item + 1

    '                ElseIf ImpEprov > 0 And ImpGprov <= 0 Then 'Tiene Exento
    '                    If Trim(UCase(Me.lble.Text)) = "TRUE" Then
    '                        Crea_detalle_poliza(pol, Item, 0, ImpEprov, "9011001000010001", "")
    '                    Else
    '                        Crea_detalle_poliza(pol, Item, 0, ImpEprov, "9011001000010002", "")
    '                    End If
    '                    Item = Item + 1
    '                ElseIf ImpEprov <= 0 And ImpGprov > 0 Then 'Tiene Grabado
    '                    Crea_detalle_poliza(pol, Item, 0, ImpGprov, "9011001000010003", "")
    '                    Item = Item + 1
    '                End If

    '            End If
    '            Exit Sub
    '        End If
    '    End Sub
    '    'Crear eventos para regresar las cuentas de LA TABLA DE SERIES
    '    Private Function BuscaCtaOrden(ByVal Anio As String)
    '        Dim cta As String = ""
    '        Dim sql As String = "Select * from catalogo_de_cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & "  and descripcion like '%Ejercicio " & Anio & "%' and Nivel1 ='9001' "
    '        Dim ds As DataSet = Eventos.Obtener_DS(sql)
    '        If ds.Tables(0).Rows.Count > 0 Then
    '            cta = ds.Tables(0).Rows(0)(0)
    '        Else
    '            cta = ""
    '        End If
    '        Return cta
    '    End Function
    '    Private Function Regresa_Cuenta_Series(ByVal cliente As Integer, ByVal tipo As String, ByVal serie As String)
    '        Dim cta As String = ""
    '        Dim sql As String = "SELECT 
    '	Id_Ingreso,	Serie,	Abono,	CtaIngG,	CtaIngEx,	CtaIngC,	IVATras,	ISRRet,	IVARet,	CtaIngPCG,	CtaIngPCE,	CtaIngPCC,
    '	IVAPTras,	ISRRPA,	IVARetPA,DevSVentasG,DevSVentasC,DevSVentasEx,IvaSDev,Id_Empresa,Clientes FROM dbo.Series WHERE Id_Empresa = " & cliente & " and serie  = '" & serie & "' "
    '        Dim ds As DataSet = Eventos.Obtener_DS(sql)
    '        If ds.Tables(0).Rows.Count > 0 Then
    '            cta = Trim(ds.Tables(0).Rows(0)(tipo)).Substring(0, 12)
    '        Else

    '            cta = ""
    '        End If
    '        Return cta
    '    End Function
    '    Private Function Regresa_Cuenta_Impuestos(ByVal cliente As Integer, ByVal tipo As String, ByVal serie As String)
    '        Dim cta As String = ""
    '        Dim sql As String = "SELECT 
    '	Id_Ingreso,	Serie,	Abono,	CtaIngG,	CtaIngEx,	CtaIngC,	IVATras,	ISRRet,	IVARet,	CtaIngPCG,	CtaIngPCE,	CtaIngPCC,
    '	IVAPTras,	ISRRPA,	IVARetPA,IvaSDev,	Id_Empresa FROM dbo.Series WHERE Id_Empresa = " & cliente & " and Serie = '" & serie & "'"
    '        Dim ds As DataSet = Eventos.Obtener_DS(sql)
    '        If ds.Tables(0).Rows.Count > 0 Then
    '            cta = Trim(ds.Tables(0).Rows(0)(tipo))
    '        Else

    '            cta = ""
    '        End If
    '        Return cta
    '    End Function

    '    Private Function Regresa_Cuenta_Retencion(ByVal cliente As Integer, ByVal iva As Boolean, ByVal Serie As String)
    '        Dim cta As String = ""
    '        Dim sql As String = ""
    '        If iva = True Then
    '            sql = "SELECT IVARet FROM dbo.Series WHERE Id_Empresa = " & cliente & " and serie ='" & Serie & "'"
    '        Else
    '            sql = "SELECT ISRRet FROM dbo.Series WHERE Id_Empresa = " & cliente & "  and serie ='" & Serie & "'"
    '        End If

    '        Dim ds As DataSet = Eventos.Obtener_DS(sql)
    '        If ds.Tables(0).Rows.Count > 0 Then
    '            cta = ds.Tables(0).Rows(0)(0).ToString
    '        Else
    '            cta = ""
    '        End If
    '        Return cta
    '    End Function
    '    Private Sub Actualiza_Registro(ByVal poliza As String, ByVal registro As Integer)
    '        Dim sql As String = " UPDATE dbo.xml_sat
    '                        SET ID_poliza = '" & poliza & "'
    '                        WHERE Id_Registro_Xml = " & registro & "  "
    '        If Eventos.Comando_sql(sql) > 0 Then
    '            Eventos.Insertar_usuariol("Carga", sql)
    '        End If

    '    End Sub
    '    Private Sub Actualiza_RegistroC(ByVal poliza As String, ByVal registro As Integer)
    '        Dim sql As String = " UPDATE dbo.Xml_Complemento
    '                        SET ID_poliza = '" & poliza & "'
    '                        WHERE Id_Xml_Complemento = " & registro & "  "
    '        If Eventos.Comando_sql(sql) > 0 Then
    '            Eventos.Insertar_usuariol("Carga", sql)
    '        End If

    '    End Sub

    '    Private Function Buscar_Cuenta_Abono(ByVal where As String)
    '        Dim cuenta As String = ""
    '        Dim sql As String = " select cuenta from catalogo_de_cuentas where " & where & ""
    '        Dim ds As DataSet = Eventos.Obtener_DS(sql)
    '        If ds.Tables(0).Rows.Count > 0 Then
    '            cuenta = ds.Tables(0).Rows(0)(0)
    '        End If
    '        Return cuenta
    '    End Function
    '    Private Sub Color_Columnas()
    '        Dim contador As Integer = 0
    '        Dim frm As New BarraProcesovb
    '        frm.Show()
    '        frm.Text = "Ajustando color de las Columnas por favor espere..."
    '        frm.Barra.Minimum = 0
    '        frm.Barra.Maximum = Me.TablaImportar.Columns.Count
    '        For Each Column As DataGridViewColumn In TablaImportar.Columns
    '            If Column.Index = ContabilizacionC.Index Or Column.Index = anio.Index Or Column.Index = Mes.Index Or Column.Index = BancoOrigen.Index Or Column.Index = Bancodestino.Index Or Column.Index = Fechat.Index Or Column.Index = BancosCheques.Index Or Column.Index = NoCheque.Index Or Column.Index = FechaC.Index Or Column.Index = ProvA.Index Or Column.Index = ProvP.Index Or Column.Index = UCambaria.Index Or Column.Index = PCambiaria.Index Or Column.Index = ImpD.Index Or Column.Index = CuntaDev.Index Or Column.Index = ImpD.Index Or Column.Index = ImpD.Index Then
    '                Column.DefaultCellStyle.BackColor = Color.RoyalBlue
    '            ElseIf Column.Index = Ajus.Index Then
    '                Column.DefaultCellStyle.BackColor = Color.GreenYellow
    '            ElseIf Column.Index = Anti.Index Then
    '                Column.DefaultCellStyle.BackColor = Color.LawnGreen
    '            ElseIf Column.Index = ImpProvis.Index Then
    '                Column.DefaultCellStyle.BackColor = Color.MediumPurple
    '            ElseIf Column.Index = TipoPoliza.Index Or Column.Index = NumPol.Index Then
    '                Column.DefaultCellStyle.BackColor = Color.Orange
    '            ElseIf Column.Index = NCuenta.Index Or Column.Index = CuentaBancos.Index Or Column.Index = CtaCheque.Index Then
    '                Column.DefaultCellStyle.BackColor = Color.Orange
    '            ElseIf Column.Index = ImpEf.Index Or Column.Index = ImpT.Index Or Column.Index = ImpC.Index Then
    '                Column.DefaultCellStyle.BackColor = Color.OliveDrab
    '            ElseIf Column.Index = Ser.Index Then
    '                Column.DefaultCellStyle.BackColor = Color.LightSeaGreen
    '            End If
    '            frm.Barra.value += 1
    '        Next
    '        frm.Close()
    '    End Sub
    '    Private Function RegresaCuneta(ByVal cuenta As String, ByVal rfc As String, ByVal posicion As Integer, Optional ByVal tipo As Integer = 0)
    '        Dim Cta As String = ""
    '        Dim sql As String = ""
    '        If tipo = 1 Then
    '            sql = "SELECT cuenta FROM Catalogo_de_Cuentas WHERE Nivel1='" & cuenta.Substring(0, 4) & "' AND Nivel2= '" & cuenta.Substring(4, 4) & "' AND Nivel3 > 0 AND RFC = '" & rfc & "' and Id_Empresa = " & Me.lstCliente.SelectItem & " "
    '        ElseIf tipo = 2 Then

    '            sql = "SELECT cuenta FROM Catalogo_de_Cuentas WHERE Nivel1='" & cuenta.Substring(0, 4) & "' AND Nivel2= '" & cuenta.Substring(4, 4) & "' AND Nivel3 = '" & cuenta.Substring(8, 4) & "' AND Nivel4 > 0 AND RFC = '" & rfc & "' and Id_Empresa = " & Me.lstCliente.SelectItem & " "
    '        ElseIf tipo = 0 Then

    '            sql = "SELECT cuenta FROM Catalogo_de_Cuentas WHERE Nivel1='" & cuenta.Substring(0, 4) & "' AND Nivel2= '" & cuenta.Substring(4, 4) & "' AND Nivel3 = '" & cuenta.Substring(8, 4) & "' AND Nivel4 >= 0 AND RFC = '" & rfc & "' and Id_Empresa = " & Me.lstCliente.SelectItem & " "

    '        End If

    '        Dim ds As DataSet = Eventos.Obtener_DS(sql)
    '        If ds.Tables(0).Rows.Count > 0 Then
    '            Cta = ds.Tables(0).Rows(0)(0)
    '        Else
    '            'No existe la cuenta y la inserta
    '            If tipo = 1 Then
    '                Cta = Val(ObtenerValorDB("Catalogo_de_cuentas", "CASE WHEN max (Nivel3 ) + 1 IS NULL THEN 1 WHEN max (Nivel3 ) + 1 IS NOT NULL THEN   max (Nivel3 ) + 1 END AS C ", "  Nivel1 =" & cuenta.ToString.Substring(0, 4) & "  AND Nivel2 =" & cuenta.ToString.Substring(4, 4) & " AND Nivel3 >= 0 and Id_Empresa = " & Me.lstCliente.SelectItem & "", True))
    '                Cta = Format(Cta).PadLeft(4, "0")
    '                Crear_cuenta(cuenta.ToString.Substring(0, 4), cuenta.ToString.Substring(4, 4), Cta.ToString.Substring(0, 4),
    '                               "0000", cuenta.Substring(0, 8) & Cta & "0000", Me.TablaImportar.Item(RFCE.Index, posicion).Value & " " & Me.TablaImportar.Item(NomEmisor.Index, posicion).Value,
    '                                Me.lstCliente.SelectItem, Me.TablaImportar.Item(ContabilizacionC.Index, posicion).Value, Me.TablaImportar.Item(RFCE.Index, posicion).Value)
    '                Cta = cuenta.Substring(0, 8) & Cta & "0000"
    '            ElseIf tipo = 0 Then
    '                Cta = Val(ObtenerValorDB("Catalogo_de_cuentas", "CASE WHEN max (Nivel4 ) + 1 IS NULL THEN 1 WHEN max (Nivel4 ) + 1 IS NOT NULL THEN   max (Nivel4 ) + 1 END AS C ", "  Nivel1 =" & cuenta.ToString.Substring(0, 4) & "  AND Nivel2 =" & cuenta.ToString.Substring(4, 4) & " AND Nivel3=" & cuenta.ToString.Substring(8, 4) & " AND Nivel4 >= 0000 and Id_Empresa = " & Me.lstCliente.SelectItem & "", True))
    '                Cta = Format(Cta).PadLeft(4, "0")
    '                Crear_cuenta(cuenta.ToString.Substring(0, 4), cuenta.ToString.Substring(4, 4), cuenta.ToString.Substring(8, 4),
    '                                  Cta, cuenta.Substring(0, 12) & Cta, Me.TablaImportar.Item(RFCE.Index, posicion).Value & " " & Me.TablaImportar.Item(NomEmisor.Index, posicion).Value,
    '                                  Me.lstCliente.SelectItem, Me.TablaImportar.Item(ContabilizacionC.Index, posicion).Value, Me.TablaImportar.Item(RFCE.Index, posicion).Value)
    '                Cta = cuenta.Substring(0, 12) & Cta
    '            ElseIf tipo = 2 Then
    '                Cta = Val(ObtenerValorDB("Catalogo_de_cuentas", "CASE WHEN max (Nivel2 ) + 1 IS NULL THEN 1 WHEN max (Nivel2 ) + 1 IS NOT NULL THEN   max (Nivel2 ) + 1 END AS C ", "  Nivel1 =" & cuenta.ToString.Substring(0, 4) & "  AND Nivel2 >= 0000 and Id_Empresa = " & Me.lstCliente.SelectItem & "", True))
    '                Cta = Format(Cta).PadLeft(4, "0")
    '                Crear_cuenta(cuenta.ToString.Substring(0, 4), Cta.ToString.Substring(0, 4), "0000",
    '                                 "0000", cuenta.Substring(0, 4) & Cta & "00000000", Me.TablaImportar.Item(RFCE.Index, posicion).Value & " " & Me.TablaImportar.Item(NomEmisor.Index, posicion).Value,
    '                                  Me.lstCliente.SelectItem, Me.TablaImportar.Item(ContabilizacionC.Index, posicion).Value, Me.TablaImportar.Item(RFCE.Index, posicion).Value)
    '                Cta = cuenta.Substring(0, 4) & Cta & "00000000"
    '            End If
    '        End If
    '        Return Cta
    '    End Function

    '    Private Sub Actualiza_Registro_Xml(ByVal carg As String, ByVal registro As Integer)
    '        Dim sql As String = " UPDATE dbo.xml_sat
    '                        SET Nombre_cuenta = '" & carg & "'
    '                        WHERE Id_Registro_Xml = " & registro & "  "
    '        If Eventos.Comando_sql(sql) > 0 Then
    '            Eventos.Insertar_usuariol("Carga", sql)
    '        End If

    '    End Sub
    '    Private Sub Actualiza_Registro_Xml_Comple(ByVal carg As String, ByVal registro As Integer)
    '        Dim sql As String = " UPDATE dbo.Xml_Complemento
    '                        SET Nombre_cuenta = '" & carg & "'
    '                        WHERE Id_Xml_Complemento = " & registro & "  "
    '        If Eventos.Comando_sql(sql) > 0 Then
    '            Eventos.Insertar_usuariol("Carga", sql)
    '        End If

    '    End Sub
    '    Private Function Buscar_Parametros(ByVal Cliente As Integer)
    '        RadMessageBox.SetThemeName("MaterialBlueGrey")
    '        Dim hacer As Boolean
    '        Dim sql As String = "SELECT  TasaC , TaseE ,  Tasa16,  IvaErogaciones,Contab_Elect  FROM dbo.Parametros_Clientes WHERE Id_Empresa = " & Cliente & " "
    '        Dim ds As DataSet = Eventos.Obtener_DS(sql)
    '        If ds.Tables(0).Rows.Count > 0 Then
    '            Me.lbl0.Text = IIf(IsDBNull(ds.Tables(0).Rows(0)("TasaC")) = True, "", ds.Tables(0).Rows(0)("TasaC"))
    '            Me.lble.Text = IIf(IsDBNull(ds.Tables(0).Rows(0)("TaseE")) = True, "", ds.Tables(0).Rows(0)("TaseE"))
    '            Me.lbl16.Text = IIf(IsDBNull(ds.Tables(0).Rows(0)("Tasa16")) = True, "", ds.Tables(0).Rows(0)("Tasa16"))
    '            Me.lblce.Text = IIf(IsDBNull(ds.Tables(0).Rows(0)("Contab_Elect")) = True, "", ds.Tables(0).Rows(0)("Contab_Elect"))
    '            hacer = True
    '        Else
    '            RadMessageBox.Show("No hay registros de parametros para la Empresa " & Me.lstCliente.SelectText & " ", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
    '            hacer = False
    '        End If
    '        Return hacer
    '    End Function
    '    Private Function BuscarcuentaRFC(ByVal RFC As String, ByVal cuenta As String, ByVal posicion As Integer)
    '        Dim Cta As String = ""
    '        Dim sql As String = "SELECT cuenta FROM Catalogo_de_Cuentas WHERE Nivel1='" & cuenta.Substring(0, 4) & "' AND Nivel2= '" & cuenta.Substring(4, 4) & "' AND Nivel3 = '" & cuenta.Substring(8, 4) & "' AND Nivel4 > 0 AND RFC = '" & RFC & "' and Id_Empresa = " & Me.lstCliente.SelectItem & " "
    '        Dim ds As DataSet = Eventos.Obtener_DS(sql)
    '        If ds.Tables(0).Rows.Count > 0 Then
    '            Cta = ds.Tables(0).Rows(0)(0)
    '        Else
    '            'No existe la cuenta y la inserta
    '            Cta = Val(ObtenerValorDB("Catalogo_de_cuentas", "max (Nivel4 ) + 1 ", "  Nivel1 =" & cuenta.ToString.Substring(0, 4) & "  AND Nivel2 =" & cuenta.ToString.Substring(4, 4) & " AND Nivel3=" & cuenta.ToString.Substring(8, 4) & " AND Nivel4 > 0 and Id_Empresa = " & Me.lstCliente.SelectItem & "", True))
    '            Cta = Format(Cta).PadLeft(4, "0")
    '            Crear_cuenta(cuenta.ToString.Substring(0, 4), cuenta.ToString.Substring(4, 4), cuenta.ToString.Substring(8, 4),
    '                                   Cta, cuenta.Substring(0, 12) & Cta, Me.TablaImportar.Item(RFCE.Index, posicion).Value & " " & Me.TablaImportar.Item(NomEmisor.Index, posicion).Value,
    '                                   Me.lstCliente.SelectItem, Me.TablaImportar.Item(ContabilizacionC.Index, posicion).Value, Me.TablaImportar.Item(RFCE.Index, posicion).Value)
    '            Cta = cuenta.Substring(0, 12) & Cta
    '        End If
    '        Return Cta
    '    End Function

    '    Private Function Leyenda(ByVal letra As String)
    '        Dim Concepto As String = ""
    '        Select Case letra
    '            Case "I"
    '                Concepto = "Ingres S/Fact"
    '            Case "IPC"
    '                Concepto = "I P/Cobrar F/"
    '        End Select
    '        Return Concepto
    '    End Function
    '    '****************************************** Codigo de las Devoluciones y descuentos 
    '    Private Sub CmdSalir2_Click(sender As Object, e As EventArgs) Handles CmdSalir2.Click
    '        Me.Close()
    '    End Sub

    '    Private Sub CmdLimpiaDev_Click(sender As Object, e As EventArgs) Handles CmdLimpiaDev.Click
    '        If Me.TablaD.Rows.Count > 0 Then
    '            LimpiaDev()
    '            Me.LstTextoDev.SelectText = ""
    '        End If
    '    End Sub
    '    Private Sub LimpiaDev()
    '        Me.TablaD.Rows.Clear()
    '    End Sub

    '    Private Sub CmdBuscarDev_Click(sender As Object, e As EventArgs) Handles CmdBuscarDev.Click
    '        RadMessageBox.SetThemeName("MaterialBlueGrey")
    '        activo = True
    '        LimpiaDev()
    '        If Me.lstCliente.SelectText <> "" Then
    '            If Buscar_Parametros(Me.lstCliente.SelectItem) = True Then
    '                Buscar_Devoluciones(Me.lstCliente.SelectItem, " and Fecha_Emision >= " & Eventos.Sql_hoy(Me.DtIniDev.Value) & " and Fecha_Emision <= " & Eventos.Sql_hoy(DtFinDev.Value) & "")
    '                Cargar_valores_contablesD()
    '                Color_ColumnasD()
    '                For i As Integer = 0 To Me.TablaD.Rows.Count - 1
    '                    Liberar_ProcesoDev(i)
    '                    Cargar_Pol_Modelo_Notas(Me.TablaD.Item(RFCED.Index, i).Value, Me.TablaD.Item(FechaED.Index, i).Value, i)
    '                Next
    '            End If
    '        Else
    '            RadMessageBox.Show("No se ha seleccionado una Empresa", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
    '        End If
    '        activo = False
    '    End Sub

    '    Private Sub Buscar_Devoluciones(ByVal Id_Empresa As Integer, ByVal periodo As String)
    '        RadMessageBox.SetThemeName("MaterialBlueGrey")
    '        Dim sql As String = " SELECT "
    '        sql &= " 	Id_Registro_Xml,	Verificado_Asoc,	Estado_SAT,	Version,	Tipo,	Fecha_Emision,"
    '        sql &= " 	Fecha_Timbrado,	EstadoPago,	FechaPago,	Serie,	Folio,	UUID,	UUID_Relacion,	RFC_Emisor,"
    '        sql &= " 	Nombre_Emisor,	LugarDeExpedicion,	RFC_Receptor,	Nombre_Receptor,	ResidenciaFiscal,	NumRegIdTrib,"
    '        sql &= " 	UsoCFDI,Retenido_IVA + Retenido_ISR  + Total -IVA_16 AS SubTotal,	Descuento,	Total_IEPS,	IVA_16,	Retenido_IVA,	Retenido_ISR,	ISH,	Total,"
    '        sql &= " 	TotalOriginal,	Total_Trasladados,	Total_Retenidos,	Total_LocalTrasladado,	Total_LocalRetenido,	Complemento,"
    '        sql &= " 	Moneda,	Tipo_De_Cambio,	Metodos_de_Pago.Descripcion,	FormaDePago,	NumCtaPago,	Condicion_de_Pago,	Conceptos,"
    '        sql &= " 	Combustible,	IEPS_3,	IEPS_6,	IEPS_7,	IEPS_8,	IEPS_9,	IEPS_26,	IEPS_30,	IEPS_53,	IEPS_160,"
    '        sql &= " 	Archivo_XML,	Direccion_Emisor,	Localidad_Emisor,	Direccion_Receptor,	Localidad_Receptor,	Autorizada,	Consecutivo_Carga,"
    '        sql &= " 	Id_Empresa,	Carga_Procesada,	ID_poliza,Letra_Sat,	Nombre_cuenta,	Xml_Sat.Clave,	Anio_Contable,	Mes_Contable,	Imp_Efectivo,	Cuenta_Efectivo,
    '	Imp_Transf,	Banco_Origen,	Cuenta_Origen,	Banco_Destino,Cuenta_Destino,	Fecha_Transaccion,	Imp_Cheque,
    '	Nom_Banco_Ch,	Cuenta_Origen_Ch,	No_Cheque,	Fecha_Ch, Cuenta_Cheques,	Cuenta_Bancos,	Provision_Acreedor,	Provision_Proveedor,
    '	Diferencia,	Tipo_Poliza,	Imp_Grabado,	Imp_Exento,	IVA_real,	Prc_Pago_Acumulado,	Total_Real,	Utilidad_Cambiaria,
    '	Perdida_Cambiaria,	Imp_Devolucion,	Cuenta_Devolucion 	,Numpol,	RIRS,	RIVA,Ajuste , Anticipos, Cta_Ajuste, Cta_Anticipos,Imp_Provision,Ser "
    '        sql &= " FROM dbo.Xml_Sat inner join Metodos_de_pago on Metodos_de_pago.clave = Xml_Sat.FormaDePago   where tipo = 'NotaCredito' and emitidas= " & Eventos.Bool2(True) & " and Id_Empresa =" & Id_Empresa & " and ID_poliza IS NULL AND  (Carga_Procesada =0	OR Carga_Procesada IS NULL) " & periodo & " "
    '        Dim ds As DataSet = Eventos.Obtener_DS(sql)
    '        If ds.Tables(0).Rows.Count > 0 Then
    '            Me.TablaD.RowCount = ds.Tables(0).Rows.Count
    '            Me.BarraD.Maximum = Me.TablaD.RowCount - 1
    '            Me.BarraD.Minimum = 0
    '            Me.BarraD.Value1 = 0
    '            Dim contab As DataSet = Eventos.Obtener_DS(" Select 'I' as Clave")
    '            If contab.Tables(0).Rows.Count > 0 Then
    '                If Me.LetraCd.Items.Count = 0 Then

    '                    For i As Integer = 0 To contab.Tables(0).Rows.Count - 1
    '                        Me.LetraCd.Items.Add(Trim(contab.Tables(0).Rows(i)("Clave")))
    '                    Next
    '                Else
    '                    Me.LetraCd.Items.Clear()
    '                    For i As Integer = 0 To contab.Tables(0).Rows.Count - 1
    '                        Me.LetraCd.Items.Add(Trim(contab.Tables(0).Rows(i)("Clave")))
    '                    Next
    '                End If
    '            End If
    '            Dim Tipo As DataSet = Eventos.Obtener_DS(" Select convert(NVARCHAR,Clave,103)  +' - ' + Nombre as Clave  from Tipos_Poliza_Sat INNER JOIN Tipo_Poliza ON Tipo_Poliza.Id_Tipo_poliza = Tipos_Poliza_Sat.Id_Tipo_poliza  where Id_Empresa= " & Me.lstCliente.SelectItem & " AND Tipos_Poliza_Sat.Id_Tipo_poliza IN (3,2)     ")
    '            If Tipo.Tables(0).Rows.Count > 0 Then
    '                If Me.TipPolD.Items.Count = 0 Then
    '                    For i As Integer = 0 To Tipo.Tables(0).Rows.Count - 1
    '                        Me.TipPolD.Items.Add(Trim(Tipo.Tables(0).Rows(i)("Clave")))
    '                    Next
    '                Else
    '                    Me.TipPolD.Items.Clear()
    '                    For i As Integer = 0 To Tipo.Tables(0).Rows.Count - 1
    '                        Me.TipPolD.Items.Add(Trim(Tipo.Tables(0).Rows(i)("Clave")))
    '                    Next
    '                End If
    '            End If
    '            Dim Series As DataSet = Eventos.Obtener_DS(" SELECT Serie FROM dbo.Series WHERE Id_Empresa = " & Me.lstCliente.SelectItem & " ")
    '            If Series.Tables(0).Rows.Count > 0 Then
    '                If Me.SerD.Items.Count = 0 Then
    '                    For i As Integer = 0 To Series.Tables(0).Rows.Count - 1
    '                        Me.SerD.Items.Add(Trim(Series.Tables(0).Rows(i)("Serie")))
    '                    Next
    '                Else
    '                    Me.SerD.Items.Clear()
    '                    For i As Integer = 0 To Series.Tables(0).Rows.Count - 1
    '                        Me.SerD.Items.Add(Trim(Series.Tables(0).Rows(i)("Serie")))
    '                    Next
    '                End If
    '            End If
    '            For j As Integer = 0 To ds.Tables(0).Rows.Count - 1
    '                Dim Fila As DataGridViewRow = Me.TablaD.Rows(j)
    '                Me.TablaD.Item(0, j).Value = False
    '                Me.TablaD.Item(IdDev.Index, j).Value = ds.Tables(0).Rows(j)("Id_Registro_Xml")
    '                Me.TablaD.Item(Tp.Index, j).Value = ds.Tables(0).Rows(j)("Tipo")
    '                Me.TablaD.Item(FechaED.Index, j).Value = ds.Tables(0).Rows(j)("Fecha_Emision")
    '                Me.TablaD.Item(UUIDD.Index, j).Value = ds.Tables(0).Rows(j)("UUID")
    '                Me.TablaD.Item(UcfdiD.Index, j).Value = ds.Tables(0).Rows(j)("UsoCFDI")
    '                Me.TablaD.Item(RFCED.Index, j).Value = ds.Tables(0).Rows(j)("RFC_Receptor")
    '                Me.TablaD.Item(NomEd.Index, j).Value = ds.Tables(0).Rows(j)("Nombre_Receptor")
    '                Me.TablaD.Item(ConDev.Index, j).Value = ds.Tables(0).Rows(j)("Conceptos")
    '                Me.TablaD.Item(MetoD.Index, j).Value = ds.Tables(0).Rows(j)("FormaDePago")
    '                Me.TablaD.Item(ForPD.Index, j).Value = Trim(ds.Tables(0).Rows(j)("Descripcion"))
    '                Me.TablaD.Item(SubD.Index, j).Value = ds.Tables(0).Rows(j)("SubTotal")
    '                Me.TablaD.Item(IvaD.Index, j).Value = ds.Tables(0).Rows(j)("IVA_16")
    '                Me.TablaD.Item(TotD.Index, j).Value = ds.Tables(0).Rows(j)("Total")

    '                Me.TablaD.Item(LetraSD.Index, j).Value = ds.Tables(0).Rows(j)("Letra_Sat")

    '                Me.TablaD.Item(NomCuentaD.Index, j).Value = ds.Tables(0).Rows(j)("Nombre_cuenta")
    '                Try
    '                    If Trim(ds.Tables(0).Rows(j)("Clave")) <> "" Then
    '                        Fila.Cells(LetraCd.Index).Value = Me.LetraCd.Items(Obtener_indexDV(Trim(ds.Tables(0).Rows(j)("Clave"))))
    '                    End If

    '                Catch ex As Exception

    '                End Try
    '                Dim year As String = ds.Tables(0).Rows(j)("Fecha_Emision").ToString.Substring(6, 4)
    '                Dim month As String = ds.Tables(0).Rows(j)("Fecha_Emision").ToString.Substring(3, 2)
    '                Me.TablaD.Item(AnioCD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Anio_Contable")) = True, year, ds.Tables(0).Rows(j)("Anio_Contable"))
    '                Me.TablaD.Item(MesCD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Mes_Contable")) = True, month, ds.Tables(0).Rows(j)("Mes_Contable"))
    '                Me.TablaD.Item(ImpED.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Efectivo")) = True, 0, ds.Tables(0).Rows(j)("Imp_Efectivo"))
    '                Me.TablaD.Item(CtaEfD.Index, j).Value = ds.Tables(0).Rows(j)("Cuenta_Efectivo")
    '                Me.TablaD.Item(ImpTD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Transf")) = True, 0, ds.Tables(0).Rows(j)("Imp_Transf"))


    '                Try
    '                    If Trim(ds.Tables(0).Rows(j)("Banco_Origen")) <> "" Then
    '                        Fila.Cells(BancoOd.Index).Value = Me.BancoOd.Items(Obtener_indexBDv(Trim(ds.Tables(0).Rows(j)("Banco_Origen"))))
    '                    End If
    '                Catch ex As Exception

    '                End Try

    '                Me.TablaD.Item(CtaOD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cuenta_Origen")) = True, "", ds.Tables(0).Rows(j)("Cuenta_Origen"))


    '                Try
    '                    If Trim(ds.Tables(0).Rows(j)("Banco_Destino")) <> "" Then
    '                        Fila.Cells(BancoDD.Index).Value = Me.BancoDD.Items(Obtener_indexdDv(Trim(ds.Tables(0).Rows(j)("Banco_Destino"))))
    '                    End If
    '                Catch ex As Exception

    '                End Try
    '                'Me.TablaImportar.Item(Bancodestino.Index, j).Value = ds.Tables(0).Rows(j)("Banco_Destino")

    '                Me.TablaD.Item(CtaDD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cuenta_Destino")) = True, "", ds.Tables(0).Rows(j)("Cuenta_Destino"))
    '                Me.TablaD.Item(FecTD.Index, j).Value = ds.Tables(0).Rows(j)("Fecha_Transaccion")
    '                Me.TablaD.Item(ImpCHD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Cheque")) = True, 0, ds.Tables(0).Rows(j)("Imp_Cheque"))

    '                Try
    '                    If Trim(ds.Tables(0).Rows(j)("Nom_Banco_Ch")) <> "" Then
    '                        Fila.Cells(NomBankCHD.Index).Value = Me.NomBankCHD.Items(Obtener_indexBDvBH(Trim(ds.Tables(0).Rows(j)("Nom_Banco_Ch"))))
    '                    End If
    '                Catch ex As Exception

    '                End Try
    '                'Me.TablaD.Item(NomBankCHD.Index, j).Value = ds.Tables(0).Rows(j)("Nom_Banco_Ch")
    '                Me.TablaD.Item(CtaOrigCHD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cuenta_Origen_Ch")) = True, "", ds.Tables(0).Rows(j)("Cuenta_Origen_Ch"))
    '                Me.TablaD.Item(NchD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("No_Cheque")) = True, "", ds.Tables(0).Rows(j)("No_Cheque"))
    '                Me.TablaD.Item(FcHd.Index, j).Value = ds.Tables(0).Rows(j)("Fecha_Ch")
    '                Me.TablaD.Item(CtaBancosD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cuenta_Bancos")) = True, "", ds.Tables(0).Rows(j)("Cuenta_Bancos"))
    '                Me.TablaD.Item(CtaChequeD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cuenta_Cheques")) = True, "", ds.Tables(0).Rows(j)("Cuenta_Cheques"))
    '                Me.TablaD.Item(ProvAD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Provision_Acreedor")) = True, 0, ds.Tables(0).Rows(j)("Provision_Acreedor"))
    '                Me.TablaD.Item(ProvPD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Provision_Proveedor")) = True, 0, ds.Tables(0).Rows(j)("Provision_Proveedor"))
    '                Me.TablaD.Item(DifD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Diferencia")) = True, 0, ds.Tables(0).Rows(j)("Diferencia"))

    '                Try
    '                    If Trim(ds.Tables(0).Rows(j)("Tipo_Poliza")) <> "" Then
    '                        Fila.Cells(TipPolD.Index).Value = Me.TipPolD.Items(Obtener_index2Dv(Trim(ds.Tables(0).Rows(j)("Tipo_Poliza"))))
    '                    End If

    '                Catch ex As Exception

    '                End Try
    '                Try
    '                    If Trim(ds.Tables(0).Rows(j)("Ser")) <> "" Then
    '                        Fila.Cells(SerD.Index).Value = Me.SerD.Items(Obtener_indexSerD(Trim(ds.Tables(0).Rows(j)("Ser"))))
    '                    End If

    '                Catch ex As Exception

    '                End Try
    '                '   Me.TablaImportar.Item(tipopoliza.INDEX, j).Value = ds.Tables(0).Rows(j)("Tipo_Poliza")
    '                Me.TablaD.Item(ImpGD.Index, j).Value = ds.Tables(0).Rows(j)("Imp_Grabado")
    '                Me.TablaD.Item(ImpEDV.Index, j).Value = ds.Tables(0).Rows(j)("Imp_Exento")
    '                Me.TablaD.Item(IVARD.Index, j).Value = ds.Tables(0).Rows(j)("IVA_real")
    '                Me.TablaD.Item(PACD.Index, j).Value = ds.Tables(0).Rows(j)("Prc_Pago_Acumulado")
    '                Me.TablaD.Item(TRD.Index, j).Value = ds.Tables(0).Rows(j)("Total_Real")
    '                Me.TablaD.Item(MD.Index, j).Value = ds.Tables(0).Rows(j)("Moneda")
    '                Me.TablaD.Item(UCD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Utilidad_Cambiaria")) = True, 0, ds.Tables(0).Rows(j)("Utilidad_Cambiaria"))
    '                Me.TablaD.Item(PCD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Perdida_Cambiaria")) = True, 0, ds.Tables(0).Rows(j)("Perdida_Cambiaria"))
    '                Me.TablaD.Item(ImpDevD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Devolucion")) = True, 0, ds.Tables(0).Rows(j)("Imp_Devolucion"))
    '                Me.TablaD.Item(CtaDevD.Index, j).Value = ds.Tables(0).Rows(j)("Cuenta_Devolucion")

    '                Me.TablaD.Item(NPolD.Index, j).Value = ds.Tables(0).Rows(j)("numpol")
    '                Me.TablaD.Item(RisrD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("RIRS")) = True, 0, ds.Tables(0).Rows(j)("RIRS"))
    '                Me.TablaD.Item(RIVAD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("RIVA")) = True, 0, ds.Tables(0).Rows(j)("RIVA"))


    '                'Ajutes y Anticipos
    '                Me.TablaD.Item(AntiD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Anticipos")) = True, 0, ds.Tables(0).Rows(j)("Anticipos"))
    '                Me.TablaD.Item(CtaAntiD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cta_Ajuste")) = True, "", ds.Tables(0).Rows(j)("Cta_Ajuste"))
    '                Me.TablaD.Item(AjusD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Ajuste")) = True, 0, ds.Tables(0).Rows(j)("Ajuste"))
    '                Me.TablaD.Item(CtaAD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cta_Anticipos")) = True, "", ds.Tables(0).Rows(j)("Cta_Anticipos"))
    '                Me.TablaD.Item(ImpPd.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Provision")) = True, 0, ds.Tables(0).Rows(j)("Imp_Provision"))
    '                Me.TablaD.Item(UIDr.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("UUID_Relacion")) = True, "", ds.Tables(0).Rows(j)("UUID_Relacion"))
    '                If Me.BarraD.Value1 = Me.BarraD.Maximum Then
    '                    Me.BarraD.Minimum = 0
    '                    Me.Cursor = Cursors.Arrow
    '                    RadMessageBox.Show("Movimientos Cargados ...", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
    '                    Me.BarraD.Value1 = 0
    '                Else
    '                    Me.BarraD.Value1 += 1
    '                End If
    '            Next
    '        Else
    '            RadMessageBox.Show("No hay registros para procesar", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
    '        End If



    '    End Sub
    '    Private Sub Cargar_valores_contablesD()
    '        If Me.TablaD.Rows.Count >= 1 Then
    '            For i As Integer = 0 To Me.TablaD.Rows.Count - 1
    '                If Trim(Me.TablaD.Item(TotD.Index, i).Value) <> "P" Then
    '                    If Trim(Me.TablaD.Item(MD.Index, i).Value.ToString) <> "USD" Then
    '                        If Me.TablaD.Item(TotD.Index, i).Value > 0 And Me.TablaD.Item(TotD.Index, i).Value <> Nothing Then
    '                            'importe gravado
    '                            Me.TablaD.Item(ImpGD.Index, i).Value = Math.Round(IIf(IsDBNull(Me.TablaD.Item(IvaD.Index, i).Value) = True, 0, Me.TablaD.Item(IvaD.Index, i).Value / 0.16), 2)
    '                            'importe exento
    '                            Me.TablaD.Item(ImpEDV.Index, i).Value = Math.Round(IIf(IsDBNull(Me.TablaD.Item(SubD.Index, i).Value) = True, 0, Me.TablaD.Item(SubD.Index, i).Value - Me.TablaD.Item(ImpGD.Index, i).Value), 2)
    '                            'Iva_real
    '                            Me.TablaD.Item(IVARD.Index, i).Value = Math.Round(IIf(IsDBNull(Me.TablaD.Item(ImpGD.Index, i).Value) = True, 0, Me.TablaD.Item(ImpGD.Index, i).Value * 0.16), 2)
    '                            'calcula el % Pago Acumulado
    '                            If Me.TablaD.Item(ImpEDV.Index, i).Value < 1 Then
    '                                Me.TablaD.Item(ImpGD.Index, i).Value = Me.TablaD.Item(ImpGD.Index, i).Value + Me.TablaD.Item(ImpEDV.Index, i).Value
    '                                Me.TablaD.Item(ImpEDV.Index, i).Value = 0
    '                            End If
    '                            'Total real
    '                            Me.TablaD.Item(TRD.Index, i).Value = Me.TablaD.Item(ImpGD.Index, i).Value + Me.TablaD.Item(ImpEDV.Index, i).Value + Me.TablaD.Item(IVARD.Index, i).Value
    '                        End If
    '                    Else
    '                        ' calcular en dolares
    '                        If Me.TablaD.Item(TotD.Index, i).Value > 0 And Me.TablaD.Item(TotD.Index, i).Value <> Nothing Then
    '                            'importe gravado
    '                            Me.TablaD.Item(ImpGD.Index, i).Value = Math.Round(IIf(IsDBNull(Me.TablaD.Item(IvaD.Index, i).Value) = True, 0, (Me.TablaD.Item(IvaD.Index, i).Value * Calcula_Moneda(Me.TablaD.Item(FechaED.Index, i).Value.ToString.Substring(0, 10))) / 0.16), 2)
    '                            'importe exento
    '                            Me.TablaD.Item(ImpEDV.Index, i).Value = Math.Round(IIf(IsDBNull(Me.TablaD.Item(SubD.Index, i).Value) = True, 0, (Me.TablaD.Item(SubD.Index, i).Value * Calcula_Moneda(Me.TablaD.Item(FechaED.Index, i).Value.ToString.Substring(0, 10))) - Me.TablaD.Item(ImpGD.Index, i).Value), 2)
    '                            'Iva_real
    '                            Me.TablaD.Item(IVARD.Index, i).Value = Math.Round(IIf(IsDBNull(Me.TablaD.Item(ImpGD.Index, i).Value) = True, 0, Me.TablaD.Item(ImpGD.Index, i).Value * 0.16), 2)
    '                            'calcula el % Pago Acumulado
    '                            'Total real
    '                            If Me.TablaD.Item(ImpEDV.Index, i).Value < 1 Then
    '                                Me.TablaD.Item(ImpGD.Index, i).Value = Me.TablaD.Item(ImpGD.Index, i).Value + Me.TablaD.Item(ImpEDV.Index, i).Value
    '                                Me.TablaD.Item(ImpEDV.Index, i).Value = 0
    '                            End If
    '                            Me.TablaD.Item(TRD.Index, i).Value = Me.TablaD.Item(ImpGD.Index, i).Value + Me.TablaD.Item(ImpEDV.Index, i).Value + Me.TablaD.Item(IVARD.Index, i).Value
    '                        End If

    '                    End If
    '                End If
    '            Next
    '        End If
    '    End Sub
    '    Private Sub Color_ColumnasD()
    '        Dim contador As Integer = 0
    '        For Each Column As DataGridViewColumn In TablaD.Columns
    '            If Column.Index = AnioCD.Index Or Column.Index = MesCD.Index Or Column.Index = BancoOd.Index Or Column.Index = BancoDD.Index Or Column.Index = FecTD.Index Or Column.Index = NomBankCHD.Index Or Column.Index = NchD.Index Or Column.Index = FcHd.Index Or Column.Index = ProvAD.Index Or Column.Index = ProvPD.Index Or Column.Index = UCD.Index Or Column.Index = PCD.Index Or Column.Index = ImpDevD.Index Or Column.Index = CtaDevD.Index Then
    '                Column.DefaultCellStyle.BackColor = Color.RoyalBlue
    '            ElseIf Column.Index = AjusD.Index Then
    '                Column.DefaultCellStyle.BackColor = Color.GreenYellow
    '            ElseIf Column.Index = AntiD.Index Then
    '                Column.DefaultCellStyle.BackColor = Color.LawnGreen
    '            ElseIf Column.Index = ImpPd.Index Then
    '                Column.DefaultCellStyle.BackColor = Color.MediumPurple
    '            ElseIf Column.Index = TipPolD.Index Or Column.Index = NPolD.Index Then
    '                Column.DefaultCellStyle.BackColor = Color.Orange
    '            ElseIf Column.Index = NomCuentaD.Index Or Column.Index = CtaBancosD.Index Then
    '                Column.DefaultCellStyle.BackColor = Color.Orange
    '            ElseIf Column.Index = ImpED.Index Or Column.Index = ImpTD.Index Or Column.Index = ImpCHD.Index Then
    '                Column.DefaultCellStyle.BackColor = Color.OliveDrab
    '            End If
    '        Next
    '    End Sub

    '    Private Sub CmdGuardarDev_Click(sender As Object, e As EventArgs) Handles CmdGuardarDev.Click
    '        Guardar_Dev()
    '    End Sub
    '    Private Sub Guardar_Dev()
    '        RadMessageBox.SetThemeName("MaterialBlueGrey")
    '        If Me.TablaD.Rows.Count >= 1 Then
    '            For i As Integer = 0 To Me.TablaD.Rows.Count - 1
    '                Dim tabla As String = ""
    '                If Me.TablaD.Item(2, i).Value = "P" Then
    '                    tabla = "Xml_Complemento"
    '                Else
    '                    tabla = "Xml_Sat"
    '                End If
    '                Guardar_XML(IIf(IsDBNull(Me.TablaD.Item(LetraSD.Index, i).Value), "", Me.TablaD.Item(LetraSD.Index, i).Value), IIf(IsDBNull(Me.TablaD.Item(NomCuentaD.Index, i).Value), "", Me.TablaD.Item(NomCuentaD.Index, i).Value), IIf(IsDBNull(Me.TablaD.Item(LetraCd.Index, i).Value), "", Me.TablaD.Item(LetraCd.Index, i).Value),
    '                           Me.TablaD.Item(AnioCD.Index, i).Value, Me.TablaD.Item(MesCD.Index, i).Value, Me.TablaD.Item(ImpED.Index, i).Value, IIf(IsDBNull(Me.TablaD.Item(CtaEfD.Index, i).Value), "", Me.TablaD.Item(CtaEfD.Index, i).Value),
    '                           Me.TablaD.Item(ImpTD.Index, i).Value, IIf(IsDBNull(Me.TablaD.Item(BancoOd.Index, i).Value), "", Me.TablaD.Item(BancoOd.Index, i).Value), IIf(IsDBNull(Me.TablaD.Item(CtaOD.Index, i).Value), "", Me.TablaD.Item(CtaOD.Index, i).Value), IIf(IsDBNull(Me.TablaD.Item(BancoDD.Index, i).Value), "", Me.TablaD.Item(BancoDD.Index, i).Value),
    '                           IIf(IsDBNull(Me.TablaD.Item(FecTD.Index, i).Value), "", Me.TablaD.Item(FecTD.Index, i).Value), Me.TablaD.Item(ImpCHD.Index, i).Value, IIf(IsDBNull(Me.TablaD.Item(NomBankCHD.Index, i).Value), "", Me.TablaD.Item(NomBankCHD.Index, i).Value), IIf(IsDBNull(Me.TablaD.Item(CtaOrigCHD.Index, i).Value), "", Me.TablaD.Item(CtaOrigCHD.Index, i).Value), IIf(IsDBNull(Me.TablaD.Item(NchD.Index, i).Value), "", Me.TablaD.Item(NchD.Index, i).Value),
    '                          IIf(IsDBNull(Me.TablaD.Item(FcHd.Index, i).Value), "", Me.TablaD.Item(FcHd.Index, i).Value), IIf(IsDBNull(Me.TablaD.Item(CtaBancosD.Index, i).Value), "", Me.TablaD.Item(CtaBancosD.Index, i).Value), IIf(IsDBNull(Me.TablaD.Item(ProvAD.Index, i).Value), 0, Me.TablaD.Item(ProvAD.Index, i).Value), IIf(IsDBNull(Me.TablaD.Item(ProvPD.Index, i).Value), 0, Me.TablaD.Item(ProvPD.Index, i).Value),
    '                           IIf(IsDBNull(Me.TablaD.Item(DifD.Index, i).Value), 0, Me.TablaD.Item(DifD.Index, i).Value), IIf(IsDBNull(Me.TablaD.Item(TipPolD.Index, i).Value), "", Me.TablaD.Item(TipPolD.Index, i).Value), IIf(IsDBNull(Me.TablaD.Item(ImpGD.Index, i).Value), 0, Me.TablaD.Item(ImpGD.Index, i).Value), IIf(IsDBNull(Me.TablaD.Item(ImpEDV.Index, i).Value), 0, Me.TablaD.Item(ImpEDV.Index, i).Value),
    '                         IIf(IsDBNull(Me.TablaD.Item(IVARD.Index, i).Value), 0, Me.TablaD.Item(IVARD.Index, i).Value), IIf(IsDBNull(Me.TablaD.Item(PACD.Index, i).Value), 0, Me.TablaD.Item(PACD.Index, i).Value), IIf(IsDBNull(Me.TablaD.Item(TRD.Index, i).Value), 0, Me.TablaD.Item(TRD.Index, i).Value), Me.TablaD.Item(UCD.Index, i).Value, IIf(IsDBNull(Me.TablaD.Item(PCD.Index, i).Value), 0, Me.TablaD.Item(PCD.Index, i).Value),
    '                           Me.TablaD.Item(ImpDevD.Index, i).Value, IIf(IsDBNull(Me.TablaD.Item(CtaDevD.Index, i).Value), "", Me.TablaD.Item(CtaDevD.Index, i).Value), Me.TablaD.Item(IdDev.Index, i).Value, IIf(IsDBNull(Me.TablaD.Item(NPolD.Index, i).Value), "", Me.TablaD.Item(NPolD.Index, i).Value), Me.TablaD.Item(RisrD.Index, i).Value, Me.TablaD.Item(RIVAD.Index, i).Value, tabla, IIf(IsDBNull(Me.TablaD.Item(CtaDD.Index, i).Value), "", Me.TablaD.Item(CtaDD.Index, i).Value),
    '                           IIf(IsDBNull(Me.TablaD.Item(AjusD.Index, i).Value), 0, Me.TablaD.Item(AjusD.Index, i).Value), IIf(IsDBNull(Me.TablaD.Item(CtaAD.Index, i).Value), "", Me.TablaD.Item(CtaAD.Index, i).Value),
    '                           IIf(IsDBNull(Me.TablaD.Item(AntiD.Index, i).Value), 0, Me.TablaD.Item(AntiD.Index, i).Value), IIf(IsDBNull(Me.TablaD.Item(CtaAntiD.Index, i).Value), "", Me.TablaD.Item(CtaAntiD.Index, i).Value),
    '                           IIf(IsDBNull(Me.TablaD.Item(ImpPd.Index, i).Value), 0, Me.TablaD.Item(ImpPd.Index, i).Value), "", 0, "", "", "", "", "", "", "", IIf(IsDBNull(Me.TablaD.Item(SerD.Index, i).Value), "", Me.TablaD.Item(SerD.Index, i).Value), "", "", IIf(IsDBNull(Me.TablaD.Item(CtaChequeD.Index, i).Value), "", Me.TablaD.Item(CtaChequeD.Index, i).Value))
    '            Next
    '            RadMessageBox.Show("Proceso Guardado Completado ...", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
    '        End If
    '    End Sub

    '    Private Sub CmdProcesoDev_Click(sender As Object, e As EventArgs) Handles CmdProcesoDev.Click
    '        If Me.TablaD.Rows.Count > 0 Then
    '            If Me.lstCliente.SelectText <> "" Then
    '                If Verifica_catalogo_cliente(Me.lstCliente.SelectItem) = True Then
    '                    Guardar_Dev()
    '                    If MessageBox.Show("El cliente " & Me.lstCliente.SelectText & " es correcto?", Eventos.titulo_app, MessageBoxButtons.YesNo, MessageBoxIcon.Question) = Windows.Forms.DialogResult.Yes Then
    '                        Me.BarraD.Maximum = Me.TablaD.RowCount - 1
    '                        Me.BarraD.Minimum = 0
    '                        Me.BarraD.Value1 = 0

    '                        For p As Integer = 0 To Me.TablaD.RowCount - 1
    '                            If Me.TablaD.Item(AplD.Index, p).Value = True Then ' se paso todos los filtros de creacion
    '                                Codificar_polizasDev(p)
    '                            End If
    '                            If Me.BarraD.Value1 = Me.BarraD.Maximum Then
    '                                Me.BarraD.Minimum = 0
    '                                Me.Cursor = Cursors.Arrow
    '                                MessageBox.Show("Proceso Terminado", Eventos.titulo_app, MessageBoxButtons.OK, MessageBoxIcon.Information)
    '                                Me.BarraD.Value1 = 0
    '                            Else
    '                                Me.BarraD.Value1 += 1
    '                            End If
    '                        Next
    '                    End If
    '                Else
    '                    RadMessageBox.Show("No existe Catalogo de cuentas para: " & Me.lstCliente.SelectText & "", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
    '                End If
    '                Me.CmdBuscarDev.PerformClick()
    '            Else
    '                RadMessageBox.Show("No se ha seleccionado una Empresa", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
    '            End If



    '        Else
    '            RadMessageBox.Show("No se ha Importado ningun archivo", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
    '        End If
    '    End Sub
    '    Private Sub Codificar_polizasDev(ByVal posicion As Integer)
    '        Dim poliza_Sistema As String = ""
    '        '  If Me.TablaImportar.Item(Psistema.Index, posicion).Value <> "" Then ' quitar linea despues del desbloqueo
    '        poliza_Sistema = Calcula_polizaD(posicion)
    '        '  End If

    '        'Calcular consecutivo poliza
    '        Dim posi As Integer = InStr(1, poliza_Sistema, "-", CompareMethod.Binary)
    '        Dim cuantos As Integer = Len(poliza_Sistema) - Len(poliza_Sistema.Substring(0, posi))
    '        Dim consecutivo As Integer = Val(poliza_Sistema.Substring(posi, cuantos))
    '        'Crear poliza
    '        'Checar dia de la Poliza poner if
    '        Dim dia As String = ""
    '        If Me.TablaD.Item(ImpTD.Index, posicion).Value > 0 Then
    '            dia = Me.TablaD.Item(FecTD.Index, posicion).Value.ToString.Substring(0, 2)
    '        ElseIf Me.TablaD.Item(ImpED.Index, posicion).Value > 0 Then
    '            dia = Me.TablaD.Item(FechaED.Index, posicion).Value.ToString.Substring(0, 2)
    '        ElseIf Me.TablaD.Item(ImpCHD.Index, posicion).Value > 0 Then
    '            dia = Me.TablaD.Item(FcHd.Index, posicion).Value.ToString.Substring(0, 2)
    '        Else
    '            dia = Me.TablaD.Item(FechaED.Index, posicion).Value.ToString.Substring(0, 2)
    '        End If

    '        ' CREAR iF para calcular el dia
    '        If Creapoliza(poliza_Sistema, Me.TablaD.Item(AnioCD.Index, posicion).Value, Me.TablaD.Item(MesCD.Index, posicion).Value, dia,
    '                   consecutivo, Checa_tipo(Me.TablaD.Item(TipPolD.Index, posicion).Value, Me.lstCliente.SelectItem),
    '                   Me.TablaD.Item(FechaED.Index, posicion).Value, "Nta Cred Fact" & " " & Trim(Me.TablaD.Item(UUIDD.Index, posicion).Value), "Carga", Me.TablaD.Item(NPolD.Index, posicion).Value, Me.TablaD.Item(IdDev.Index, posicion).Value, False) = True Then



    '            If Buscafactura(Me.TablaD.Item(UUIDD.Index, posicion).Value, "C") = True Then
    '                'Se inserta la Factura
    '                Inserta_Comprobante_Fiscal(poliza_Sistema, Me.TablaD.Item(AnioCD.Index, posicion).Value, Me.TablaD.Item(MesCD.Index, posicion).Value,
    '                             Me.TablaD.Item(RFCED.Index, posicion).Value, Me.TablaD.Item(FechaED.Index, posicion).Value,
    '                               Me.TablaD.Item(UUIDD.Index, posicion).Value, "Factura " & Trim(Me.TablaD.Item(RFCED.Index, posicion).Value) & " C", Me.TablaD.Item(TRD.Index, posicion).Value)
    '            Else
    '                'Se Edita la Factura
    '                Edita_Factura(Me.TablaD.Item(UUIDD.Index, posicion).Value, "C", poliza_Sistema)
    '            End If


    '            If Me.TablaD.Item(ImpED.Index, posicion).Value > 0 Then
    '                ' Insertar registro contabiidad electronica efectivo
    '                Inserta_Comprobante_Fiscal_Efectivo(poliza_Sistema, Me.TablaD.Item(AnioCD.Index, posicion).Value, Me.TablaD.Item(MesCD.Index, posicion).Value,
    '                                Me.TablaD.Item(RFCED.Index, posicion).Value, Me.TablaD.Item(TipPolD.Index, posicion).Value.ToString.Substring(0, 3), Me.TablaD.Item(FechaED.Index, posicion).Value,
    '                              "", "", "", "", Me.TablaD.Item(ImpED.Index, posicion).Value)
    '            End If
    '            If Trim(UCase(Me.lblce.Text)) = "TRUE" Then ' SE INSERTA CONTABILIDAD ELECTRONICA

    '                If Me.TablaD.Item(ImpTD.Index, posicion).Value > 0 Then


    '                    Inserta_Comprobante_Fiscal_Transf(poliza_Sistema, Me.TablaD.Item(AnioCD.Index, posicion).Value, Me.TablaD.Item(MesCD.Index, posicion).Value,
    '                                    Me.TablaD.Item(RFCED.Index, posicion).Value, Me.TablaD.Item(TipPolD.Index, posicion).Value.ToString.Substring(0, 3), Me.TablaD.Item(FecTD.Index, posicion).Value,
    '                                  "", "", "", Me.TablaD.Item(UUIDD.Index, posicion).Value, Me.TablaD.Item(ImpTD.Index, posicion).Value, "", Me.TablaD.Item(CtaBancosD.Index, posicion).Value)
    '                End If

    '                If Me.TablaD.Item(ImpCHD.Index, posicion).Value > 0 Then

    '                    Inserta_Comprobante_Fiscal_Cheque(poliza_Sistema, Me.TablaD.Item(AnioCD.Index, posicion).Value, Me.TablaD.Item(MesCD.Index, posicion).Value,
    '                                    Me.TablaD.Item(RFCED.Index, posicion).Value, Me.TablaD.Item(TipPolD.Index, posicion).Value.ToString.Substring(0, 3), Me.TablaD.Item(FcHd.Index, posicion).Value,
    '                                  Me.TablaD.Item(NchD.Index, posicion).Value, "", Me.TablaD.Item(CtaOrigCHD.Index, posicion).Value, Me.TablaD.Item(UUIDD.Index, posicion).Value, Me.TablaD.Item(ImpCHD.Index, posicion).Value)
    '                End If
    '            End If

    '            'Verificara el sistema las polizas automatizadas
    '            Crear_detalleDev(posicion, poliza_Sistema)
    '        End If
    '    End Sub


    '    Private Sub Crear_detalleDev(ByVal p As Integer, ByVal pol As String)
    '        Dim Item As Integer = 1
    '        Dim cadena As String = Trim(Me.TablaD.Item(NomCuentaD.Index, p).Value)
    '        Dim posi As Integer = InStr(1, cadena, "-", CompareMethod.Binary)
    '        Dim cuantos As Integer = Len(cadena) - Len(cadena.Substring(0, posi))
    '        Dim Cuenta_Cargo As String = cadena.Substring(posi, cuantos)
    '        Dim Cuenta2 As String = ""
    '        Dim PorcenPro, ImpGpro, ImpEpro, ImpIvaP As Decimal
    '        PorcenPro = Me.TablaD.Item(ImpPd.Index, p).Value / ImpFaCURA(Me.TablaD.Item(UUIDD.Index, p).Value, "Total_Real")
    '        ImpGpro = ImpFaCURA(Me.TablaD.Item(UUIDD.Index, p).Value, "Imp_Grabado") * PorcenPro
    '        ImpEpro = ImpFaCURA(Me.TablaD.Item(UUIDD.Index, p).Value, "Imp_Exento") * PorcenPro
    '        ImpIvaP = ImpFaCURA(Me.TablaD.Item(UUIDD.Index, p).Value, "IVA_real") * PorcenPro
    '        If Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value = "I" Then

    '            If Me.TablaD.Item(ImpEDV.Index, p).Value > 0 And Me.TablaD.Item(ImpGD.Index, p).Value > 0 And Me.TablaD.Item(IVARD.Index, p).Value > 0 Then ' tiene grabado y exento

    '                Cuenta2 = RegresaCunetaDev(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "DevSVentasEx", Me.TablaD.Item(SerD.Index, p).Value), Trim(Me.TablaD.Item(RFCED.Index, p).Value), p, 1)
    '                Cuenta_Cargo = RegresaCunetaDev(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "DevSVentasG", Me.TablaD.Item(SerD.Index, p).Value), Trim(Me.TablaD.Item(RFCED.Index, p).Value), p, 1)
    '                Crea_detalle_poliza(pol, Item, Me.TablaD.Item(ImpGD.Index, p).Value, 0, Cuenta_Cargo, "")
    '                Item = Item + 1
    '                Crea_detalle_poliza(pol, Item, Me.TablaD.Item(ImpEDV.Index, p).Value, 0, Cuenta2, "")
    '                Item = Item + 1
    '                Crea_detalle_poliza(pol, Item, Me.TablaD.Item(IVARD.Index, p).Value, 0, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "IvaSDev", Me.TablaD.Item(SerD.Index, p).Value), "")
    '                ' Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(IVAR.Index, p).Value - ImpIvaPr, "2080000100010000", "")
    '                Item = Item + 1

    '            ElseIf Me.TablaD.Item(ImpEDV.Index, p).Value > 0 And Me.TablaD.Item(ImpGD.Index, p).Value <= 0 Then 'Tiene Exento o 0

    '                Cuenta_Cargo = RegresaCunetaDev(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "DevSVentasEx", Me.TablaImportar.Item(SerD.Index, p).Value), Trim(Me.TablaD.Item(RFCED.Index, p).Value), p, 1)
    '                Crea_detalle_poliza(pol, Item, Me.TablaD.Item(ImpEDV.Index, p).Value, 0, Cuenta_Cargo, "")
    '                Item = Item + 1

    '            ElseIf Me.TablaD.Item(ImpEDV.Index, p).Value <= 0 And Me.TablaD.Item(ImpGD.Index, p).Value > 0 Then 'Tiene Grabado

    '                Cuenta_Cargo = RegresaCunetaDev(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "DevSVentasG", Me.TablaD.Item(SerD.Index, p).Value), Trim(Me.TablaD.Item(RFCED.Index, p).Value), p, 1)
    '                Crea_detalle_poliza(pol, Item, Me.TablaD.Item(ImpGD.Index, p).Value, 0, Cuenta_Cargo, "")
    '                Item = Item + 1
    '                Crea_detalle_poliza(pol, Item, Me.TablaD.Item(IVARD.Index, p).Value, 0, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "IvaSDev", Me.TablaD.Item(SerD.Index, p).Value), "")
    '                ' Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(IVAR.Index, p).Value - ImpIvaPr, "2080000100010000", "")
    '                Item = Item + 1

    '            End If
    '            'Abonos con cuentas efectivo bancos


    '        End If

    '        'Cargos con cuentas efectivo bancos
    '        If Me.TablaD.Item(ImpED.Index, p).Value > 0 And Me.TablaD.Item(ImpTD.Index, p).Value > 0 And Me.TablaD.Item(ImpCHD.Index, p).Value > 0 Then 'TODOS

    '            cadena = Trim(Me.TablaD.Item(CtaEfD.Index, p).Value)
    '            posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '            Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '            Crea_detalle_poliza(pol, Item, 0, Me.TablaD.Item(ImpED.Index, p).Value, Cuenta_Cargo, "")

    '            Item = Item + 1

    '            cadena = Trim(Me.TablaD.Item(CtaBancosD.Index, p).Value)
    '            posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '            Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '            Crea_detalle_poliza(pol, Item, 0, Me.TablaD.Item(ImpTD.Index, p).Value, Cuenta_Cargo, "")

    '            Item = Item + 1
    '            cadena = Trim(Me.TablaD.Item(CtaBancosD.Index, p).Value)
    '            posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '            Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '            Crea_detalle_poliza(pol, Item, 0, Me.TablaD.Item(ImpCHD.Index, p).Value, Cuenta_Cargo, Me.TablaD.Item(NchD.Index, p).Value)


    '        ElseIf Me.TablaD.Item(ImpED.Index, p).Value > 0 And Me.TablaD.Item(ImpTD.Index, p).Value > 0 And Me.TablaD.Item(ImpCHD.Index, p).Value = 0 Then 'Efectivo y Transferencia
    '            cadena = Trim(Me.TablaD.Item(CtaEfD.Index, p).Value)
    '            posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '            Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '            Crea_detalle_poliza(pol, Item, 0, Me.TablaD.Item(ImpED.Index, p).Value, Cuenta_Cargo, "")
    '            Item = Item + 1
    '            cadena = Trim(Me.TablaD.Item(CtaBancosD.Index, p).Value)
    '            posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '            Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '            Crea_detalle_poliza(pol, Item, 0, Me.TablaD.Item(ImpTD.Index, p).Value, Cuenta_Cargo, "")

    '        ElseIf Me.TablaD.Item(ImpED.Index, p).Value = 0 And Me.TablaD.Item(ImpTD.Index, p).Value > 0 And Me.TablaD.Item(ImpCHD.Index, p).Value > 0 Then 'Cheque y Transferencia

    '            cadena = Trim(Me.TablaD.Item(CtaBancosD.Index, p).Value)
    '            posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '            Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '            Crea_detalle_poliza(pol, Item, 0, Me.TablaD.Item(ImpTD.Index, p).Value, Cuenta_Cargo, "")
    '            Item = Item + 1
    '            cadena = Trim(Me.TablaD.Item(CtaBancosD.Index, p).Value)
    '            posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '            Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '            Crea_detalle_poliza(pol, Item, 0, Me.TablaD.Item(ImpCHD.Index, p).Value, Cuenta_Cargo, Me.TablaD.Item(NchD.Index, p).Value)

    '        ElseIf Me.TablaD.Item(ImpED.Index, p).Value > 0 And Me.TablaD.Item(ImpTD.Index, p).Value = 0 And Me.TablaD.Item(ImpCHD.Index, p).Value > 0 Then 'Cheque y Efecivo
    '            cadena = Trim(Me.TablaD.Item(CtaEfD.Index, p).Value)
    '            posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '            Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '            Crea_detalle_poliza(pol, Item, 0, Me.TablaD.Item(ImpED.Index, p).Value, Cuenta_Cargo, "")
    '            Item = Item + 1
    '            cadena = Trim(Me.TablaD.Item(CtaBancosD.Index, p).Value)
    '            posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '            Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '            Crea_detalle_poliza(pol, Item, 0, Me.TablaD.Item(ImpCHD.Index, p).Value, Cuenta_Cargo, Me.TablaD.Item(NchD.Index, p).Value)
    '        ElseIf Me.TablaD.Item(ImpED.Index, p).Value > 0 And Me.TablaD.Item(ImpTD.Index, p).Value = 0 And Me.TablaD.Item(ImpCHD.Index, p).Value = 0 Then ' Efecivo
    '            'Cuenta del Abono
    '            cadena = Trim(Me.TablaD.Item(CtaEfD.Index, p).Value)
    '            posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '            Cuenta_Cargo = cadena.Substring(posi, cuantos)

    '            Crea_detalle_poliza(pol, Item, 0, Me.TablaD.Item(ImpED.Index, p).Value, Cuenta_Cargo, "")

    '        ElseIf Me.TablaD.Item(ImpED.Index, p).Value = 0 And Me.TablaD.Item(ImpTD.Index, p).Value > 0 And Me.TablaD.Item(ImpCHD.Index, p).Value = 0 Then ' Transferencia
    '            'Cuenta del Abono transferencia
    '            cadena = Trim(Me.TablaD.Item(CtaBancosD.Index, p).Value)
    '            posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '            Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '            Crea_detalle_poliza(pol, Item, 0, Me.TablaD.Item(ImpTD.Index, p).Value, Cuenta_Cargo, IIf(IsDBNull(Me.TablaD.Item(NchD.Index, p).Value) = True, "", Me.TablaD.Item(NchD.Index, p).Value))

    '        ElseIf Me.TablaD.Item(ImpED.Index, p).Value = 0 And Me.TablaD.Item(ImpTD.Index, p).Value = 0 And Me.TablaD.Item(ImpCHD.Index, p).Value > 0 Then 'Cheque 
    '            cadena = Trim(Me.TablaD.Item(CtaBancosD.Index, p).Value)
    '            posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '            Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '            Crea_detalle_poliza(pol, Item, 0, Me.TablaD.Item(ImpCHD.Index, p).Value, Cuenta_Cargo, Me.TablaD.Item(NchD.Index, p).Value)

    '        End If
    '        'Inserta Anticipo
    '        If Me.TablaD.Item(AntiD.Index, p).Value > 0 Then ' Se verifica si cuenta con anticipos +
    '            Item = Item + 1
    '            cadena = Trim(Me.TablaD.Item(CtaAntiD.Index, p).Value)
    '            posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '            Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '            Crea_detalle_poliza(pol, Item, Me.TablaD.Item(AntiD.Index, p).Value, 0, Cuenta_Cargo, "")
    '        ElseIf Me.TablaD.Item(AntiD.Index, p).Value < 0 Then ' Se verifica si cuenta  anticipos -
    '            Item = Item + 1
    '            cadena = Trim(Me.TablaD.Item(CtaAntiD.Index, p).Value)
    '            posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '            Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '            Crea_detalle_poliza(pol, Item, 0, Me.TablaD.Item(AntiD.Index, p).Value * -1, Cuenta_Cargo, "")
    '        End If
    '        'Inserta Ajustes
    '        If Me.TablaD.Item(AjusD.Index, p).Value > 0 Then ' Se verifica si cuenta con ajuste +
    '            Item = Item + 1
    '            cadena = Trim(Me.TablaD.Item(CtaAD.Index, p).Value)
    '            posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '            Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '            'cargo de Ajuste
    '            Crea_detalle_poliza(pol, Item, Me.TablaD.Item(AjusD.Index, p).Value, 0, Cuenta_Cargo, "")

    '        ElseIf Me.TablaD.Item(AjusD.Index, p).Value < 0 Then ' Se verifica si cuenta con ajuste -
    '            Item = Item + 1
    '            cadena = Trim(Me.TablaD.Item(CtaAD.Index, p).Value)
    '            posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '            Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '            'Abono de Ajuste
    '            Crea_detalle_poliza(pol, Item, 0, Me.TablaD.Item(AjusD.Index, p).Value * -1, Cuenta_Cargo, "")
    '        End If
    '        If Me.TablaD.Item(PCD.Index, p).Value > 0 Then ' Se perdida cambiaria
    '            Item = Item + 1
    '            Crea_detalle_poliza(pol, Item, Me.TablaD.Item(PCD.Index, p).Value, 0, "7010000100000000", "")
    '        End If
    '        If Me.TablaD.Item(UCD.Index, p).Value > 0 Then ' Se utilidad cambiaria
    '            Item = Item + 1
    '            Crea_detalle_poliza(pol, Item, 0, Me.TablaD.Item(UCD.Index, p).Value, "7020000100000000", "")
    '        End If



    '        If Trim(Me.TablaD.Item(ImpPd.Index, p).Value) > 0 Then ' Compras  


    '            Item = Item + 1
    '            'Cancela Cuenta Cliente
    '            Cuenta_Cargo = RegresaCunetaDev(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "Clientes", Me.TablaD.Item(SerD.Index, p).Value), Trim(Me.TablaD.Item(RFCED.Index, p).Value), p, 1)
    '            Crea_detalle_poliza(pol, Item, 0, Me.TablaD.Item(ImpPd.Index, p).Value, Cuenta_Cargo, "")


    '            Item = Item + 1
    '            If ImpEpro > 0 And ImpGpro > 0 Then ' tiene grabado y exento
    '                'cargos
    '                Cuenta_Cargo = RegresaCunetaDev(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCG", Me.TablaD.Item(SerD.Index, p).Value), Trim(Me.TablaD.Item(RFCED.Index, p).Value), p, 1)
    '                Crea_detalle_poliza(pol, Item, ImpGpro, 0, Cuenta_Cargo, "")
    '                Item = Item + 1
    '                Cuenta_Cargo = RegresaCunetaDev(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCE", Me.TablaD.Item(SerD.Index, p).Value), Trim(Me.TablaD.Item(RFCED.Index, p).Value), p, 1)
    '                Crea_detalle_poliza(pol, Item, ImpEpro, 0, Cuenta_Cargo, "")
    '                Item = Item + 1


    '                Crea_detalle_poliza(pol, Item, ImpIvaP, 0, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "IVAPTras", Me.TablaD.Item(SerD.Index, p).Value), "")

    '                Item = Item + 1


    '                Cuenta_Cargo = RegresaCunetaDev(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngG", Me.TablaD.Item(SerD.Index, p).Value), Trim(Me.TablaD.Item(RFCED.Index, p).Value), p, 1)
    '                Crea_detalle_poliza(pol, Item, 0, ImpGpro, Cuenta_Cargo, "")
    '                Item = Item + 1
    '                Cuenta_Cargo = RegresaCunetaDev(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngE", Me.TablaD.Item(SerD.Index, p).Value), Trim(Me.TablaD.Item(RFCED.Index, p).Value), p, 1)
    '                Crea_detalle_poliza(pol, Item, 0, ImpEpro, Cuenta_Cargo, "")
    '                Item = Item + 1
    '                Crea_detalle_poliza(pol, Item, 0, ImpIvaP, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "IVATras", Me.TablaD.Item(SerD.Index, p).Value), "")

    '                Item = Item + 1

    '            ElseIf ImpEpro > 0 And ImpGpro <= 0 And ImpIvaP = 0 Then 'Tiene Cero
    '                Cuenta_Cargo = RegresaCunetaDev(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCC", Me.TablaD.Item(SerD.Index, p).Value), Trim(Me.TablaD.Item(RFCED.Index, p).Value), p, 1)
    '                Crea_detalle_poliza(pol, Item, ImpEpro, 0, Cuenta_Cargo, "")
    '                Item = Item + 1
    '                Cuenta_Cargo = RegresaCunetaDev(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCC", Me.TablaD.Item(SerD.Index, p).Value), Trim(Me.TablaD.Item(RFCED.Index, p).Value), p, 1)
    '                Crea_detalle_poliza(pol, Item, 0, ImpEpro, Cuenta_Cargo, "")
    '                Item = Item + 1
    '            ElseIf ImpEpro > 0 And ImpGpro <= 0 And ImpIvaP = 0 Then 'Tiene Exento
    '                Cuenta_Cargo = RegresaCunetaDev(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCE", Me.TablaD.Item(SerD.Index, p).Value), Trim(Me.TablaD.Item(RFCED.Index, p).Value), p, 1)
    '                Crea_detalle_poliza(pol, Item, ImpEpro, 0, Cuenta_Cargo, "")
    '                Item = Item + 1
    '                Cuenta_Cargo = RegresaCunetaDev(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCE", Me.TablaD.Item(SerD.Index, p).Value), Trim(Me.TablaD.Item(RFCED.Index, p).Value), p, 1)
    '                Crea_detalle_poliza(pol, Item, 0, ImpEpro, Cuenta_Cargo, "")
    '                Item = Item + 1
    '            ElseIf ImpEpro <= 0 And ImpGpro > 0 Then 'Tiene Grabado
    '                'cargos

    '                Cuenta_Cargo = RegresaCunetaDev(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCG", Me.TablaD.Item(SerD.Index, p).Value), Trim(Me.TablaD.Item(RFCED.Index, p).Value), p, 1)
    '                Crea_detalle_poliza(pol, Item, ImpGpro, 0, Cuenta_Cargo, "")
    '                Item = Item + 1


    '                Crea_detalle_poliza(pol, Item, ImpIvaP, 0, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "IVAPTras", Me.TablaD.Item(SerD.Index, p).Value), "")

    '                Item = Item + 1


    '                Cuenta_Cargo = RegresaCunetaDev(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngG", Me.TablaD.Item(SerD.Index, p).Value), Trim(Me.TablaD.Item(RFCED.Index, p).Value), p, 1)
    '                Crea_detalle_poliza(pol, Item, 0, ImpGpro, Cuenta_Cargo, "")
    '                Item = Item + 1


    '                Crea_detalle_poliza(pol, Item, 0, ImpIvaP, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "IVATras", Me.TablaD.Item(SerD.Index, p).Value), "")

    '                Item = Item + 1



    '            End If

    '        End If

    '        Exit Sub
    '    End Sub

    '    Private Function LetraFactura(ByVal uuid As String)
    '        Dim letra As String
    '        Dim ds As DataSet = Eventos.Obtener_DS("SELECT clave,Total_Real FROM dbo.Xml_Sat WHERE UUID = '" & uuid & "' and Tipo ='Factura' AND Id_Empresa = " & Me.lstCliente.SelectItem & "")
    '        If ds.Tables(0).Rows.Count > 0 Then
    '            letra = ds.Tables(0).Rows(0)("clave")
    '        Else
    '            letra = ""
    '        End If
    '        Return Trim(letra)
    '    End Function
    '    Private Function ImpFaCURA(ByVal uuid As String, ByVal CAMPO As String)
    '        Dim iMP As Decimal
    '        Dim ds As DataSet = Eventos.Obtener_DS("SELECT " & CAMPO & " FROM dbo.Xml_Sat WHERE UUID = '" & uuid & "' AND Id_Empresa = " & Me.lstCliente.SelectItem & "")
    '        If ds.Tables(0).Rows.Count > 0 Then
    '            iMP = IIf(IsDBNull(ds.Tables(0).Rows(0)(0)) = True, 0, ds.Tables(0).Rows(0)(0))
    '        Else
    '            iMP = 0
    '        End If
    '        Return iMP
    '    End Function
    '    Private Sub TablaD_CellClick(sender As Object, e As DataGridViewCellEventArgs) Handles TablaD.CellClick

    '        Dim columna As Integer = Me.TablaD.CurrentCell.ColumnIndex
    '        Dim Nombre As String
    '        Nombre = Me.TablaD.Columns.Item(Me.TablaD.CurrentCell.ColumnIndex).Name.ToString
    '        Me.LstTextoDev.Cargar(" Select '','' ")

    '        Select Case Nombre
    '            Case "LetraCd"
    '                Me.LstTextoDev.Cargar(" Select id_Contabilidad, rtrim(Clave) as Clave from Letras_Contabilidad where Id_Empresa = " & Me.lstCliente.SelectItem & " ")
    '                Me.LstTextoDev.SelectText = ""
    '            Case "CtaEfD"
    '                Me.LstTextoDev.Cargar(" Select Id_cat_cuentas, rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1010' and Nivel2 > 0 and Nivel3 > 0 ")
    '                Me.LstTextoDev.SelectText = ""
    '            Case "CtaBancosD"
    '                Me.LstTextoDev.Cargar(" Select Id_cat_cuentas, rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1020'and Nivel2 > 0 and Nivel3 > 0  ")
    '                Me.LstTextoDev.SelectText = ""
    '            Case "NomBankCHD"
    '                Me.LstTextoDev.Cargar("select Id_Bancos_Clientes,Alias from Bancos_Clientes where Id_Empresa = " & Me.lstCliente.SelectItem & " and alias like '%Cheq%'")
    '                Me.LstTextoDev.SelectText = ""
    '            Case "BancoOd"
    '                Me.LstTextoDev.Cargar(" select Id_Bancos_Clientes,Alias from Bancos_Clientes where Id_Empresa = " & Me.lstCliente.SelectItem & " and alias like '%Transf%'")
    '                Me.LstTextoDev.SelectText = ""
    '            Case "TipPolD"
    '                Me.LstTextoDev.Cargar(" Select convert(NVARCHAR,Clave,103)  +' - ' + Nombre as Clave, convert(NVARCHAR,Clave,103)  +' - ' + Nombre as Clave  from Tipos_Poliza_Sat INNER JOIN Tipo_Poliza ON Tipo_Poliza.Id_Tipo_poliza = Tipos_Poliza_Sat.Id_Tipo_poliza  where Id_Empresa= " & Me.lstCliente.SelectItem & "  ")
    '                Me.LstTextoDev.SelectText = ""
    '            Case "CtaAD"
    '                Me.LstTextoDev.Cargar("Select  Id_cat_cuentas,  rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " ")
    '                Me.LstTexto.SelectText = ""
    '            Case "CtaAntiD"
    '                Me.LstTextoDev.Cargar("Select Id_cat_cuentas,  rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1070' and Nivel2 > 0 and Nivel3 > 0 ")
    '                Me.LstTextoDev.SelectText = ""
    '        End Select
    '    End Sub
    '    Private Sub Liberar_ProcesoDev(ByVal i As Integer)
    '        Dim contador As Integer = 0
    '        Dim cantidad As Decimal = Me.TablaD.Item(ImpPd.Index, i).Value
    '        cantidad = cantidad + Me.TablaD.Item(UCD.Index, i).Value
    '        cantidad = cantidad - Me.TablaD.Item(PCD.Index, i).Value
    '        cantidad = cantidad + Me.TablaD.Item(ProvAD.Index, i).Value
    '        cantidad = cantidad + Me.TablaD.Item(ProvPD.Index, i).Value

    '        'Calcula la diferencia en el registro
    '        Me.TablaD.Item(DifD.Index, i).Value = Math.Round(Calcula_diferencia(Me.TablaD.Item(TRD.Index, i).Value, Me.TablaD.Item(ImpED.Index, i).Value, Me.TablaD.Item(ImpTD.Index, i).Value, Me.TablaD.Item(ImpCHD.Index, i).Value, Me.TablaD.Item(AjusD.Index, i).Value, Me.TablaD.Item(AntiD.Index, i).Value, cantidad), 2)
    '        If Me.TablaD.Item(DifD.Index, i).Value <> 0 Then
    '            Me.TablaD.Item(DifD.Index, i).Style.BackColor = Color.Red
    '        Else
    '            Me.TablaD.Item(DifD.Index, i).Style.BackColor = Color.Green
    '        End If

    '        If Trim(UCase(Me.lblce.Text)) = "TRUE" Then ' Bloquera filas de Contabilidad electronica
    '            ' Or IIf(IsDBNull(Me.TablaD.Item(NomCuentaD.Index, i).Value) = True, "", Me.TablaD.Item(NomCuentaD.Index, i).Value) = ""  If Me.TablaD.Item(DifD.Index, i).Value > 0 Or Me.TablaD.Item(TipPolD.Index, i).Value = Nothing Or IIf(IsDBNull(Me.TablaD.Item(NomCuentaD.Index, i).Value) = True, "", Me.TablaD.Item(NomCuentaD.Index, i).Value) = "" Or IIf(IsDBNull(Me.TablaD.Item(NPolD.Index, i).Value) = True, "", Me.TablaD.Item(NPolD.Index, i).Value) = "" Then
    '            If Me.TablaD.Item(DifD.Index, i).Value <> 0 Or Me.TablaD.Item(TipPolD.Index, i).Value = Nothing Or IIf(IsDBNull(Me.TablaD.Item(NPolD.Index, i).Value) = True, "", Me.TablaD.Item(NPolD.Index, i).Value.ToString) = "" Then

    '                Me.TablaD.Item(AplD.Index, i).Value = False
    '            Else

    '                If Me.TablaD.Item(ImpTD.Index, i).Value > 0 Then ' Bloqueo transferencia
    '                    Try
    '                        If Me.TablaD.Item(FecTD.Index, i).Value = Nothing Then
    '                            Me.TablaD.Item(AplD.Index, i).Value = False
    '                        Else
    '                            Me.TablaD.Item(AplD.Index, i).Value = True
    '                        End If
    '                    Catch ex As Exception
    '                        Me.TablaD.Item(AplD.Index, i).Value = False
    '                    End Try

    '                ElseIf Me.TablaD.Item(ImpCHD.Index, i).Value > 0 Then ' Bloqueo cheques
    '                    Try
    '                        If Me.TablaD.Item(FcHd.Index, i).Value = Nothing Then
    '                            Me.TablaD.Item(AplD.Index, i).Value = False
    '                        Else
    '                            Me.TablaD.Item(AplD.Index, i).Value = True
    '                        End If
    '                    Catch ex As Exception
    '                        Me.TablaD.Item(AplD.Index, i).Value = False
    '                    End Try

    '                ElseIf Me.TablaD.Item(ImpCHD.Index, i).Value > 0 And Me.TablaD.Item(ImpTD.Index, i).Value > 0 Then ' AMbos
    '                    Try
    '                        If Me.TablaD.Item(FecTD.Index, i).Value = Nothing Then
    '                            Me.TablaD.Item(AplD.Index, i).Value = False
    '                        Else
    '                            Me.TablaD.Item(AplD.Index, i).Value = True
    '                        End If
    '                    Catch ex As Exception
    '                        Me.TablaD.Item(AplD.Index, i).Value = False
    '                    End Try
    '                    Try
    '                        If Me.TablaD.Item(FcHd.Index, i).Value = Nothing Then
    '                            Me.TablaD.Item(AplD.Index, i).Value = False
    '                        Else
    '                            Me.TablaD.Item(AplD.Index, i).Value = True
    '                        End If
    '                    Catch ex As Exception
    '                        Me.TablaD.Item(AplD.Index, i).Value = False
    '                    End Try


    '                Else
    '                    Me.TablaD.Item(AplD.Index, i).Value = True
    '                End If
    '                If Me.TablaD.Item(AjusD.Index, i).Value <> 0 Then ' Bloqueo Ajuste
    '                    If IIf(IsDBNull(Me.TablaD.Item(CtaAD.Index, i).Value) = True, "", Me.TablaD.Item(CtaAD.Index, i).Value) = "" Then
    '                        Me.TablaD.Item(AplD.Index, i).Value = False
    '                    Else
    '                        Me.TablaD.Item(AplD.Index, i).Value = True
    '                    End If
    '                End If

    '                If Me.TablaD.Item(AntiD.Index, i).Value <> 0 Then ' Bloqueo Anticipo
    '                    If IIf(IsDBNull(Me.TablaD.Item(CtaAntiD.Index, i).Value) = True, "", Me.TablaD.Item(CtaAntiD.Index, i).Value) = "" Then
    '                        Me.TablaD.Item(AplD.Index, i).Value = False
    '                    Else
    '                        Me.TablaD.Item(AplD.Index, i).Value = True
    '                    End If
    '                End If

    '            End If
    '        Else
    '            'sin contabilidad electronica
    '            If Me.TablaD.Item(DifD.Index, i).Value <> 0 Or Me.TablaD.Item(TipPolD.Index, i).Value = Nothing Or IIf(IsDBNull(Me.TablaD.Item(NPolD.Index, i).Value) = True, "", Me.TablaD.Item(NPolD.Index, i).Value) = "" Then
    '                Me.TablaD.Item(AplD.Index, i).Value = False
    '            Else
    '                Me.TablaD.Item(AplD.Index, i).Value = True
    '            End If
    '            Try
    '                If Me.TablaD.Item(AjusD.Index, i).Value <> 0 Then ' Bloqueo Ajuste
    '                    If IIf(IsDBNull(Me.TablaD.Item(CtaAD.Index, i).Value) = True, "", Me.TablaD.Item(CtaAD.Index, i).Value) = "" Then
    '                        Me.TablaD.Item(AplD.Index, i).Value = False
    '                    Else
    '                        Me.TablaD.Item(AplD.Index, i).Value = True
    '                    End If
    '                End If

    '                If Me.TablaD.Item(AntiD.Index, i).Value <> 0 Then ' Bloqueo Anticipo
    '                    If IIf(IsDBNull(Me.TablaD.Item(CtaAntiD.Index, i).Value) = True, "", Me.TablaD.Item(CtaAntiD.Index, i).Value) = "" Then
    '                        Me.TablaD.Item(AplD.Index, i).Value = False
    '                    Else
    '                        Me.TablaD.Item(AplD.Index, i).Value = True
    '                    End If
    '                End If
    '            Catch ex As Exception

    '            End Try
    '        End If

    '        For s As Integer = 0 To Me.TablaD.Rows.Count - 1
    '            If Me.TablaD.Item(0, s).Value = True Then
    '                contador = contador + 1
    '            End If
    '        Next
    '        If contador > 0 Then
    '            Me.CmdProcesoDev.Enabled = True
    '        End If
    '    End Sub
    '    Private Function Obtener_indexDV(ByVal valor As String)

    '        Dim Indice As Integer = -1
    '        For i As Integer = 0 To Me.LetraCd.Items.Count - 1
    '            If valor = Trim(Me.LetraCd.Items(i)) Then
    '                Indice = i
    '                Exit For
    '            End If
    '        Next
    '        Return Indice

    '    End Function
    '    Private Function Obtener_index2Dv(ByVal valor As String)

    '        Dim Indice As Integer = -1
    '        For i As Integer = 0 To Me.TipPolD.Items.Count - 1
    '            If valor = Trim(Me.TipPolD.Items(i)) Then
    '                Indice = i
    '                Exit For
    '            End If
    '        Next
    '        Return Indice

    '    End Function
    '    Private Function Obtener_indexBDv(ByVal valor As String)

    '        Dim Indice As Integer = -1
    '        For i As Integer = 0 To Me.BancoOd.Items.Count - 1
    '            If valor = Trim(Me.BancoOd.Items(i)) Then
    '                Indice = i
    '                Exit For
    '            End If
    '        Next
    '        Return Indice

    '    End Function
    '    Private Function Obtener_indexBDvBH(ByVal valor As String)

    '        Dim Indice As Integer = -1
    '        For i As Integer = 0 To Me.NomBankCHD.Items.Count - 1
    '            If valor = Trim(Me.NomBankCHD.Items(i)) Then
    '                Indice = i
    '                Exit For
    '            End If
    '        Next
    '        Return Indice

    '    End Function
    '    Private Function Obtener_indexdDv(ByVal valor As String)

    '        Dim Indice As Integer = -1
    '        For i As Integer = 0 To Me.BancoDD.Items.Count - 1
    '            If valor = Trim(Me.BancoDD.Items(i)) Then
    '                Indice = i
    '                Exit For
    '            End If
    '        Next
    '        Return Indice

    '    End Function

    '    Private Sub LstTextoDev_Enters() Handles LstTextoDev.Enters
    '        If Me.TablaD.Rows.Count > 0 Then
    '            For Each Fila As DataGridViewRow In TablaD.Rows
    '                If Fila.Cells(LetraCd.Index).Selected = True Then
    '                    Try
    '                        If Me.LstTextoDev.SelectText = "" Then
    '                            Fila.Cells(LetraCd.Index).Value = ""
    '                        Else
    '                            If Obtener_index(Me.LstTextoDev.SelectText) < 0 Then
    '                                Fila.Cells(LetraCd.Index).Value = ""
    '                            Else
    '                                Dim s As String = Me.LetraCd.Items(1)
    '                                Fila.Cells(LetraCd.Index).Value = Me.LetraCd.Items(Obtener_index(Me.LstTextoDev.SelectText))
    '                            End If
    '                        End If
    '                    Catch ex As Exception

    '                    End Try
    '                ElseIf Fila.Cells(BancoOd.Index).Selected = True Then
    '                    Try
    '                        Dim s As String = Me.BancoOd.Items(1)
    '                        Fila.Cells(BancoOd.Index).Value = Me.BancoOd.Items(Obtener_indexB(Me.LstTextoDev.SelectText))
    '                    Catch ex As Exception

    '                    End Try
    '                    Try
    '                        If Me.LstTextoDev.SelectText = "" Then
    '                            Fila.Cells(BancoOd.Index).Value = ""

    '                        Else
    '                            If Obtener_indexB(Me.LstTextoDev.SelectText) = 0 Then
    '                                Fila.Cells(BancoOd.Index).Value = ""
    '                            Else
    '                                Dim s As String = Me.BancoOd.Items(1)
    '                                Fila.Cells(BancoOd.Index).Value = Me.BancoOd.Items(Obtener_indexB(Me.LstTextoDev.SelectText))
    '                            End If
    '                        End If

    '                    Catch ex As Exception

    '                    End Try
    '                ElseIf Fila.Cells(BancoDD.Index).Selected = True Then
    '                    'Try
    '                    '    Dim s As String = Me.BancoDD.Items(1)
    '                    '    Fila.Cells(BancoDD.Index).Value = Me.BancoDD.Items(Obtener_indexd(Me.LstTextoDev.SelectText))
    '                    'Catch ex As Exception

    '                    'End Try
    '                ElseIf Fila.Cells(TipPolD.Index).Selected = True Then

    '                    Try

    '                        If Me.LstTextoDev.SelectText = "" Then
    '                            Fila.Cells(TipPolD.Index).Value = ""
    '                        Else
    '                            Try
    '                                If Obtener_index2(Me.LstTextoDev.SelectText) < 0 Then
    '                                    Fila.Cells(TipPolD.Index).Value = ""
    '                                Else
    '                                    Dim s As String = Me.TipPolD.Items(1)
    '                                    Fila.Cells(TipPolD.Index).Value = Me.TipPolD.Items(Obtener_index2(Me.LstTextoDev.SelectText))
    '                                End If

    '                            Catch ex As Exception

    '                            End Try
    '                        End If

    '                    Catch ex As Exception

    '                    End Try
    '                Else

    '                    For j As Integer = 0 To Me.TablaD.Columns.Count - 1
    '                        If Me.TablaD.Item(j, Fila.Index).Selected = True And (j <> LetraCd.Index And j <> BancoOd.Index And j <> TipPolD.Index) Then
    '                            Me.TablaD.Item(j, Fila.Index).Value = Me.LstTextoDev.SelectText
    '                        ElseIf Me.TablaD.Item(j, Fila.Index).Selected = True And (j = LetraCd.Index And j = BancoOd.Index And j = TipPolD.Index) Then
    '                            Me.TablaD.Item(j, Fila.Index).Value = ""
    '                        End If
    '                    Next

    '                End If

    '            Next
    '        End If
    '    End Sub

    '    Private Sub TablaD_CellEndEdit(sender As Object, e As DataGridViewCellEventArgs) Handles TablaD.CellEndEdit
    '        Liberar_ProcesoDev(Me.TablaD.CurrentRow.Index)
    '        'Calcula cuenta cargos

    '        If Me.TablaD.Item(ProvPD.Index, Me.TablaD.CurrentRow.Index).Value > 0 Then
    '            'If Me.TablaD.Item(NomCuentaD.Index, Me.TablaD.CurrentRow.Index).Value = "" Then
    '            '    Me.TablaD.Item(NomCuentaD.Index, Me.TablaD.CurrentRow.Index).Value = Cuenta_cargosdev(Me.TablaD.Item(RFCED.Index, Me.TablaD.CurrentRow.Index).Value, "C", "5030")
    '            'End If
    '            'Me.TablaD.Item(LetraSD.Index, Me.TablaD.CurrentRow.Index).Value = Eventos.Calcula_letraSat(Me.TablaD.Item(ForPD.Index, Me.TablaD.CurrentRow.Index).Value, Me.TablaD.Item(UcfdiD.Index, Me.TablaD.CurrentRow.Index).Value)
    '            Me.TablaD.Item(ProvAD.Index, Me.TablaD.CurrentRow.Index).Value = 0
    '        ElseIf Me.TablaD.Item(ProvAD.Index, Me.TablaD.CurrentRow.Index).Value > 0 Then
    '            'Me.TablaD.Item(NomCuentaD.Index, Me.TablaD.CurrentRow.Index).Value = Cuenta_cargosdev(Me.TablaD.Item(RFCED.Index, Me.TablaD.CurrentRow.Index).Value, "GG", "6010")
    '            'Me.TablaD.Item(LetraSD.Index, Me.TablaD.CurrentRow.Index).Value = Eventos.Calcula_letraSat(Me.TablaD.Item(ForPD.Index, Me.TablaD.CurrentRow.Index).Value, Me.TablaD.Item(UcfdiD.Index, Me.TablaD.CurrentRow.Index).Value)
    '            Me.TablaD.Item(ProvPD.Index, Me.TablaD.CurrentRow.Index).Value = 0
    '        End If

    '        If Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value <> Nothing Then

    '            If Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value = "C" Or Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value = "CPP" Then
    '                Me.TablaD.Item(ProvAD.Index, Me.TablaD.CurrentRow.Index).Value = 0
    '            ElseIf Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value = "GG" Or Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value = "GGPP" Then
    '                Me.TablaD.Item(ProvPD.Index, Me.TablaD.CurrentRow.Index).Value = 0
    '            End If

    '            Me.TablaD.Item(NomCuentaD.Index, Me.TablaD.CurrentRow.Index).Value = Cuenta_cargos(Me.TablaD.Item(RFCED.Index, Me.TablaD.CurrentRow.Index).Value, Trim(Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value))
    '            Me.TablaD.Item(LetraSD.Index, Me.TablaD.CurrentRow.Index).Value = Eventos.Calcula_letraSat(Me.TablaD.Item(Fpago.Index, Me.TablaD.CurrentRow.Index).Value, Me.TablaD.Item(UCFDI.Index, Me.TablaD.CurrentRow.Index).Value)
    '            '  End If
    '        Else
    '            Me.TablaD.Item(NomCuentaD.Index, Me.TablaD.CurrentRow.Index).Value = ""
    '        End If

    '        'CALCULAR CUENTA DE EFECTIVO
    '        If Me.TablaD.Item(ImpED.Index, Me.TablaD.CurrentRow.Index).Value > 0 Then
    '            'If Candado_Importe_EfectivoDev(Me.TablaD.CurrentRow.Index) = True Then ' se verifica candado
    '            '    ' IMPORTE DE EFECTIVO Antiguo Codigo

    '            Me.TablaD.Item(CtaEfD.Index, Me.TablaD.CurrentRow.Index).Value = Cuenta_Efectivo()
    '            Me.TablaD.Columns(CtaEfD.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
    '            'Else
    '            '    If MessageBox.Show("El importe de efectivo Excede los $2,000 deseas usarlo?", Eventos.titulo_app, MessageBoxButtons.YesNo, MessageBoxIcon.Question) = Windows.Forms.DialogResult.Yes Then

    '            '        Me.TablaD.Item(CtaEfD.Index, Me.TablaD.CurrentRow.Index).Value = Cuenta_Efectivo()
    '            '        Me.TablaD.Columns(CtaEfD.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
    '            '    Else
    '            '        Me.TablaD.Item(ImpED.Index, Me.TablaD.CurrentRow.Index).Value = 0
    '            '        Exit Sub
    '            '    End If
    '            'End If
    '        Else
    '            Me.TablaD.Item(CtaEfD.Index, Me.TablaD.CurrentRow.Index).Value = ""
    '        End If

    '        'CALCULAR CUENTA DE Ajustes
    '        If Me.TablaD.Item(AjusD.Index, Me.TablaD.CurrentRow.Index).Value <> 0 Then
    '            'If Candado_Importe_EfectivoDev(Me.TablaD.CurrentRow.Index) = True Then ' se verifica candado
    '            '    ' IMPORTE DE EFECTIVO Antiguo Codigo

    '            Me.TablaD.Item(CtaAD.Index, Me.TablaD.CurrentRow.Index).Value = Cuenta_Efectivo()
    '            Me.TablaD.Columns(CtaAD.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
    '            'Else
    '            '    If MessageBox.Show("El importe de efectivo Excede los $2,000 deseas usarlo?", Eventos.titulo_app, MessageBoxButtons.YesNo, MessageBoxIcon.Question) = Windows.Forms.DialogResult.Yes Then

    '            '        Me.TablaD.Item(CtaAD.Index, Me.TablaD.CurrentRow.Index).Value = Cuenta_Efectivo()
    '            '        Me.TablaD.Columns(CtaAD.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
    '            '    Else
    '            '        Me.TablaD.Item(AjusD.Index, Me.TablaD.CurrentRow.Index).Value = 0
    '            '        Exit Sub
    '            '    End If
    '            'End If
    '        Else
    '            Me.TablaD.Item(CtaAD.Index, Me.TablaD.CurrentRow.Index).Value = ""
    '        End If
    '        'CALCULAR CUENTA DE anticipos
    '        If Me.TablaD.Item(AntiD.Index, Me.TablaD.CurrentRow.Index).Value > 0 Then

    '            Me.TablaD.Item(CtaAntiD.Index, Me.TablaD.CurrentRow.Index).Value = Cuenta_Anticipo()
    '            Me.TablaD.Columns(CtaAntiD.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
    '        Else
    '            Me.TablaD.Item(CtaAntiD.Index, Me.TablaD.CurrentRow.Index).Value = ""
    '        End If

    '        ' Importe de Transferencia
    '        If Me.TablaD.Item(ImpTD.Index, Me.TablaD.CurrentRow.Index).Value > 0 Then

    '            Me.TablaD.Item(CtaBancosD.Index, Me.TablaD.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes INNER JOIN Catalogo_de_Cuentas ON Catalogo_de_Cuentas.Id_cat_Cuentas = Bancos_Clientes.Id_cat_Cuentas", "Catalogo_de_Cuentas.Cuenta", " Bancos_Clientes.Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos_Clientes.Alias like '%Tr%'", True)

    '            If Trim(UCase(Me.lblce.Text)) = "TRUE" Then

    '                Me.TablaD.Columns(FecTD.Index).Visible = True
    '            Else
    '                Me.TablaD.Columns(FecTD.Index).Visible = True
    '            End If


    '        Else
    '            Me.TablaD.Columns(BancoOd.Index).Visible = False
    '            Me.TablaD.Columns(CtaOD.Index).Visible = False
    '            Me.TablaD.Columns(BancoDD.Index).Visible = False
    '            Me.TablaD.Columns(CtaDD.Index).Visible = False
    '        End If
    '        If Me.TablaD.Item(ImpCHD.Index, Me.TablaD.CurrentRow.Index).Value > 0 Then
    '            Me.TablaD.Item(CtaBancosD.Index, Me.TablaD.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes INNER JOIN Catalogo_de_Cuentas ON Catalogo_de_Cuentas.Id_cat_Cuentas = Bancos_Clientes.Id_cat_Cuentas", "Catalogo_de_Cuentas.Cuenta", " Bancos_Clientes.Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos_Clientes.Alias like '%Ch%'", True)
    '            If Trim(UCase(Me.lblce.Text)) = "TRUE" Then
    '                Me.TablaD.Columns(FcHd.Index).Visible = True
    '            Else
    '                Me.TablaD.Columns(FcHd.Index).Visible = True
    '            End If
    '        Else
    '            'Se Ocutan Columnas de Contabilidad Electronica
    '            Me.TablaD.Columns(NomBankCHD.Index).Visible = False
    '            Me.TablaD.Columns(CtaOrigCHD.Index).Visible = False
    '            Me.TablaD.Columns(NchD.Index).Visible = False


    '        End If

    '    End Sub
    '    Private Function Candado_Importe_EfectivoDev(ByVal i As Integer)
    '        Dim hacer As Boolean
    '        If Me.TablaD.Item(ImpED.Index, i).Value > 2000 Then

    '            hacer = False
    '        Else
    '            hacer = True
    '        End If
    '        Return hacer
    '    End Function
    '    Private Function Candado_Importe_Efectivocomple(ByVal i As Integer)
    '        Dim hacer As Boolean
    '        If Me.TablaC.Item(ImpEComplemento.Index, i).Value > 2000 Then

    '            hacer = False
    '        Else
    '            hacer = True
    '        End If
    '        Return hacer
    '    End Function
    '    Private Sub Cargar_bancosDev(ByVal bancos As String)
    '        Dim sql As String = " SELECT rtrim(Bancos.Clave) +'-'+ Bancos_Clientes.Alias AS Alias FROM Bancos_Clientes INNER JOIN Bancos ON Bancos_Clientes.Id_Banco =Bancos.Id_Banco  where Id_Empresa = " & Me.lstCliente.SelectItem & " and alias like '%" & bancos & "%'"
    '        Dim ds As DataSet = Eventos.Obtener_DS(sql)
    '        If ds.Tables(0).Rows.Count > 0 Then
    '            If bancos = "Ch" Then
    '                'Cheque
    '                If Me.NomBankCHD.Items.Count = 0 Then
    '                    For i As Integer = 0 To ds.Tables(0).Rows.Count - 1
    '                        Me.NomBankCHD.Items.Add(ds.Tables(0).Rows(i)("Alias"))
    '                    Next
    '                Else
    '                    Me.NomBankCHD.Items.Clear()
    '                    For i As Integer = 0 To ds.Tables(0).Rows.Count - 1
    '                        Me.NomBankCHD.Items.Add(ds.Tables(0).Rows(i)("Alias"))
    '                    Next
    '                End If
    '            Else
    '                'Transferencia
    '                'Origen
    '                If Me.BancoOd.Items.Count = 0 Then
    '                    For i As Integer = 0 To ds.Tables(0).Rows.Count - 1
    '                        Me.BancoOd.Items.Add(ds.Tables(0).Rows(i)("Alias"))

    '                    Next
    '                Else
    '                    Me.BancoOd.Items.Clear()

    '                    For i As Integer = 0 To ds.Tables(0).Rows.Count - 1
    '                        Me.BancoOd.Items.Add(ds.Tables(0).Rows(i)("Alias"))

    '                    Next
    '                End If
    '            End If
    '        End If

    '    End Sub

    '    Private Sub Banco_destinodEV()

    '        Dim sql2 As String = " SELECT DISTINCT CONVERT(NVARCHAR, Bancos.Clave, 103) + '-' + Bancos.Nombre AS Banco 
    '                               FROM     Bancos INNER JOIN
    '                               Bancos_RFC ON Bancos.Id_Banco = Bancos_RFC.Id_Banco
    '                               WHERE  (Bancos_RFC.Id_Empresa  = " & Me.lstCliente.SelectItem & ")"
    '        Dim ds2 As DataSet = Eventos.Obtener_DS(sql2)
    '        If ds2.Tables(0).Rows.Count > 0 Then
    '            If Me.BancoDD.Items.Count = 0 Then
    '                For j As Integer = 0 To ds2.Tables(0).Rows.Count - 1
    '                    Me.BancoDD.Items.Add(ds2.Tables(0).Rows(j)("Banco"))
    '                Next
    '            Else
    '                Me.BancoDD.Items.Clear()
    '                For j As Integer = 0 To ds2.Tables(0).Rows.Count - 1
    '                    Me.BancoDD.Items.Add(ds2.Tables(0).Rows(j)("Banco"))
    '                Next
    '            End If
    '        End If
    '    End Sub
    '    Private Function RegresaCunetaDev(ByVal cuenta As String, ByVal rfc As String, ByVal posicion As Integer, Optional ByVal tipo As Integer = 0)
    '        Dim Cta As String = ""
    '        Dim sql As String = ""
    '        If tipo = 1 Then
    '            sql = "SELECT cuenta FROM Catalogo_de_Cuentas WHERE Nivel1='" & cuenta.Substring(0, 4) & "' AND Nivel2= '" & cuenta.Substring(4, 4) & "' AND Nivel3 > 0 AND RFC = '" & rfc & "' and Id_Empresa = " & Me.lstCliente.SelectItem & " "
    '        ElseIf tipo = 2 Then

    '            sql = "SELECT cuenta FROM Catalogo_de_Cuentas WHERE Nivel1='" & cuenta.Substring(0, 4) & "' AND Nivel2= '" & cuenta.Substring(4, 4) & "' AND Nivel3 = '" & cuenta.Substring(8, 4) & "' AND Nivel4 > 0 AND RFC = '" & rfc & "' and Id_Empresa = " & Me.lstCliente.SelectItem & " "
    '        End If
    '        Dim ds As DataSet = Eventos.Obtener_DS(sql)
    '        If ds.Tables(0).Rows.Count > 0 Then
    '            Cta = ds.Tables(0).Rows(0)(0)
    '        Else
    '            'No existe la cuenta y la inserta
    '            If tipo = 1 Then
    '                Cta = Val(ObtenerValorDB("Catalogo_de_cuentas", "CASE WHEN max (Nivel3 ) + 1 IS NULL THEN 1 WHEN max (Nivel3 ) + 1 IS NOT NULL THEN   max (Nivel3 ) + 1 END AS C ", "  Nivel1 =" & cuenta.ToString.Substring(0, 4) & "  AND Nivel2 =" & cuenta.ToString.Substring(4, 4) & " AND Nivel3 >= 0  and Id_Empresa = " & Me.lstCliente.SelectItem & "", True))
    '                Cta = Format(Cta).PadLeft(4, "0")
    '                Crear_cuenta(cuenta.ToString.Substring(0, 4), cuenta.ToString.Substring(4, 4), Cta.ToString.Substring(0, 4),
    '                               "0000", cuenta.Substring(0, 8) & Cta & "0000", Me.TablaD.Item(RFCED.Index, posicion).Value & " " & Me.TablaD.Item(NomEd.Index, posicion).Value,
    '                                Me.lstCliente.SelectItem, Me.TablaD.Item(LetraSD.Index, posicion).Value, Me.TablaD.Item(RFCED.Index, posicion).Value)
    '                Cta = cuenta.Substring(0, 8) & Cta & "0000"
    '            Else
    '                Cta = Val(ObtenerValorDB("Catalogo_de_cuentas", "CASE WHEN max (Nivel4 ) + 1 IS NULL THEN 1 WHEN max (Nivel4 ) + 1 IS NOT NULL THEN   max (Nivel4 ) + 1 END AS C ", "  Nivel1 =" & cuenta.ToString.Substring(0, 4) & "  AND Nivel2 =" & cuenta.ToString.Substring(4, 4) & " AND Nivel3=" & cuenta.ToString.Substring(8, 4) & " AND Nivel4 > 0 and Id_Empresa = " & Me.lstCliente.SelectItem & "", True))
    '                Cta = Format(Cta).PadLeft(4, "0")
    '                Crear_cuenta(cuenta.ToString.Substring(0, 4), cuenta.ToString.Substring(4, 4), cuenta.ToString.Substring(8, 4),
    '                                  Cta, cuenta.Substring(0, 12) & Cta, Me.TablaD.Item(RFCED.Index, posicion).Value & " " & Me.TablaD.Item(NomEd.Index, posicion).Value,
    '                                  Me.lstCliente.SelectItem, Me.TablaD.Item(LetraSD.Index, posicion).Value, Me.TablaD.Item(RFCED.Index, posicion).Value)
    '                Cta = cuenta.Substring(0, 12) & Cta
    '            End If
    '        End If
    '        Return Cta
    '    End Function
    '    Private Function RegresaCunetaComple(ByVal cuenta As String, ByVal rfc As String, ByVal posicion As Integer, Optional ByVal tipo As Integer = 0)
    '        Dim Cta As String = ""
    '        Dim sql As String = ""
    '        If tipo = 1 Then
    '            sql = "SELECT cuenta FROM Catalogo_de_Cuentas WHERE Nivel1='" & cuenta.Substring(0, 4) & "' AND Nivel2= '" & cuenta.Substring(4, 4) & "' AND Nivel3 > 0 AND RFC = '" & rfc & "' and Id_Empresa = " & Me.lstCliente.SelectItem & " "
    '        ElseIf tipo = 2 Then

    '            sql = "SELECT cuenta FROM Catalogo_de_Cuentas WHERE Nivel1='" & cuenta.Substring(0, 4) & "' AND Nivel2= '" & cuenta.Substring(4, 4) & "' AND Nivel3 = '" & cuenta.Substring(8, 4) & "' AND Nivel4 > 0 AND RFC = '" & rfc & "' and Id_Empresa = " & Me.lstCliente.SelectItem & " "
    '        End If
    '        Dim ds As DataSet = Eventos.Obtener_DS(sql)
    '        If ds.Tables(0).Rows.Count > 0 Then
    '            Cta = ds.Tables(0).Rows(0)(0)
    '        Else
    '            If tipo = 1 Then
    '                Cta = Val(ObtenerValorDB("Catalogo_de_cuentas", "CASE WHEN max (Nivel3 ) + 1 IS NULL THEN 1 WHEN max (Nivel3 ) + 1 IS NOT NULL THEN   max (Nivel3 ) + 1 END AS C ", "  Nivel1 =" & cuenta.ToString.Substring(0, 4) & "  AND Nivel2 =" & cuenta.ToString.Substring(4, 4) & " AND Nivel3 >= 0  and Id_Empresa = " & Me.lstCliente.SelectItem & "", True))
    '                Cta = Format(Cta).PadLeft(4, "0")
    '                Crear_cuenta(cuenta.ToString.Substring(0, 4), cuenta.ToString.Substring(4, 4), Cta.ToString.Substring(0, 4),
    '                               "0000", cuenta.Substring(0, 8) & Cta & "0000", Me.TablaC.Item(RFCComplemento.Index, posicion).Value & " " & Me.TablaC.Item(NEmComplemento.Index, posicion).Value,
    '                                Me.lstCliente.SelectItem, Me.TablaC.Item(LetraSatComplemento.Index, posicion).Value, Me.TablaC.Item(RFCComplemento.Index, posicion).Value)
    '                Cta = cuenta.Substring(0, 8) & Cta & "0000"
    '            Else
    '                Cta = Val(ObtenerValorDB("Catalogo_de_cuentas", "CASE WHEN max (Nivel4 ) + 1 IS NULL THEN 1 WHEN max (Nivel4 ) + 1 IS NOT NULL THEN   max (Nivel4 ) + 1 END AS C ", "  Nivel1 =" & cuenta.ToString.Substring(0, 4) & "  AND Nivel2 =" & cuenta.ToString.Substring(4, 4) & " AND Nivel3=" & cuenta.ToString.Substring(8, 4) & " AND Nivel4 > 0 and Id_Empresa = " & Me.lstCliente.SelectItem & "", True))
    '                Cta = Format(Cta).PadLeft(4, "0")
    '                Crear_cuenta(cuenta.ToString.Substring(0, 4), cuenta.ToString.Substring(4, 4), cuenta.ToString.Substring(8, 4),
    '                                  Cta, cuenta.Substring(0, 12) & Cta, Me.TablaC.Item(RFCComplemento.Index, posicion).Value & " " & Me.TablaC.Item(NEmComplemento.Index, posicion).Value,
    '                                  Me.lstCliente.SelectItem, Me.TablaC.Item(LetraSatComplemento.Index, posicion).Value, Me.TablaC.Item(RFCComplemento.Index, posicion).Value)
    '                Cta = cuenta.Substring(0, 12) & Cta
    '            End If
    '        End If
    '        Return Cta
    '    End Function
    '    Private Function BuscarcuentaRFCDev(ByVal RFC As String, ByVal cuenta As String, ByVal posicion As Integer)
    '        Dim Cta As String = ""
    '        Dim sql As String = "SELECT cuenta FROM Catalogo_de_Cuentas WHERE Nivel1='" & cuenta.Substring(0, 4) & "' AND Nivel2= '" & cuenta.Substring(4, 4) & "' AND Nivel3 = '" & cuenta.Substring(8, 4) & "' AND Nivel4 > 0 AND RFC = '" & RFC & "' and Id_Empresa = " & Me.lstCliente.SelectItem & " "
    '        Dim ds As DataSet = Eventos.Obtener_DS(sql)
    '        If ds.Tables(0).Rows.Count > 0 Then
    '            Cta = ds.Tables(0).Rows(0)(0)
    '        Else
    '            Cta = Val(ObtenerValorDB("Catalogo_de_cuentas", "max (Nivel4 ) + 1 ", "  Nivel1 =" & cuenta.ToString.Substring(0, 4) & "  AND Nivel2 =" & cuenta.ToString.Substring(4, 4) & " AND Nivel3=" & cuenta.ToString.Substring(8, 4) & " AND Nivel4 > 0 and Id_Empresa = " & Me.lstCliente.SelectItem & "", True))
    '            Cta = Format(Cta).PadLeft(4, "0")
    '            Crear_cuenta(cuenta.ToString.Substring(0, 4), cuenta.ToString.Substring(4, 4), cuenta.ToString.Substring(8, 4),
    '                                   Cta, cuenta.Substring(0, 12) & Cta, Me.TablaD.Item(RFCED.Index, posicion).Value & " " & Me.TablaD.Item(NomEd.Index, posicion).Value,
    '                                   Me.lstCliente.SelectItem, Me.TablaD.Item(LetraSD.Index, posicion).Value, Me.TablaD.Item(RFCED.Index, posicion).Value)
    '            Cta = cuenta.Substring(0, 12) & Cta
    '        End If
    '        Return Cta
    '    End Function
    '    Private Function Cuenta_cargosdev(ByVal rfc As String, ByVal letra As String, ByVal nivel1 As String)
    '        Dim cuenta As String
    '        Dim sql As String = " select Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta from catalogo_de_cuentas where  clave= '" & Trim(letra) & "'  and nivel3 >0  
    '                            and rfc= '" & rfc & "' and nivel1 = '" & nivel1 & "' and Id_Empresa = " & Me.lstCliente.SelectItem & ""
    '        Dim ds As DataSet = Eventos.Obtener_DS(sql)
    '        If ds.Tables(0).Rows.Count > 0 Then
    '            Dim cadena As String = ds.Tables(0).Rows(0)("Cuenta")
    '            Dim posi As Integer = InStr(1, cadena, "-", CompareMethod.Binary)
    '            Dim cuantos As Integer = Len(cadena) - Len(cadena.Substring(0, posi))
    '            Dim consecutivo As String = cadena.Substring(posi, cuantos)

    '            sql = " select Rtrim(Descripcion) as Cuenta from catalogo_de_cuentas where  Nivel1= '" & consecutivo.ToString.Substring(0, 4) & "' and nivel2= '" & consecutivo.ToString.Substring(4, 4) & "'  and nivel3 ='" & consecutivo.ToString.Substring(8, 4) & "'  and nivel4= '0000' and Id_Empresa = " & Me.lstCliente.SelectItem & ""

    '            Dim ds2 As DataSet = Eventos.Obtener_DS(sql)

    '            cuenta = ds2.Tables(0).Rows(0)("Cuenta") & " " & ds.Tables(0).Rows(0)("Cuenta")
    '        Else
    '            cuenta = ""
    '        End If
    '        Return cuenta
    '    End Function




    '    '************************************************ Complementos de pago *********************************************************************************

    '    Private Sub CmdSalirComple_Click(sender As Object, e As EventArgs) Handles CmdSalirComple.Click
    '        Me.Close()
    '    End Sub
    '    Private Sub CmdLimpiaComple_Click(sender As Object, e As EventArgs) Handles CmdLimpiaComple.Click
    '        If Me.TablaC.Rows.Count > 0 Then
    '            LimpiaC()
    '            Me.LstComple.SelectText = ""
    '        End If
    '    End Sub
    '    Private Sub LimpiaC()
    '        Me.TablaC.Rows.Clear()
    '    End Sub
    '    Private Sub CmdBuscarComple_Click(sender As Object, e As EventArgs) Handles CmdBuscarComple.Click
    '        RadMessageBox.SetThemeName("MaterialBlueGrey")
    '        activo = True
    '        LimpiaC()
    '        If Me.lstCliente.SelectText <> "" Then
    '            If Buscar_Parametros(Me.lstCliente.SelectItem) = True Then
    '                Buscar_Complementos(Me.lstCliente.SelectItem, " and Fecha_Emision >= " & Eventos.Sql_hoy(Me.DtFiComple.Value) & " and Fecha_Emision <= " & Eventos.Sql_hoy(DtFFComple.Value) & "")
    '                SP2.RunWorkerAsync(Me.TablaC)
    '                Control.CheckForIllegalCrossThreadCalls = False
    '                Me.TablaC.Enabled = True
    '            End If
    '        Else
    '            RadMessageBox.Show("No se ha seleccionado una Empresa", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
    '        End If
    '        activo = False
    '    End Sub
    '    Private Sub Buscar_Complementos(ByVal Id_Empresa As Integer, ByVal periodo As String)
    '        RadMessageBox.SetThemeName("MaterialBlueGrey")
    '        Dim sql As String = "SELECT Xml_Complemento.Id_Xml_Complemento, Xml_Complemento.Tipo, Xml_Complemento.UUID, Metodos_de_Pago.Descripcion AS Forma_de_Pago, Xml_Complemento.Fecha_Emision, Xml_Complemento.Folio, Xml_Complemento.Serie, 
    ' Xml_Complemento.SubTotal, Xml_Complemento.Moneda, Xml_Complemento.Total, Xml_Complemento.LugarExpedicion, Xml_Complemento.RFC_Emisor, Xml_Complemento.Nombre_Emisor, Xml_Complemento.Regimen_Fiscal, 
    ' Xml_Complemento.RFC_Receptor, Xml_Complemento.Nombre_Receptor, Xml_Complemento.UsoCFDI, Xml_Complemento.ClaveProdServ, Xml_Complemento.Cantidad, Xml_Complemento.Unidad, Xml_Complemento.Descripcion, 
    ' Xml_Complemento.Valor_Unitario, Xml_Complemento.Importe, Xml_Complemento.FechaPago, Xml_Complemento.MonedaP, Xml_Complemento.TipoCambioP, Xml_Complemento.Monto, Xml_Complemento.Num_Operacion, 
    ' Xml_Complemento.RfcEmisorCtaOrd, Xml_Complemento.NomBancoOrdExt, Xml_Complemento.CtaOrdenante, Xml_Complemento.RfcEmisorCtaBen, Xml_Complemento.CtaBeneficiario, Xml_Complemento.TipoCadPago, 
    ' Xml_Complemento.CertPago, Xml_Complemento.CadPago, Xml_Complemento.SelloPago, Xml_Complemento.Conceptos, Xml_Complemento.IdDocumento, Xml_Complemento.SerieDR, Xml_Complemento.FolioDR, 
    ' Xml_Complemento.MonedaDR, Xml_Complemento.TipoCambioDR, Xml_Complemento.MetodoDePagoDR, Xml_Complemento.NumParcialidad, Xml_Complemento.ImpSaldoAnt, Xml_Complemento.ImpPagado, 
    ' Xml_Complemento.ImpSaldoInsoluto, Xml_Complemento.Consecutivo_Carga, Xml_Complemento.Id_Empresa, Xml_Complemento.Carga_Procesada, Xml_Complemento.ID_poliza, Xml_Complemento.Emitidas, Xml_Complemento.Letra_Sat, 
    ' Xml_Complemento.Nombre_cuenta, Xml_Complemento.Clave, Xml_Complemento.Anio_Contable, Xml_Complemento.Mes_Contable, Xml_Complemento.Imp_Efectivo, Xml_Complemento.Cuenta_Efectivo, Xml_Complemento.Imp_Transf, 
    ' Xml_Complemento.Banco_Origen, Xml_Complemento.Cuenta_Origen, Xml_Complemento.Banco_Destino, Xml_Complemento.Fecha_Transaccion, Xml_Complemento.Imp_Cheque, Xml_Complemento.Nom_Banco_Ch, 
    ' Xml_Complemento.Cuenta_Origen_Ch, Xml_Complemento.No_Cheque, Xml_Complemento.Banco_Dest_Cheque,  Xml_Complemento.Cuenta_Dest_Cheque,  Xml_Complemento.Cuenta_Cheques, Xml_Complemento.Fecha_Ch, Xml_Complemento.Cuenta_Bancos, Xml_Complemento.Provision_Acreedor, Xml_Complemento.Provision_Proveedor, 
    ' Xml_Complemento.Diferencia, Xml_Complemento.Tipo_Poliza, Xml_Complemento.Imp_Grabado, Xml_Complemento.Imp_Exento, Xml_Complemento.IVA_real, Xml_Complemento.Prc_Pago_Acumulado, Xml_Complemento.Total_Real, 
    ' Xml_Complemento.Utilidad_Cambiaria, Xml_Complemento.Perdida_Cambiaria, Xml_Complemento.Imp_Devolucion, Xml_Complemento.Cuenta_Devolucion, Xml_Complemento.Numpol, Xml_Complemento.RIRS, Xml_Complemento.RIVA, 
    ' Xml_Complemento.Cuenta_Destino, Xml_Complemento.Ajuste, Xml_Complemento.Anticipos, Xml_Complemento.Cta_Ajuste, Xml_Complemento.Cta_Anticipos, Xml_Complemento.Cta_Orden,
    'Imp_Transf1,        Banco_Origen1,	 Cuenta_Origen1,	 Banco_Destino1, Cuenta_Destino1 	,	 Fecha_Transaccion1,	 Cuenta_Bancos1 ,Ser
    '                  FROM     Xml_Complemento INNER JOIN
    '                                    Metodos_de_Pago ON Xml_Complemento.FormaDePago = Metodos_de_Pago.Clave
    '                  WHERE  (Xml_Complemento.Emitidas = " & Eventos.Bool2(True) & ") AND (Xml_Complemento.Id_Empresa = " & Id_Empresa & ") " & periodo & " and ID_poliza IS NULL "
    '        Dim ds As DataSet = Eventos.Obtener_DS(sql)
    '        If ds.Tables(0).Rows.Count > 0 Then
    '            Me.TablaC.RowCount = 1

    '            Dim contab As DataSet = Eventos.Obtener_DS(" Select 'I' as Clave   ")
    '            If contab.Tables(0).Rows.Count > 0 Then
    '                If Me.LetraContabilidadComplemento.Items.Count = 0 Then

    '                    For i As Integer = 0 To contab.Tables(0).Rows.Count - 1
    '                        Me.LetraContabilidadComplemento.Items.Add(Trim(contab.Tables(0).Rows(i)("Clave")))
    '                    Next
    '                Else
    '                    Me.LetraContabilidadComplemento.Items.Clear()
    '                    For i As Integer = 0 To contab.Tables(0).Rows.Count - 1
    '                        Me.LetraContabilidadComplemento.Items.Add(Trim(contab.Tables(0).Rows(i)("Clave")))
    '                    Next
    '                End If
    '            End If
    '            Dim Tipo As DataSet = Eventos.Obtener_DS(" Select convert(NVARCHAR,Clave,103)  +' - ' + Nombre as Clave  from Tipos_Poliza_Sat INNER JOIN Tipo_Poliza ON Tipo_Poliza.Id_Tipo_poliza = Tipos_Poliza_Sat.Id_Tipo_poliza  where Id_Empresa= " & Me.lstCliente.SelectItem & "      ")
    '            If Tipo.Tables(0).Rows.Count > 0 Then
    '                If Me.TipPolComplemento.Items.Count = 0 Then
    '                    For i As Integer = 0 To Tipo.Tables(0).Rows.Count - 1
    '                        Me.TipPolComplemento.Items.Add(Trim(Tipo.Tables(0).Rows(i)("Clave")))
    '                    Next
    '                Else
    '                    Me.TipPolComplemento.Items.Clear()
    '                    For i As Integer = 0 To Tipo.Tables(0).Rows.Count - 1
    '                        Me.TipPolComplemento.Items.Add(Trim(Tipo.Tables(0).Rows(i)("Clave")))
    '                    Next
    '                End If
    '            End If

    '            Dim Ctaor As DataSet = Eventos.Obtener_DS(" Select 'SI' as Clave  UNION sELECT 'NO' as Clave")
    '            If Ctaor.Tables(0).Rows.Count > 0 Then
    '                If Me.CtaOrdenC.Items.Count = 0 Then
    '                    For i As Integer = 0 To Ctaor.Tables(0).Rows.Count - 1
    '                        Me.CtaOrdenC.Items.Add(Trim(Ctaor.Tables(0).Rows(i)("Clave")))
    '                    Next
    '                Else
    '                    Me.CtaOrdenC.Items.Clear()
    '                    For i As Integer = 0 To Ctaor.Tables(0).Rows.Count - 1
    '                        Me.CtaOrdenC.Items.Add(Trim(Ctaor.Tables(0).Rows(i)("Clave")))
    '                    Next
    '                End If
    '            End If

    '            Dim Series As DataSet = Eventos.Obtener_DS(" SELECT Serie FROM dbo.Series WHERE Id_Empresa = " & Me.lstCliente.SelectItem & " ")
    '            If Series.Tables(0).Rows.Count > 0 Then
    '                If Me.SerC.Items.Count = 0 Then
    '                    For i As Integer = 0 To Series.Tables(0).Rows.Count - 1
    '                        Me.SerC.Items.Add(Trim(Series.Tables(0).Rows(i)("Serie")))
    '                    Next
    '                Else
    '                    Me.SerC.Items.Clear()
    '                    For i As Integer = 0 To Series.Tables(0).Rows.Count - 1
    '                        Me.SerC.Items.Add(Trim(Series.Tables(0).Rows(i)("Serie")))
    '                    Next
    '                End If
    '            End If
    '            Cargar_bancosComple("Transf")
    '            Cargar_bancosComple("Ch")
    '            Me.TablaC.RowCount = ds.Tables(0).Rows.Count
    '#Region "Anteror"
    '            DatoC = ds
    '#End Region

    '        Else
    '            RadMessageBox.Show("No hay registros para procesar", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
    '        End If



    '    End Sub
    '    Private Sub Complementos(ByVal ds As DataSet)
    '        RadMessageBox.SetThemeName("MaterialBlueGrey")
    '        Dim frm As New BarraProcesovb
    '        frm.Show()
    '        frm.Text = "Calculando Pagos por favor espere..."
    '        frm.Barra.Minimum = 0
    '        frm.Barra.Maximum = Me.TablaC.Rows.Count
    '        Try
    '            For j As Integer = 0 To ds.Tables(0).Rows.Count - 1
    '                Dim Fila As DataGridViewRow = Me.TablaC.Rows(j)
    '                Me.TablaC.Item(0, j).Value = False
    '                Me.TablaC.Item(Id_Complemento.Index, j).Value = ds.Tables(0).Rows(j)("Id_Xml_Complemento")
    '                Me.TablaC.Item(Tp.Index, j).Value = ds.Tables(0).Rows(j)("Tipo")
    '                Me.TablaC.Item(FechaEComplemento.Index, j).Value = ds.Tables(0).Rows(j)("Fecha_Emision")
    '                Me.TablaC.Item(UUIDComplemento.Index, j).Value = ds.Tables(0).Rows(j)("UUID")
    '                Me.TablaC.Item(UUIDRComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("IdDocumento")) = True, "", ds.Tables(0).Rows(j)("IdDocumento"))
    '                Me.TablaC.Item(UCFDIComplemento.Index, j).Value = ds.Tables(0).Rows(j)("UsoCFDI")
    '                Me.TablaC.Item(RFCComplemento.Index, j).Value = ds.Tables(0).Rows(j)("RFC_Receptor")
    '                Me.TablaC.Item(NEmComplemento.Index, j).Value = ds.Tables(0).Rows(j)("Nombre_Receptor")
    '                Me.TablaC.Item(Conc.Index, j).Value = ds.Tables(0).Rows(j)("Descripcion")
    '                Me.TablaC.Item(MPc.Index, j).Value = ds.Tables(0).Rows(j)("MetodoDePagoDR")
    '                Me.TablaC.Item(FpagoComplemento.Index, j).Value = Trim(ds.Tables(0).Rows(j)("Forma_de_Pago"))
    '                Me.TablaC.Item(SerieXML.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Serie")) = True, "", ds.Tables(0).Rows(j)("Serie"))
    '                Dim PorcenPro, ImpSubt, ImpIvaP As Decimal ' Calcula valores de la factura
    '                Try
    '                    PorcenPro = ds.Tables(0).Rows(j)("Monto") / ImpFaCURA(Me.TablaC.Item(UUIDRComplemento.Index, j).Value, "Total_Real")
    '                Catch ex As Exception
    '                    PorcenPro = 0
    '                End Try
    '                'PorcenPro = ds.Tables(0).Rows(j)("Total") / ImpFaCURA(Me.TablaC.Item(UUIDRComplemento.Index, j).Value, "Total_Real")
    '                ImpIvaP = ImpFaCURA(Me.TablaC.Item(UUIDRComplemento.Index, j).Value, "IVA_real") * PorcenPro
    '                ImpSubt = ds.Tables(0).Rows(j)("Monto") - ImpIvaP

    '                Me.TablaC.Item(SubTotComplemento.Index, j).Value = ImpSubt
    '                Me.TablaC.Item(IvaComplemento.Index, j).Value = ImpIvaP
    '                Me.TablaC.Item(TotComplemento.Index, j).Value = ds.Tables(0).Rows(j)("ImpPagado")

    '                Me.TablaC.Item(LetraSatComplemento.Index, j).Value = ds.Tables(0).Rows(j)("Letra_Sat")

    '                Me.TablaC.Item(NomCtaComplemento.Index, j).Value = ds.Tables(0).Rows(j)("Nombre_cuenta")
    '                Try
    '                    If Trim(ds.Tables(0).Rows(j)("Clave")) <> "" Then
    '                        Fila.Cells(LetraContabilidadComplemento.Index).Value = Me.LetraContabilidadComplemento.Items(Obtener_indexletra(Trim(ds.Tables(0).Rows(j)("Clave"))))
    '                    End If

    '                Catch ex As Exception

    '                End Try
    '                Dim year As String = ds.Tables(0).Rows(j)("Fecha_Emision").ToString.Substring(6, 4)
    '                Dim month As String = ds.Tables(0).Rows(j)("Fecha_Emision").ToString.Substring(3, 2)
    '                Me.TablaC.Item(AnioComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Anio_Contable")) = True, year, ds.Tables(0).Rows(j)("Anio_Contable"))
    '                Me.TablaC.Item(MesComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Mes_Contable")) = True, month, ds.Tables(0).Rows(j)("Mes_Contable"))
    '                Me.TablaC.Item(ImpEfComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Efectivo")) = True, 0, ds.Tables(0).Rows(j)("Imp_Efectivo"))
    '                Me.TablaC.Item(CtaEfComplemento.Index, j).Value = ds.Tables(0).Rows(j)("Cuenta_Efectivo")
    '                Me.TablaC.Item(ImpTComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Transf")) = True, 0, ds.Tables(0).Rows(j)("Imp_Transf"))


    '                Me.TablaC.Item(BancoOrigenTComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Banco_Origen")) = True, "", ds.Tables(0).Rows(j)("Banco_Origen"))


    '                Me.TablaC.Item(CtaOTComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cuenta_Origen")) = True, "", ds.Tables(0).Rows(j)("Cuenta_Origen"))

    '                Try
    '                    If Trim(ds.Tables(0).Rows(j)("Banco_Destino")) <> "" Then
    '                        Fila.Cells(BancoDtComplemento.Index).Value = Me.BancoDtComplemento.Items(Obtener_indexBancodes(Trim(ds.Tables(0).Rows(j)("Banco_Destino"))))
    '                    End If
    '                Catch ex As Exception

    '                End Try

    '                Me.TablaC.Item(CtaDTComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cuenta_Destino")) = True, "", ds.Tables(0).Rows(j)("Cuenta_Destino"))
    '                Me.TablaC.Item(FTComplemento.Index, j).Value = ds.Tables(0).Rows(j)("Fecha_Transaccion")
    '                Me.TablaC.Item(ImpChComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Cheque")) = True, 0, ds.Tables(0).Rows(j)("Imp_Cheque"))

    '                Try
    '                    If Trim(ds.Tables(0).Rows(j)("Banco_Dest_Cheque")) <> "" Then
    '                        Fila.Cells(BancoDEC.Index).Value = Me.BancoDEC.Items(Obtener_indexBncoCh(Trim(ds.Tables(0).Rows(j)("Banco_Dest_Cheque"))))
    '                    End If
    '                Catch ex As Exception

    '                End Try
    '                Me.TablaC.Item(CtaBancoDChC.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cuenta_Dest_Cheque")) = True, "", ds.Tables(0).Rows(j)("Cuenta_Dest_Cheque"))
    '                Me.TablaC.Item(BancoCHComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Nom_Banco_Ch")) = True, "", ds.Tables(0).Rows(j)("Nom_Banco_Ch"))
    '                Me.TablaC.Item(CtaOchComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cuenta_Origen_Ch")) = True, "", ds.Tables(0).Rows(j)("Cuenta_Origen_Ch"))
    '                Me.TablaC.Item(NoChComplemento.Index, j).Value = ds.Tables(0).Rows(j)("No_Cheque")

    '                Me.TablaC.Item(FCHComplemento.Index, j).Value = ds.Tables(0).Rows(j)("Fecha_Ch")
    '                Me.TablaC.Item(CtaBancosComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cuenta_Bancos")) = True, "", ds.Tables(0).Rows(j)("Cuenta_Bancos"))
    '                Me.TablaC.Item(ProvAComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Provision_Acreedor")) = True, 0, ds.Tables(0).Rows(j)("Provision_Acreedor"))
    '                Me.TablaC.Item(ProvPComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Provision_Proveedor")) = True, 0, ds.Tables(0).Rows(j)("Provision_Proveedor"))
    '                Me.TablaC.Item(DifComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Diferencia")) = True, 0, ds.Tables(0).Rows(j)("Diferencia"))

    '                Try
    '                    If Trim(ds.Tables(0).Rows(j)("Tipo_Poliza")) <> "" Then
    '                        Fila.Cells(TipPolComplemento.Index).Value = Me.TipPolComplemento.Items(Obtener_indextipo(Trim(ds.Tables(0).Rows(j)("Tipo_Poliza"))))
    '                    End If

    '                Catch ex As Exception

    '                End Try

    '                Try
    '                    If Trim(ds.Tables(0).Rows(j)("Ser")) <> "" Then
    '                        Fila.Cells(SerC.Index).Value = Me.SerC.Items(Obtener_indexSerC(Trim(ds.Tables(0).Rows(j)("Ser"))))
    '                    End If

    '                Catch ex As Exception

    '                End Try
    '                '   Me.TablaImportar.Item(tipopoliza.INDEX, j).Value = ds.Tables(0).Rows(j)("Tipo_Poliza")
    '                Me.TablaC.Item(ImpGComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Grabado")) = True, 0, ds.Tables(0).Rows(j)("Imp_Grabado"))
    '                Me.TablaC.Item(ImpEComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Exento")) = True, 0, ds.Tables(0).Rows(j)("Imp_Exento"))
    '                Me.TablaC.Item(IvaRComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("IVA_real")) = True, 0, ds.Tables(0).Rows(j)("IVA_real"))
    '                Me.TablaC.Item(PPAComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Prc_Pago_Acumulado")) = True, 0, ds.Tables(0).Rows(j)("Prc_Pago_Acumulado"))
    '                Me.TablaC.Item(TRComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Total_Real")) = True, 0, ds.Tables(0).Rows(j)("Total_Real"))
    '                Me.TablaC.Item(MoneComplemento.Index, j).Value = ds.Tables(0).Rows(j)("Moneda")
    '                Me.TablaC.Item(UCComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Utilidad_Cambiaria")) = True, 0, ds.Tables(0).Rows(j)("Utilidad_Cambiaria"))
    '                Me.TablaC.Item(PCComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Perdida_Cambiaria")) = True, 0, ds.Tables(0).Rows(j)("Perdida_Cambiaria"))
    '                Me.TablaC.Item(ImpDevComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Devolucion")) = True, 0, ds.Tables(0).Rows(j)("Imp_Devolucion"))
    '                Me.TablaC.Item(CtaDevComplemento.Index, j).Value = ds.Tables(0).Rows(j)("Cuenta_Devolucion")

    '                Me.TablaC.Item(NumPolComplemento.Index, j).Value = ds.Tables(0).Rows(j)("numpol")
    '                Me.TablaC.Item(RISRComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("RIRS")) = True, 0, ds.Tables(0).Rows(j)("RIRS"))
    '                Me.TablaC.Item(RIVAComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("RIVA")) = True, 0, ds.Tables(0).Rows(j)("RIVA"))


    '                'Ajutes y Anticipos
    '                Me.TablaC.Item(AntiComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Anticipos")) = True, 0, ds.Tables(0).Rows(j)("Anticipos"))
    '                Me.TablaC.Item(CtaAntiComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cta_Ajuste")) = True, "", ds.Tables(0).Rows(j)("Cta_Ajuste"))
    '                Me.TablaC.Item(AjusComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Ajuste")) = True, 0, ds.Tables(0).Rows(j)("Ajuste"))
    '                Me.TablaC.Item(CtaAjusComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cta_Anticipos")) = True, "", ds.Tables(0).Rows(j)("Cta_Anticipos"))
    '                Try
    '                    If Trim(ds.Tables(0).Rows(j)("Cta_Orden")) <> "" Then
    '                        Fila.Cells(CtaOrdenC.Index).Value = Me.CtaOrdenC.Items(Obtener_indexCtaOrdenC(Trim(IIf(IsDBNull(ds.Tables(0).Rows(j)("Cta_Orden")) = True, "NO", ds.Tables(0).Rows(j)("Cta_Orden")))))
    '                    End If
    '                Catch ex As Exception

    '                End Try
    '                frm.Barra.value = j
    '            Next
    '        Catch ex As Exception

    '        End Try

    '        frm.Close()
    '    End Sub

    '    Private Sub Cargar_valores_contablesC()
    '        RadMessageBox.SetThemeName("MaterialBlueGrey")
    '        If Me.TablaC.Rows.Count >= 1 Then
    '            Dim frm As New BarraProcesovb
    '            frm.Show()
    '            frm.Text = "Calculando importes Gravados, Exentos e IVA´s de Pagos por favor espere..."
    '            frm.Barra.Minimum = 0
    '            frm.Barra.Maximum = Me.TablaC.Rows.Count
    '            For i As Integer = 0 To Me.TablaC.Rows.Count - 1

    '                Try


    '                    Dim PorcenPro, ImpGpro, ImpEpro, ImpIvaP As Decimal
    '                    PorcenPro = Me.TablaC.Item(TotComplemento.Index, i).Value / ImpFaCURA(Me.TablaC.Item(UUIDRComplemento.Index, i).Value, "Total_Real")
    '                    ImpGpro = ImpFaCURA(Me.TablaC.Item(UUIDRComplemento.Index, i).Value, "Imp_Grabado") * PorcenPro
    '                    ImpEpro = ImpFaCURA(Me.TablaC.Item(UUIDRComplemento.Index, i).Value, "Imp_Exento") * PorcenPro
    '                    ImpIvaP = ImpFaCURA(Me.TablaC.Item(UUIDRComplemento.Index, i).Value, "IVA_real") * PorcenPro

    '                    Me.TablaC.Item(SubTotComplemento.Index, i).Value = ImpFaCURA(Me.TablaC.Item(UUIDRComplemento.Index, i).Value, "Total_Real")
    '                    Me.TablaC.Item(IvaComplemento.Index, i).Value = ImpFaCURA(Me.TablaC.Item(UUIDRComplemento.Index, i).Value, "IVA_real")


    '                    If Trim(Me.TablaC.Item(MoneComplemento.Index, i).Value.ToString) <> "USD" Then
    '                        If Me.TablaC.Item(TotComplemento.Index, i).Value > 0 And Me.TablaC.Item(TotComplemento.Index, i).Value <> Nothing Then
    '                            'importe gravado
    '                            Me.TablaC.Item(ImpGComplemento.Index, i).Value = ImpGpro
    '                            'importe exento
    '                            Me.TablaC.Item(ImpEComplemento.Index, i).Value = ImpEpro
    '                            'Iva_real
    '                            Me.TablaC.Item(IvaRComplemento.Index, i).Value = ImpIvaP
    '                            'calcula el % Pago Acumulado
    '                            If Me.TablaC.Item(ImpEComplemento.Index, i).Value < 1 Then
    '                                Me.TablaC.Item(ImpGComplemento.Index, i).Value = Me.TablaC.Item(ImpGComplemento.Index, i).Value + Me.TablaC.Item(ImpEComplemento.Index, i).Value
    '                                Me.TablaC.Item(ImpEComplemento.Index, i).Value = 0
    '                            End If
    '                            'Total real

    '                            If Me.TablaC.Item(IvaComplemento.Index, i).Value = 0 Then
    '                                Me.TablaC.Item(TRComplemento.Index, i).Value = Me.TablaC.Item(TotComplemento.Index, i).Value
    '                            Else
    '                                Me.TablaC.Item(TRComplemento.Index, i).Value = Me.TablaC.Item(ImpGComplemento.Index, i).Value + Me.TablaC.Item(ImpEComplemento.Index, i).Value + Me.TablaC.Item(IvaRComplemento.Index, i).Value
    '                            End If

    '                        End If
    '                    Else
    '                        ' calcular en dolares
    '                        If Me.TablaC.Item(TotComplemento.Index, i).Value > 0 And Me.TablaC.Item(TotComplemento.Index, i).Value <> Nothing Then
    '                            'importe gravado
    '                            Me.TablaC.Item(ImpGComplemento.Index, i).Value = ImpGpro * Calcula_Moneda(Me.TablaC.Item(FechaEComplemento.Index, i).Value.ToString.Substring(0, 10)) / 0.16
    '                            'importe exento
    '                            Me.TablaC.Item(ImpEComplemento.Index, i).Value = ImpEpro * Calcula_Moneda(Me.TablaC.Item(FechaEComplemento.Index, i).Value.ToString.Substring(0, 10))
    '                            'Iva_real
    '                            Me.TablaC.Item(IvaRComplemento.Index, i).Value = ImpIvaP
    '                            'calcula el % Pago Acumulado
    '                            'Total real
    '                            If Me.TablaC.Item(ImpEComplemento.Index, i).Value < 1 Then
    '                                Me.TablaC.Item(ImpGComplemento.Index, i).Value = Me.TablaC.Item(ImpGComplemento.Index, i).Value + Me.TablaC.Item(ImpEComplemento.Index, i).Value
    '                                Me.TablaC.Item(ImpEComplemento.Index, i).Value = 0
    '                            End If
    '                            If Me.TablaC.Item(IvaComplemento.Index, i).Value = 0 Then
    '                                Me.TablaC.Item(TRComplemento.Index, i).Value = Me.TablaC.Item(TotComplemento.Index, i).Value
    '                            Else
    '                                Me.TablaC.Item(TRComplemento.Index, i).Value = Me.TablaC.Item(ImpGComplemento.Index, i).Value + Me.TablaC.Item(ImpEComplemento.Index, i).Value + Me.TablaC.Item(IvaRComplemento.Index, i).Value
    '                            End If
    '                        End If

    '                    End If
    '                Catch ex As Exception
    '                    Me.TablaC.Rows(i).DefaultCellStyle.BackColor = Color.Red
    '                End Try
    '                frm.Barra.value = i
    '            Next
    '            frm.Close()
    '        End If
    '    End Sub
    '    Private Sub Color_ColumnasC()
    '        Dim contador As Integer = 0
    '        Dim frm As New BarraProcesovb
    '        frm.Show()
    '        frm.Text = "Asignando codigo de colores por favor espere..."
    '        frm.Barra.Minimum = 0
    '        frm.Barra.Maximum = Me.TablaC.Columns.Count
    '        For Each Column As DataGridViewColumn In TablaC.Columns
    '            If Column.Index = AnioComplemento.Index Or Column.Index = MesComplemento.Index Or Column.Index = BancoOrigenTComplemento.Index Or Column.Index = BancoDtComplemento.Index Or Column.Index = FTComplemento.Index Or Column.Index = BancoCHComplemento.Index Or Column.Index = NoChComplemento.Index Or Column.Index = FCHComplemento.Index Or Column.Index = ProvAComplemento.Index Or Column.Index = ProvPComplemento.Index Or Column.Index = UCComplemento.Index Or Column.Index = PCComplemento.Index Or Column.Index = ImpDevComplemento.Index Or Column.Index = CtaDevComplemento.Index Then
    '                Column.DefaultCellStyle.BackColor = Color.RoyalBlue
    '            ElseIf Column.Index = AjusComplemento.Index Then
    '                Column.DefaultCellStyle.BackColor = Color.GreenYellow
    '            ElseIf Column.Index = AntiComplemento.Index Then
    '                Column.DefaultCellStyle.BackColor = Color.LawnGreen
    '            ElseIf Column.Index = ImpProviComplemento.Index Then
    '                Column.DefaultCellStyle.BackColor = Color.MediumPurple
    '            ElseIf Column.Index = TipPolComplemento.Index Or Column.Index = NumPolComplemento.Index Then
    '                Column.DefaultCellStyle.BackColor = Color.Orange
    '            ElseIf Column.Index = NomCtaComplemento.Index Or Column.Index = CtaBancosComplemento.Index Or Column.Index = CtaChequesC.Index Then
    '                Column.DefaultCellStyle.BackColor = Color.Orange
    '            ElseIf Column.Index = ImpEfComplemento.Index Or Column.Index = ImpTComplemento.Index Or Column.Index = ImpChComplemento.Index Then
    '                Column.DefaultCellStyle.BackColor = Color.OliveDrab
    '            End If
    '            frm.Barra.value += 1
    '        Next
    '        frm.Close()
    '    End Sub
    '    Private Sub CmdProcesaComple_Click(sender As Object, e As EventArgs) Handles CmdProcesaComple.Click
    '        RadMessageBox.SetThemeName("MaterialBlueGrey")
    '        If Me.TablaC.Rows.Count > 0 Then
    '            If Me.lstCliente.SelectText <> "" Then
    '                If Verifica_catalogo_cliente(Me.lstCliente.SelectItem) = True Then
    '                    Guardar_Complementos()
    '                    If MessageBox.Show("La Empresa " & Me.lstCliente.SelectText & " es correcta?", Eventos.titulo_app, MessageBoxButtons.YesNo, MessageBoxIcon.Question) = Windows.Forms.DialogResult.Yes Then
    '                        Me.BarraComple.Maximum = Me.TablaC.RowCount - 1
    '                        Me.BarraComple.Minimum = 0
    '                        Me.BarraComple.Value1 = 0

    '                        For p As Integer = 0 To Me.TablaC.RowCount - 1
    '                            If Me.TablaC.Item(ApliComplemento.Index, p).Value = True Then ' se paso todos los filtros de creacion
    '                                Codificar_polizasComplementos(p)
    '                            End If
    '                            If Me.BarraComple.Value1 = Me.BarraComple.Maximum Then
    '                                Me.BarraComple.Minimum = 0
    '                                Me.Cursor = Cursors.Arrow
    '                                RadMessageBox.Show("Proceso Terminado", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
    '                                Me.BarraComple.Value1 = 0
    '                            Else
    '                                Me.BarraComple.Value1 += 1
    '                            End If
    '                        Next
    '                    End If
    '                Else
    '                    RadMessageBox.Show("No existe Catalogo de cuentas para: " & Me.lstCliente.SelectText & "", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
    '                End If
    '                Me.CmdBuscarComple.PerformClick()
    '            Else
    '                RadMessageBox.Show("No se ha seleccionado una Empresa", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
    '            End If



    '        Else
    '            RadMessageBox.Show("No se ha Importado ningun archivo", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
    '        End If
    '    End Sub
    '    Private Sub Guardar_Complementos()
    '        RadMessageBox.SetThemeName("MaterialBlueGrey")
    '        If Me.TablaC.Rows.Count >= 1 Then
    '            For i As Integer = 0 To Me.TablaC.Rows.Count - 1

    '                Guardar_Cmpl(IIf(IsDBNull(Me.TablaC.Item(LetraSatComplemento.Index, i).Value), "", Me.TablaC.Item(LetraSatComplemento.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(NomCtaComplemento.Index, i).Value), "", Me.TablaC.Item(NomCtaComplemento.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(LetraContabilidadComplemento.Index, i).Value), "", Me.TablaC.Item(LetraContabilidadComplemento.Index, i).Value),
    '                           Me.TablaC.Item(AnioComplemento.Index, i).Value, Me.TablaC.Item(MesComplemento.Index, i).Value, Me.TablaC.Item(ImpEfComplemento.Index, i).Value, IIf(IsDBNull(Me.TablaC.Item(CtaEfComplemento.Index, i).Value), "", Me.TablaC.Item(CtaEfComplemento.Index, i).Value),
    '                           Me.TablaC.Item(ImpTComplemento.Index, i).Value, IIf(IsDBNull(Me.TablaC.Item(BancoOrigenTComplemento.Index, i).Value), "", Me.TablaC.Item(BancoOrigenTComplemento.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(CtaOTComplemento.Index, i).Value), "", Me.TablaC.Item(CtaOTComplemento.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(BancoDtComplemento.Index, i).Value), "", Me.TablaC.Item(BancoDtComplemento.Index, i).Value),
    '                           IIf(IsDBNull(Me.TablaC.Item(FTComplemento.Index, i).Value), "", Me.TablaC.Item(FTComplemento.Index, i).Value), Me.TablaC.Item(ImpChComplemento.Index, i).Value, IIf(IsDBNull(Me.TablaC.Item(BancoCHComplemento.Index, i).Value), "", Me.TablaC.Item(BancoCHComplemento.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(CtaOchComplemento.Index, i).Value), "", Me.TablaC.Item(CtaOchComplemento.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(NoChComplemento.Index, i).Value), "", Me.TablaC.Item(NoChComplemento.Index, i).Value),
    '                          IIf(IsDBNull(Me.TablaC.Item(FCHComplemento.Index, i).Value), "", Me.TablaC.Item(FCHComplemento.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(CtaBancosComplemento.Index, i).Value), "", Me.TablaC.Item(CtaBancosComplemento.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(ProvAComplemento.Index, i).Value), 0, Me.TablaC.Item(ProvAComplemento.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(ProvPComplemento.Index, i).Value), 0, Me.TablaC.Item(ProvPComplemento.Index, i).Value),
    '                           IIf(IsDBNull(Me.TablaC.Item(DifComplemento.Index, i).Value), 0, Me.TablaC.Item(DifComplemento.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(TipPolComplemento.Index, i).Value), "", Me.TablaC.Item(TipPolComplemento.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(ImpGComplemento.Index, i).Value), 0, Me.TablaC.Item(ImpGComplemento.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(ImpEComplemento.Index, i).Value), 0, Me.TablaC.Item(ImpEComplemento.Index, i).Value),
    '                          IIf(IsDBNull(Me.TablaC.Item(IvaRComplemento.Index, i).Value), 0, Me.TablaC.Item(IvaRComplemento.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(PPAComplemento.Index, i).Value), 0, Me.TablaC.Item(PPAComplemento.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(TRComplemento.Index, i).Value), 0, Me.TablaC.Item(TRComplemento.Index, i).Value), Me.TablaC.Item(UCComplemento.Index, i).Value, IIf(IsDBNull(Me.TablaC.Item(PCComplemento.Index, i).Value), 0, Me.TablaC.Item(PCComplemento.Index, i).Value),
    '                           Me.TablaC.Item(ImpDevComplemento.Index, i).Value, IIf(IsDBNull(Me.TablaC.Item(CtaDevComplemento.Index, i).Value), "", Me.TablaC.Item(CtaDevComplemento.Index, i).Value), Me.TablaC.Item(Id_Complemento.Index, i).Value, IIf(IsDBNull(Me.TablaC.Item(NumPolComplemento.Index, i).Value), "", Me.TablaC.Item(NumPolComplemento.Index, i).Value), Me.TablaC.Item(RISRComplemento.Index, i).Value, Me.TablaC.Item(RIVAComplemento.Index, i).Value,
    '                           IIf(IsDBNull(Me.TablaC.Item(CtaDTComplemento.Index, i).Value), "", Me.TablaC.Item(CtaDTComplemento.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(AjusComplemento.Index, i).Value), 0, Me.TablaC.Item(AjusComplemento.Index, i).Value),
    '                           IIf(IsDBNull(Me.TablaC.Item(CtaAjusComplemento.Index, i).Value), "", Me.TablaC.Item(CtaAjusComplemento.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(AntiComplemento.Index, i).Value), 0, Me.TablaC.Item(AntiComplemento.Index, i).Value),
    '                           IIf(IsDBNull(Me.TablaC.Item(CtaAntiComplemento.Index, i).Value), "", Me.TablaC.Item(CtaAntiComplemento.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(ImpProviComplemento.Index, i).Value), 0, Me.TablaC.Item(ImpProviComplemento.Index, i).Value),
    '                           IIf(IsDBNull(Me.TablaC.Item(CtaOrdenC.Index, i).Value), "", Me.TablaC.Item(CtaOrdenC.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(SerC.Index, i).Value), "", Me.TablaC.Item(SerC.Index, i).Value),
    'IIf(IsDBNull(Me.TablaC.Item(BancoDEC.Index, i).Value), "", Me.TablaC.Item(BancoDEC.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(CtaBancoDChC.Index, i).Value), "", Me.TablaC.Item(CtaBancoDChC.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(CtaChequesC.Index, i).Value), "", Me.TablaC.Item(CtaChequesC.Index, i).Value))
    '            Next
    '            RadMessageBox.Show("Proceso Guardado Completado ...", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
    '        End If
    '    End Sub

    '    Private Sub Guardar_Cmpl(ByVal Letra_Sat As String, ByVal Nombre_cuenta As String, ByVal Clave As String,
    '                            ByVal Anio_Contable As String, ByVal Mes_Contable As String, ByVal Imp_Efectivo As Decimal, ByVal Cuenta_Efectivo As String,
    '                            ByVal Imp_Transf As Decimal, ByVal Banco_Origen As String, ByVal Cuenta_Origen As String, ByVal Banco_Destino As String,
    '                            ByVal Fecha_Transaccion As String, ByVal Imp_Cheque As Decimal, ByVal Nom_Banco_Ch As String, ByVal Cuenta_Origen_Ch As String, ByVal No_Cheque As String,
    '                            ByVal Fecha_Ch As String, ByVal Cuenta_Bancos As String, ByVal Provision_Acreedor As Decimal, ByVal Provision_Proveedor As Decimal,
    '                            ByVal Diferencia As Decimal, ByVal Tipo_Poliza As String, ByVal Imp_Grabado As Decimal, ByVal Imp_Exento As Decimal,
    '                            ByVal IVA_real As Decimal, ByVal Prc_Pago_Acumulado As Decimal, ByVal Total_Real As Decimal, ByVal Utilidad_Cambiaria As Decimal, ByVal Perdida_Cambiaria As Decimal,
    '                            ByVal Imp_Devolucion As Decimal, ByVal Cuenta_Devolucion As String, ByVal Id_Registro_Xml As Integer, ByVal numpol As String, ByVal risr As Decimal, ByVal riva As Decimal,
    '                            ByVal ctadestino As String, ByVal ajus As Decimal, ByVal ctaajus As String, ByVal anti As Decimal, ByVal ctaanti As String, ByVal ImpProvis As Decimal, ByVal CtaOrden As String, ByVal Ser As String,
    '                             ByVal Banco_Dest_Cheque As String, ByVal Cuenta_Dest_Cheque As String, ByVal Cuenta_Cheques As String)
    '        Dim sql As String = "UPDATE dbo.Xml_Complemento
    '                SET 		Letra_Sat = '" & Letra_Sat & "',
    '                	Nombre_cuenta = '" & Nombre_cuenta & "',
    '                	Clave = '" & Clave & "',
    '                	Anio_Contable = '" & Anio_Contable & "',
    '                	Mes_Contable = '" & Mes_Contable & "',
    '                	Imp_Efectivo = " & Imp_Efectivo & ",
    '                	Cuenta_Efectivo = '" & Cuenta_Efectivo & "',
    '                	Imp_Transf = " & Imp_Transf & ",
    '                	Banco_Origen = '" & Banco_Origen & "',
    '                	Cuenta_Origen = '" & Cuenta_Origen & "',
    '                	Banco_Destino = '" & Banco_Destino & "',
    '                	Fecha_Transaccion = " & Eventos.Sql_hoy(Fecha_Transaccion) & ",
    '                	Imp_Cheque =" & Imp_Cheque & ",
    '                	Nom_Banco_Ch = '" & Nom_Banco_Ch & "',
    '                	Cuenta_Origen_Ch = '" & Cuenta_Origen_Ch & "',
    '                	No_Cheque = '" & No_Cheque & "',
    '                	Fecha_Ch = " & Eventos.Sql_hoy(Fecha_Ch) & ",
    '                	Cuenta_Bancos = '" & Cuenta_Bancos & "',
    '                	Provision_Acreedor = " & Provision_Acreedor & ",
    '                	Provision_Proveedor = " & Provision_Proveedor & ",
    '                	Diferencia = " & Diferencia & ",
    '                	Tipo_Poliza = '" & Tipo_Poliza & "',
    '                	Imp_Grabado =  " & Imp_Grabado & ",
    '                	Imp_Exento =  " & Imp_Exento & ",
    '                	IVA_real =  " & IVA_real & ",
    '                	Prc_Pago_Acumulado =  " & Prc_Pago_Acumulado & ",
    '                	Total_Real =  " & Total_Real & ",
    '                	Utilidad_Cambiaria =  " & Utilidad_Cambiaria & ",
    '                	Perdida_Cambiaria =  " & Perdida_Cambiaria & ",
    '                	Imp_Devolucion =  " & Imp_Devolucion & ",
    '                	Cuenta_Devolucion = '" & Cuenta_Devolucion & "', 
    '                    Numpol= '" & Trim(numpol) & "', 
    '                     RIRS= " & risr & ", 
    '                     RIVA= " & riva & ", 
    '                     Cuenta_Destino= '" & ctadestino & "',
    '                      Ajuste= " & ajus & ", 
    '                     Anticipos= " & anti & ",  
    '                       Cta_Ajuste= '" & ctaajus & "', 
    '                     Cta_Anticipos= '" & ctaanti & "',
    '                           Cta_Orden= '" & CtaOrden & "',
    '                     Ser= '" & Ser & "' ,  Banco_Dest_Cheque= '" & Banco_Dest_Cheque & "', Cuenta_Dest_Cheque= '" & Cuenta_Dest_Cheque & "',Cuenta_Cheques= '" & Cuenta_Cheques & "'

    '                WHERE Id_Xml_Complemento = " & Id_Registro_Xml & ""
    '        If Eventos.Comando_sql(sql) > 0 Then
    '            Eventos.Insertar_usuariol("GuardaXMLC", sql)
    '        End If
    '    End Sub

    '    Private Sub Codificar_polizasComplementos(ByVal posicion As Integer)
    '        Dim poliza_Sistema As String = ""
    '        '  If Me.TablaImportar.Item(Psistema.Index, posicion).Value <> "" Then ' quitar linea despues del desbloqueo
    '        poliza_Sistema = Calcula_polizaC(posicion)
    '        '  End If

    '        'Calcular consecutivo poliza
    '        Dim posi As Integer = InStr(1, poliza_Sistema, "-", CompareMethod.Binary)
    '        Dim cuantos As Integer = Len(poliza_Sistema) - Len(poliza_Sistema.Substring(0, posi))
    '        Dim consecutivo As Integer = Val(poliza_Sistema.Substring(posi, cuantos))
    '        'Crear poliza
    '        'Checar dia de la Poliza poner if
    '        Dim dia As String = ""
    '        If Me.TablaC.Item(ImpTComplemento.Index, posicion).Value > 0 Then
    '            dia = Me.TablaC.Item(FTComplemento.Index, posicion).Value.ToString.Substring(0, 2)
    '        ElseIf Me.TablaC.Item(ImpEfComplemento.Index, posicion).Value > 0 Then
    '            dia = Me.TablaC.Item(FechaEComplemento.Index, posicion).Value.ToString.Substring(0, 2)
    '        ElseIf Me.TablaC.Item(ImpChComplemento.Index, posicion).Value > 0 Then
    '            dia = Me.TablaC.Item(FCHComplemento.Index, posicion).Value.ToString.Substring(0, 2)
    '        Else
    '            dia = Me.TablaC.Item(FechaEComplemento.Index, posicion).Value.ToString.Substring(0, 2)
    '        End If
    '        ' CREAR iF para calcular el dia
    '        If Creapoliza(poliza_Sistema, Me.TablaC.Item(AnioComplemento.Index, posicion).Value, Me.TablaC.Item(MesComplemento.Index, posicion).Value, dia,
    '                   consecutivo, Checa_tipo(Me.TablaC.Item(TipPolComplemento.Index, posicion).Value, Me.lstCliente.SelectItem),
    '                   Me.TablaC.Item(FechaEComplemento.Index, posicion).Value, "Pago S/Fact" & " " & Trim(Me.TablaC.Item(UUIDComplemento.Index, posicion).Value), "Carga", Me.TablaC.Item(NumPolComplemento.Index, posicion).Value, Me.TablaC.Item(Id_Complemento.Index, posicion).Value, True) = True Then

    '            If Buscafactura(Me.TablaC.Item(UUIDComplemento.Index, posicion).Value, "C") = True Then
    '                'Se inserta la Factura
    '                Inserta_Comprobante_Fiscal(poliza_Sistema, Me.TablaC.Item(AnioComplemento.Index, posicion).Value, Me.TablaC.Item(MesComplemento.Index, posicion).Value,
    '                             Me.TablaC.Item(RFCComplemento.Index, posicion).Value, Me.TablaC.Item(FechaEComplemento.Index, posicion).Value,
    '                               Me.TablaC.Item(UUIDComplemento.Index, posicion).Value, "Factura " & Trim(Me.TablaC.Item(RFCComplemento.Index, posicion).Value) & " C", Me.TablaC.Item(TRComplemento.Index, posicion).Value)
    '            Else
    '                'Se Edita la Factura
    '                ' Edita_Factura(Me.TablaC.Item(UUIDComplemento.Index, posicion).Value, "C", poliza_Sistema)
    '            End If


    '            If Me.TablaC.Item(ImpEfComplemento.Index, posicion).Value > 0 Then
    '                ' Insertar registro contabiidad electronica efectivo
    '                Inserta_Comprobante_Fiscal_Efectivo(poliza_Sistema, Me.TablaC.Item(AnioComplemento.Index, posicion).Value, Me.TablaC.Item(MesComplemento.Index, posicion).Value,
    '                                Me.TablaC.Item(RFCComplemento.Index, posicion).Value, Me.TablaC.Item(TipPolComplemento.Index, posicion).Value.ToString.Substring(0, 3), Me.TablaC.Item(FechaEComplemento.Index, posicion).Value,
    '                              "", "", "", "", Me.TablaC.Item(ImpEfComplemento.Index, posicion).Value)
    '            End If
    '            If Trim(UCase(Me.lblce.Text)) = "TRUE" Then ' SE INSERTA CONTABILIDAD ELECTRONICA

    '                If Me.TablaC.Item(ImpTComplemento.Index, posicion).Value > 0 Then
    '                    ' Insertar registro contabiidad electronica Transferencia
    '                    Dim cadena As String = Me.TablaC.Item(BancoOrigenTComplemento.Index, posicion).Value
    '                    Dim posil As Integer = InStr(1, cadena, "-", CompareMethod.Binary)
    '                    Dim BO As String = cadena.Substring(0, posil - 1)

    '                    cadena = Me.TablaC.Item(BancoDtComplemento.Index, posicion).Value
    '                    posil = InStr(1, cadena, "-", CompareMethod.Binary)
    '                    Dim Bd As String = cadena.Substring(0, posil - 1)

    '                    Inserta_Comprobante_Fiscal_Transf(poliza_Sistema, Me.TablaC.Item(AnioComplemento.Index, posicion).Value, Me.TablaC.Item(MesComplemento.Index, posicion).Value,
    '                                    Me.TablaC.Item(RFCComplemento.Index, posicion).Value, Me.TablaC.Item(TipPolComplemento.Index, posicion).Value.ToString.Substring(0, 3), Me.TablaC.Item(FTComplemento.Index, posicion).Value,
    '                                  "", BO, Me.TablaC.Item(CtaOTComplemento.Index, posicion).Value, Me.TablaC.Item(UUIDComplemento.Index, posicion).Value, Me.TablaC.Item(ImpTComplemento.Index, posicion).Value, Bd, Me.TablaC.Item(CtaDTComplemento.Index, posicion).Value)
    '                End If

    '                If Me.TablaC.Item(ImpChComplemento.Index, posicion).Value > 0 Then
    '                    ' Insertar registro contabiidad electronica Cheque
    '                    Dim cadena As String = Me.TablaC.Item(BancoCHComplemento.Index, posicion).Value
    '                    Dim posil As Integer = InStr(1, cadena, "-", CompareMethod.Binary)
    '                    Dim BO As String = cadena.Substring(0, posil - 1)

    '                    Inserta_Comprobante_Fiscal_Cheque(poliza_Sistema, Me.TablaC.Item(AnioComplemento.Index, posicion).Value, Me.TablaC.Item(MesComplemento.Index, posicion).Value,
    '                                    Me.TablaC.Item(RFCComplemento.Index, posicion).Value, Me.TablaC.Item(TipPolComplemento.Index, posicion).Value.ToString.Substring(0, 3), Me.TablaC.Item(FCHComplemento.Index, posicion).Value,
    '                                  Me.TablaC.Item(NoChComplemento.Index, posicion).Value, BO, Me.TablaC.Item(CtaOchComplemento.Index, posicion).Value, Me.TablaC.Item(UUIDComplemento.Index, posicion).Value, Me.TablaC.Item(ImpChComplemento.Index, posicion).Value)
    '                End If
    '            End If

    '            'Verificara el sistema las polizas automatizadas
    '            Crear_detalleComple(posicion, poliza_Sistema)
    '        End If

    '    End Sub
    '    Private Sub Crear_detalleComple(ByVal p As Integer, ByVal pol As String)
    '        Dim Item As Integer = 1
    '        Dim cadena As String = Trim(Me.TablaC.Item(NomCtaComplemento.Index, p).Value)
    '        Dim posi As Integer = InStr(1, cadena, "-", CompareMethod.Binary)
    '        Dim cuantos As Integer = Len(cadena) - Len(cadena.Substring(0, posi))
    '        Dim Cuenta_Cargo As String = cadena.Substring(posi, cuantos)
    '        Dim Cuenta2 As String = ""

    '        '1° Inserta los Bancos
    '        If Me.TablaC.Item(ImpEfComplemento.Index, p).Value > 0 And Me.TablaC.Item(ImpTComplemento.Index, p).Value > 0 And Me.TablaC.Item(ImpChComplemento.Index, p).Value > 0 Then 'TODOS

    '            cadena = Trim(Me.TablaC.Item(CtaEfComplemento.Index, p).Value)
    '            posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '            Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpEfComplemento.Index, p).Value, 0, Cuenta_Cargo, "")

    '            Item = Item + 1

    '            cadena = Trim(Me.TablaC.Item(CtaBancosComplemento.Index, p).Value)
    '            posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '            Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpTComplemento.Index, p).Value, 0, Cuenta_Cargo, "")

    '            Item = Item + 1
    '            cadena = Trim(Me.TablaC.Item(CtaChequesC.Index, p).Value)
    '            posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '            Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpChComplemento.Index, p).Value, 0, Cuenta_Cargo, Me.TablaC.Item(NoChComplemento.Index, p).Value)


    '        ElseIf Me.TablaC.Item(ImpEfComplemento.Index, p).Value > 0 And Me.TablaC.Item(ImpTComplemento.Index, p).Value > 0 And Me.TablaC.Item(ImpChComplemento.Index, p).Value = 0 Then 'Efectivo y Transferencia
    '            cadena = Trim(Me.TablaC.Item(CtaEfComplemento.Index, p).Value)
    '            posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '            Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpEfComplemento.Index, p).Value, 0, Cuenta_Cargo, "")
    '            Item = Item + 1
    '            cadena = Trim(Me.TablaC.Item(CtaBancosComplemento.Index, p).Value)
    '            posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '            Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpTComplemento.Index, p).Value, 0, Cuenta_Cargo, "")

    '        ElseIf Me.TablaC.Item(ImpEfComplemento.Index, p).Value = 0 And Me.TablaC.Item(ImpTComplemento.Index, p).Value > 0 And Me.TablaC.Item(ImpChComplemento.Index, p).Value > 0 Then 'Cheque y Transferencia

    '            cadena = Trim(Me.TablaC.Item(CtaBancosComplemento.Index, p).Value)
    '            posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '            Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpTComplemento.Index, p).Value, 0, Cuenta_Cargo, "")
    '            Item = Item + 1
    '            cadena = Trim(Me.TablaC.Item(CtaChequesC.Index, p).Value)
    '            posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '            Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpChComplemento.Index, p).Value, 0, Cuenta_Cargo, Me.TablaC.Item(NoChComplemento.Index, p).Value)

    '        ElseIf Me.TablaC.Item(ImpEfComplemento.Index, p).Value > 0 And Me.TablaC.Item(ImpTComplemento.Index, p).Value = 0 And Me.TablaC.Item(ImpChComplemento.Index, p).Value > 0 Then 'Cheque y Efecivo
    '            cadena = Trim(Me.TablaC.Item(CtaEfComplemento.Index, p).Value)
    '            posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '            Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpEfComplemento.Index, p).Value, 0, Cuenta_Cargo, "")
    '            Item = Item + 1
    '            cadena = Trim(Me.TablaC.Item(CtaChequesC.Index, p).Value)
    '            posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '            Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpChComplemento.Index, p).Value, 0, Cuenta_Cargo, Me.TablaC.Item(NoChComplemento.Index, p).Value)
    '        ElseIf Me.TablaC.Item(ImpEfComplemento.Index, p).Value > 0 And Me.TablaC.Item(ImpTComplemento.Index, p).Value = 0 And Me.TablaC.Item(ImpChComplemento.Index, p).Value = 0 Then ' Efecivo
    '            'Cuenta del Abono
    '            cadena = Trim(Me.TablaC.Item(CtaEfComplemento.Index, p).Value)
    '            posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '            Cuenta_Cargo = cadena.Substring(posi, cuantos)

    '            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpEfComplemento.Index, p).Value, 0, Cuenta_Cargo, "")

    '        ElseIf Me.TablaC.Item(ImpEfComplemento.Index, p).Value = 0 And Me.TablaC.Item(ImpTComplemento.Index, p).Value > 0 And Me.TablaC.Item(ImpChComplemento.Index, p).Value = 0 Then ' Transferencia
    '            'Cuenta del Abono transferencia
    '            cadena = Trim(Me.TablaC.Item(CtaBancosComplemento.Index, p).Value)
    '            posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '            Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpTComplemento.Index, p).Value, 0, Cuenta_Cargo, IIf(IsDBNull(Me.TablaC.Item(NoChComplemento.Index, p).Value) = True, "", Me.TablaC.Item(NoChComplemento.Index, p).Value))

    '        ElseIf Me.TablaC.Item(ImpEfComplemento.Index, p).Value = 0 And Me.TablaC.Item(ImpTComplemento.Index, p).Value = 0 And Me.TablaC.Item(ImpChComplemento.Index, p).Value > 0 Then 'Cheque 
    '            cadena = Trim(Me.TablaC.Item(CtaChequesC.Index, p).Value)
    '            posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '            Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpChComplemento.Index, p).Value, 0, Cuenta_Cargo, Me.TablaC.Item(NoChComplemento.Index, p).Value)

    '        End If


    '        '2° Inserta Ajustes

    '        If Me.TablaC.Item(AjusComplemento.Index, p).Value < 0 Then ' Se verifica si cuenta con ajuste +
    '            cadena = Trim(Me.TablaC.Item(CtaAjusComplemento.Index, p).Value)
    '            posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '            Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '            'cargo de Ajuste
    '            Crea_detalle_poliza(pol, Item, 0, Me.TablaC.Item(AjusComplemento.Index, p).Value * -1, Cuenta_Cargo, "")
    '            Item = Item + 1
    '        ElseIf Me.TablaC.Item(AjusComplemento.Index, p).Value > 0 Then ' Se verifica si cuenta con ajuste -

    '            cadena = Trim(Me.TablaC.Item(CtaAjusComplemento.Index, p).Value)
    '            posi = InStr(1, cadena, "-", CompareMethod.Binary)
    '            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
    '            Cuenta_Cargo = cadena.Substring(posi, cuantos)
    '            'Abono de Ajuste
    '            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(AjusComplemento.Index, p).Value, 0, Cuenta_Cargo, "")
    '            Item = Item + 1
    '        End If
    '        If Me.TablaC.Item(PCComplemento.Index, p).Value > 0 Then ' Se perdida cambiaria
    '            Item = Item + 1
    '            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(PCComplemento.Index, p).Value, 0, "7010000100000000", "")
    '        End If
    '        If Me.TablaC.Item(UCComplemento.Index, p).Value > 0 Then ' Se utilidad cambiaria
    '            Item = Item + 1
    '            Crea_detalle_poliza(pol, Item, 0, Me.TablaC.Item(UCComplemento.Index, p).Value, "7020000100000000", "")
    '        End If

    '        Item = Item + 1
    '        'Cancela Cuenta Cliente
    '        Cuenta_Cargo = RegresaCunetaComple(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "Clientes", Me.TablaC.Item(SerC.Index, p).Value), Trim(Me.TablaC.Item(RFCComplemento.Index, p).Value), p, 1)
    '        Crea_detalle_poliza(pol, Item, 0, Me.TablaC.Item(TRComplemento.Index, p).Value, Cuenta_Cargo, "")

    '        Dim PorcenPro, ImpGpro, ImpEpro, ImpIvaP As Decimal
    '        PorcenPro = Me.TablaC.Item(TRComplemento.Index, p).Value / ImpFaCURA(Me.TablaC.Item(UUIDRComplemento.Index, p).Value, "Total_Real")
    '        ImpGpro = ImpFaCURA(Me.TablaC.Item(UUIDRComplemento.Index, p).Value, "Imp_Grabado") * PorcenPro
    '        ImpEpro = ImpFaCURA(Me.TablaC.Item(UUIDRComplemento.Index, p).Value, "Imp_Exento") * PorcenPro
    '        ImpIvaP = ImpFaCURA(Me.TablaC.Item(UUIDRComplemento.Index, p).Value, "IVA_real") * PorcenPro



    '        If Me.TablaC.Item(ImpEComplemento.Index, p).Value > 0 And Me.TablaC.Item(ImpGComplemento.Index, p).Value > 0 And Me.TablaC.Item(IvaRComplemento.Index, p).Value > 0 Then ' tiene grabado y exento

    '            Cuenta2 = RegresaCunetaComple(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCE", Me.TablaC.Item(SerC.Index, p).Value), Trim(Me.TablaC.Item(RFCComplemento.Index, p).Value), p, 1)
    '            Cuenta_Cargo = RegresaCunetaComple(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCG", Me.TablaC.Item(SerC.Index, p).Value), Trim(Me.TablaC.Item(RFCComplemento.Index, p).Value), p, 1)
    '            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpGComplemento.Index, p).Value, 0, Cuenta_Cargo, "")
    '            Item = Item + 1
    '            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpEComplemento.Index, p).Value, 0, Cuenta2, "")
    '            Item = Item + 1
    '            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(IvaComplemento.Index, p).Value, 0, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "IVAPTras", Me.TablaC.Item(SerC.Index, p).Value), "")

    '            Item = Item + 1

    '        ElseIf Me.TablaC.Item(ImpEComplemento.Index, p).Value > 0 And Me.TablaC.Item(ImpGComplemento.Index, p).Value <= 0 Then 'Tiene Exento o 0

    '            Cuenta_Cargo = RegresaCunetaComple(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCE", Me.TablaC.Item(SerC.Index, p).Value), Trim(Me.TablaC.Item(RFCComplemento.Index, p).Value), p, 1)
    '            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpEComplemento.Index, p).Value, 0, Cuenta_Cargo, "")
    '            Item = Item + 1

    '        ElseIf Me.TablaC.Item(ImpEComplemento.Index, p).Value <= 0 And Me.TablaC.Item(ImpGComplemento.Index, p).Value > 0 Then 'Tiene Grabado

    '            Cuenta_Cargo = RegresaCunetaComple(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCG", Me.TablaC.Item(SerC.Index, p).Value), Trim(Me.TablaC.Item(RFCComplemento.Index, p).Value), p, 1)
    '            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpGComplemento.Index, p).Value, 0, Cuenta_Cargo, "")
    '            Item = Item + 1
    '            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(IvaComplemento.Index, p).Value, 0, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "IVAPTras", Me.TablaC.Item(SerC.Index, p).Value), "")

    '            Item = Item + 1

    '        End If

    '        'Cargos con cuentas efectivo bancos

    '        If Me.TablaC.Item(ImpEComplemento.Index, p).Value > 0 And Me.TablaC.Item(ImpGComplemento.Index, p).Value > 0 And Me.TablaC.Item(IvaComplemento.Index, p).Value > 0 Then ' tiene grabado y exento

    '            Cuenta2 = RegresaCunetaComple(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngEx", Me.TablaC.Item(SerC.Index, p).Value), Trim(Me.TablaC.Item(RFCComplemento.Index, p).Value), p, 1)
    '            Cuenta_Cargo = RegresaCunetaComple(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngG", Me.TablaC.Item(SerC.Index, p).Value), Trim(Me.TablaC.Item(RFCComplemento.Index, p).Value), p, 1)
    '            Crea_detalle_poliza(pol, Item, 0, Me.TablaC.Item(ImpGComplemento.Index, p).Value, Cuenta_Cargo, "")
    '            Item = Item + 1
    '            Crea_detalle_poliza(pol, Item, 0, Me.TablaC.Item(ImpEComplemento.Index, p).Value, Cuenta2, "")
    '            Item = Item + 1
    '            Crea_detalle_poliza(pol, Item, 0, Me.TablaC.Item(IvaComplemento.Index, p).Value, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "IVATras", Me.TablaC.Item(SerC.Index, p).Value), "")

    '            Item = Item + 1

    '        ElseIf Me.TablaC.Item(ImpEComplemento.Index, p).Value > 0 And Me.TablaC.Item(ImpGComplemento.Index, p).Value <= 0 Then 'Tiene Exento o 0

    '            Cuenta_Cargo = RegresaCunetaComple(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngEx", Me.TablaC.Item(SerC.Index, p).Value), Trim(Me.TablaC.Item(RFCComplemento.Index, p).Value), p, 1)
    '            Crea_detalle_poliza(pol, Item, 0, Me.TablaC.Item(ImpEComplemento.Index, p).Value, Cuenta_Cargo, "")
    '            Item = Item + 1

    '        ElseIf Me.TablaC.Item(ImpEComplemento.Index, p).Value <= 0 And Me.TablaC.Item(ImpGComplemento.Index, p).Value > 0 Then 'Tiene Grabado

    '            Cuenta_Cargo = RegresaCunetaComple(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngG", Me.TablaC.Item(SerC.Index, p).Value), Trim(Me.TablaC.Item(RFCComplemento.Index, p).Value), p, 1)
    '            Crea_detalle_poliza(pol, Item, 0, Me.TablaC.Item(ImpGComplemento.Index, p).Value, Cuenta_Cargo, "")
    '            Item = Item + 1
    '            Crea_detalle_poliza(pol, Item, 0, Me.TablaC.Item(IvaComplemento.Index, p).Value, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "IVATras", Me.TablaC.Item(SerC.Index, p).Value), "")

    '            Item = Item + 1

    '        End If




    '        '°Checar si se tiene correctas las ctas de Orden

    '        If UCase(Me.TablaC.Item(CtaOrdenC.Index, p).Value) = "SI" Then
    '            Item = Item + 1
    '            If Len(Me.TablaC.Item(RFCComplemento.Index, p).Value) = 12 Then

    '                If Me.TablaC.Item(ImpEComplemento.Index, p).Value > 0 And Me.TablaC.Item(ImpGComplemento.Index, p).Value > 0 Then
    '                    Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpGComplemento.Index, p).Value, 0, "9011001000010003", "")
    '                    Item = Item + 1
    '                    If Trim(UCase(Me.lble.Text)) = "TRUE" Then
    '                        Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpEComplemento.Index, p).Value, 0, "9011001000010001", "")
    '                    Else
    '                        Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpEComplemento.Index, p).Value, 0, "9011001000010002", "")
    '                    End If
    '                    Item = Item + 1

    '                ElseIf Me.TablaC.Item(ImpEComplemento.Index, p).Value > 0 And Me.TablaC.Item(ImpGComplemento.Index, p).Value <= 0 Then 'Tiene Exento
    '                    If Trim(UCase(Me.lble.Text)) = "TRUE" Then
    '                        Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpEComplemento.Index, p).Value, 0, "9011001000010001", "")
    '                    Else
    '                        Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpEComplemento.Index, p).Value, 0, "9011001000010002", "")
    '                    End If
    '                    Item = Item + 1
    '                ElseIf Me.TablaC.Item(ImpEComplemento.Index, p).Value <= 0 And Me.TablaC.Item(ImpGComplemento.Index, p).Value > 0 Then 'Tiene Grabado
    '                    Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpGComplemento.Index, p).Value, 0, "9011001000010003", "")
    '                    Item = Item + 1
    '                End If
    '            Else

    '                If Me.TablaC.Item(ImpEComplemento.Index, p).Value > 0 And Me.TablaC.Item(ImpGComplemento.Index, p).Value > 0 Then
    '                    Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpGComplemento.Index, p).Value, 0, "9011002000010003", "")
    '                    Item = Item + 1
    '                    If Trim(UCase(Me.lble.Text)) = "TRUE" Then
    '                        Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpEComplemento.Index, p).Value, 0, "9011002000010001", "")
    '                    Else
    '                        Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpEComplemento.Index, p).Value, 0, "9011002000010002", "")
    '                    End If
    '                    Item = Item + 1

    '                ElseIf Me.TablaC.Item(ImpEComplemento.Index, p).Value > 0 And Me.TablaC.Item(ImpGComplemento.Index, p).Value <= 0 Then 'Tiene Exento
    '                    If Trim(UCase(Me.lble.Text)) = "TRUE" Then
    '                        Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpEComplemento.Index, p).Value, 0, "9011002000010001", "")
    '                    Else
    '                        Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpEComplemento.Index, p).Value, 0, "9011002000010002", "")
    '                    End If
    '                    Item = Item + 1
    '                ElseIf Me.TablaC.Item(ImpEComplemento.Index, p).Value <= 0 And Me.TablaC.Item(ImpGComplemento.Index, p).Value > 0 Then 'Tiene Grabado
    '                    Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpGComplemento.Index, p).Value, 0, "9011002000010003", "")
    '                    Item = Item + 1
    '                End If
    '            End If

    '            If Me.TablaC.Item(ImpEComplemento.Index, p).Value > 0 And Me.TablaC.Item(ImpGComplemento.Index, p).Value > 0 Then

    '                Cuenta2 = RegresaCunetaComple("901000010003", Trim(Me.TablaC.Item(RFCComplemento.Index, p).Value), p, 0)
    '                Crea_detalle_poliza(pol, Item, 0, Me.TablaC.Item(ImpGComplemento.Index, p).Value, Cuenta2, "")
    '                Item = Item + 1
    '                If Trim(UCase(Me.lble.Text)) = "TRUE" Then
    '                    Cuenta2 = RegresaCunetaComple("901000010001", Trim(Me.TablaC.Item(RFCComplemento.Index, p).Value), p, 0)
    '                Else
    '                    Cuenta2 = RegresaCunetaComple("901000010002", Trim(Me.TablaC.Item(RFCComplemento.Index, p).Value), p, 0)
    '                End If
    '                Crea_detalle_poliza(pol, Item, 0, Me.TablaC.Item(ImpEComplemento.Index, p).Value, Cuenta2, "")
    '                Item = Item + 1

    '            ElseIf Me.TablaC.Item(ImpEComplemento.Index, p).Value > 0 And Me.TablaC.Item(ImpGComplemento.Index, p).Value <= 0 Then 'Tiene Exento
    '                If Trim(UCase(Me.lble.Text)) = "TRUE" Then
    '                    Cuenta2 = RegresaCunetaComple("901000010001", Trim(Me.TablaC.Item(RFCComplemento.Index, p).Value), p, 0)
    '                Else
    '                    Cuenta2 = RegresaCunetaComple("901000010002", Trim(Me.TablaC.Item(RFCComplemento.Index, p).Value), p, 0)
    '                End If
    '                Crea_detalle_poliza(pol, Item, 0, Me.TablaC.Item(ImpEComplemento.Index, p).Value, Cuenta2, "")
    '                Item = Item + 1
    '            ElseIf Me.TablaC.Item(ImpEComplemento.Index, p).Value <= 0 And Me.TablaC.Item(ImpGComplemento.Index, p).Value > 0 Then 'Tiene Grabado
    '                Cuenta2 = RegresaCunetaComple("901000010003", Trim(Me.TablaC.Item(RFCComplemento.Index, p).Value), p, 0)
    '                Crea_detalle_poliza(pol, Item, 0, Me.TablaC.Item(ImpGComplemento.Index, p).Value, Cuenta2, "")
    '                Item = Item + 1
    '            End If
    '        End If


    '        Exit Sub
    '    End Sub
    '    Private Sub LstComple_Enters() Handles LstComple.Enters
    '        If Me.TablaC.Rows.Count > 0 Then
    '            For Each Fila As DataGridViewRow In TablaC.Rows
    '                If Fila.Cells(LetraContabilidadComplemento.Index).Selected = True Then

    '                    Try
    '                        If Me.LstComple.SelectText = "" Then
    '                            Fila.Cells(LetraContabilidadComplemento.Index).Value = ""
    '                        Else
    '                            If Obtener_index(Me.LstComple.SelectText) < 0 Then
    '                                Fila.Cells(LetraContabilidadComplemento.Index).Value = ""
    '                            Else
    '                                Dim s As String = Me.LetraContabilidadComplemento.Items(1)
    '                                Fila.Cells(LetraContabilidadComplemento.Index).Value = Me.LetraContabilidadComplemento.Items(Obtener_index(Me.LstComple.SelectText))
    '                            End If
    '                        End If
    '                    Catch ex As Exception

    '                    End Try
    '                ElseIf Fila.Cells(BancoOrigenTComplemento.Index).Selected = True Then

    '                ElseIf Fila.Cells(BancoDtComplemento.Index).Selected = True Then

    '                    Try
    '                        If Me.LstComple.SelectText = "" Then
    '                            Fila.Cells(BancoDtComplemento.Index).Value = ""

    '                        Else
    '                            If Obtener_indexBancodes(Me.LstComple.SelectText) = 0 Then
    '                                Fila.Cells(BancoDtComplemento.Index).Value = ""
    '                            Else
    '                                Dim s As String = Me.BancoDtComplemento.Items(1)
    '                                Fila.Cells(BancoDtComplemento.Index).Value = Me.BancoDtComplemento.Items(Obtener_indexBancodes(Me.LstComple.SelectText))
    '                            End If
    '                        End If

    '                    Catch ex As Exception

    '                    End Try
    '                ElseIf Fila.Cells(TipPolComplemento.Index).Selected = True Then

    '                    Try

    '                        If Me.LstComple.SelectText = "" Then
    '                            Fila.Cells(TipPolComplemento.Index).Value = ""
    '                        Else
    '                            Try
    '                                If Obtener_indextipo(Me.LstComple.SelectText) < 0 Then
    '                                    Fila.Cells(TipPolComplemento.Index).Value = ""
    '                                Else
    '                                    Dim s As String = Me.TipPolComplemento.Items(1)
    '                                    Fila.Cells(TipPolComplemento.Index).Value = Me.TipPolComplemento.Items(Obtener_indextipo(Me.LstComple.SelectText))
    '                                End If

    '                            Catch ex As Exception

    '                            End Try
    '                        End If

    '                    Catch ex As Exception

    '                    End Try
    '                Else

    '                    For j As Integer = 0 To Me.TablaC.Columns.Count - 1
    '                        If Me.TablaC.Item(j, Fila.Index).Selected = True And (j <> LetraContabilidadComplemento.Index And j <> BancoDtComplemento.Index And j <> TipPolComplemento.Index) Then
    '                            Me.TablaC.Item(j, Fila.Index).Value = Me.LstComple.SelectText
    '                        ElseIf Me.TablaC.Item(j, Fila.Index).Selected = True And (j = LetraContabilidadComplemento.Index And j = BancoDtComplemento.Index And j = TipPolComplemento.Index) Then
    '                            Me.TablaC.Item(j, Fila.Index).Value = ""
    '                        End If
    '                    Next
    '                End If

    '            Next
    '        End If

    '    End Sub
    '    Private Sub TablaC_CellClick(sender As Object, e As DataGridViewCellEventArgs)

    '        Dim columna As Integer = Me.TablaC.CurrentCell.ColumnIndex
    '        Dim Nombre As String
    '        Nombre = Me.TablaC.Columns.Item(Me.TablaC.CurrentCell.ColumnIndex).Name.ToString
    '        Me.LstTextoDev.Cargar(" Select '','' ")

    '        Select Case Nombre
    '            Case "LetraContabilidadComplemento"
    '                Me.LstTextoDev.Cargar(" Select id_Contabilidad, rtrim(Clave) as Clave from Letras_Contabilidad where Id_Empresa = " & Me.lstCliente.SelectItem & " ")
    '                Me.LstTextoDev.SelectText = ""
    '            Case "CtaEfComplemento"
    '                Me.LstTextoDev.Cargar(" Select Id_cat_cuentas, rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1010' and Nivel2 > 0 and Nivel3 > 0 ")
    '                Me.LstTextoDev.SelectText = ""
    '            Case "CtaDTComplemento"
    '                Me.LstTextoDev.Cargar(" Select Id_cat_cuentas, rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1020'and Nivel2 > 0 and Nivel3 > 0  ")
    '                Me.LstTextoDev.SelectText = ""
    '            Case "BancoDEC"
    '                Me.LstTextoDev.Cargar("select Id_Bancos_Clientes,Alias from Bancos_Clientes where Id_Empresa = " & Me.lstCliente.SelectItem & " and alias like '%Cheq%'")
    '                Me.LstTextoDev.SelectText = ""
    '            Case "BancoOrigenTComplemento"
    '                Me.LstTextoDev.Cargar(" select Id_Bancos_Clientes,Alias from Bancos_Clientes where Id_Empresa = " & Me.lstCliente.SelectItem & " and alias like '%Transf%'")
    '                Me.LstTextoDev.SelectText = ""
    '            Case "TipPolComplemento"
    '                Me.LstTextoDev.Cargar("  Select convert(NVARCHAR,Clave,103)  +' - ' + Nombre as Clave, convert(NVARCHAR,Clave,103)  +' - ' + Nombre as Clave  from Tipos_Poliza_Sat INNER JOIN Tipo_Poliza ON Tipo_Poliza.Id_Tipo_poliza = Tipos_Poliza_Sat.Id_Tipo_poliza  where Id_Empresa= " & Me.lstCliente.SelectItem & "  ")
    '                Me.LstTextoDev.SelectText = ""
    '            Case "CtaAjusComplemento"
    '                Me.LstTextoDev.Cargar("Select  Id_cat_cuentas,  rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " ")
    '                Me.LstTexto.SelectText = ""
    '            Case "CtaAntiComplemento"
    '                Me.LstTextoDev.Cargar("Select Id_cat_cuentas,  rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1070' and Nivel2 > 0 and Nivel3 > 0 ")
    '                Me.LstTextoDev.SelectText = ""
    '        End Select
    '    End Sub
    '    Private Sub TablaC_CellEndEdit(sender As Object, e As DataGridViewCellEventArgs)
    '        Liberar_ProcesoComple(Me.TablaC.CurrentRow.Index)
    '        'Calcula cuenta cargos

    '        If Me.TablaC.Item(ProvPComplemento.Index, Me.TablaC.CurrentRow.Index).Value > 0 Then
    '            Me.TablaC.Item(ProvAComplemento.Index, Me.TablaC.CurrentRow.Index).Value = 0
    '        ElseIf Me.TablaC.Item(ProvAComplemento.Index, Me.TablaC.CurrentRow.Index).Value > 0 Then
    '            Me.TablaC.Item(ProvPComplemento.Index, Me.TablaC.CurrentRow.Index).Value = 0
    '        End If

    '        If Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value <> Nothing Then
    '            Me.TablaC.Item(NomCtaComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Cuenta_cargos(Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value, Trim(Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value))
    '            Me.TablaC.Item(LetraSatComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Eventos.Calcula_letraSat(Me.TablaC.Item(FpagoComplemento.Index, Me.TablaC.CurrentRow.Index).Value, Me.TablaC.Item(UCFDIComplemento.Index, Me.TablaC.CurrentRow.Index).Value)

    '            If Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value = "C" Or Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value = "CPP" Then
    '                Me.TablaC.Item(ProvAComplemento.Index, Me.TablaC.CurrentRow.Index).Value = 0
    '            ElseIf Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value = "GG" Or Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value = "GGPP" Then
    '                Me.TablaC.Item(ProvPComplemento.Index, Me.TablaC.CurrentRow.Index).Value = 0
    '            End If
    '        Else
    '            Me.TablaC.Item(NomCtaComplemento.Index, Me.TablaC.CurrentRow.Index).Value = ""
    '        End If

    '        'CALCULAR CUENTA DE EFECTIVO
    '        If Me.TablaC.Item(ImpEfComplemento.Index, Me.TablaC.CurrentRow.Index).Value > 0 Then
    '            'If Candado_Importe_Efectivocomple(Me.TablaC.CurrentRow.Index) = True Then ' se verifica candado
    '            '    ' IMPORTE DE EFECTIVO Antiguo Codigo

    '            Me.TablaC.Item(CtaEfComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Cuenta_Efectivo()
    '            Me.TablaC.Columns(CtaEfComplemento.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
    '            'Else
    '            '    If MessageBox.Show("El importe de efectivo Excede los $2,000 deseas usarlo?", Eventos.titulo_app, MessageBoxButtons.YesNo, MessageBoxIcon.Question) = Windows.Forms.DialogResult.Yes Then

    '            '        Me.TablaC.Item(CtaEfComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Cuenta_Efectivo()
    '            '        Me.TablaC.Columns(CtaEfComplemento.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
    '            '    Else
    '            '        Me.TablaC.Item(ImpEfComplemento.Index, Me.TablaC.CurrentRow.Index).Value = 0
    '            '        Exit Sub
    '            '    End If
    '            'End If
    '        Else
    '            Me.TablaC.Item(CtaEfComplemento.Index, Me.TablaC.CurrentRow.Index).Value = ""
    '        End If

    '        'CALCULAR CUENTA DE Ajustes
    '        If Me.TablaC.Item(AjusComplemento.Index, Me.TablaC.CurrentRow.Index).Value <> 0 Then
    '            'If Candado_Importe_Efectivocomple(Me.TablaC.CurrentRow.Index) = True Then ' se verifica candado
    '            '    ' IMPORTE DE EFECTIVO Antiguo Codigo

    '            Me.TablaC.Item(CtaAjusComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Cuenta_Efectivo()
    '            Me.TablaC.Columns(CtaAjusComplemento.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
    '            'Else
    '            '    If MessageBox.Show("El importe de efectivo Excede los $2,000 deseas usarlo?", Eventos.titulo_app, MessageBoxButtons.YesNo, MessageBoxIcon.Question) = Windows.Forms.DialogResult.Yes Then

    '            '        Me.TablaC.Item(CtaAjusComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Cuenta_Efectivo()
    '            '        Me.TablaC.Columns(CtaAjusComplemento.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
    '            '    Else
    '            '        Me.TablaC.Item(AjusComplemento.Index, Me.TablaC.CurrentRow.Index).Value = 0
    '            '        Exit Sub
    '            '    End If
    '            'End If
    '        Else
    '            Me.TablaC.Item(CtaAjusComplemento.Index, Me.TablaC.CurrentRow.Index).Value = ""
    '        End If
    '        'CALCULAR CUENTA DE anticipos
    '        If Me.TablaC.Item(AntiComplemento.Index, Me.TablaC.CurrentRow.Index).Value > 0 Then

    '            Me.TablaC.Item(CtaAntiComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Cuenta_Anticipo()
    '            Me.TablaC.Columns(CtaAntiComplemento.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
    '        Else
    '            Me.TablaC.Item(CtaAntiComplemento.Index, Me.TablaC.CurrentRow.Index).Value = ""
    '        End If






    '        If Me.TablaC.Item(ImpTComplemento.Index, Me.TablaC.CurrentRow.Index).Value > 0 Then
    '            If Trim(Me.TablaC.Item(BancoDtComplemento.Index, Me.TablaC.CurrentRow.Index).Value) <> "" Then
    '                If Trim(Me.TablaC.Item(CtaDTComplemento.Index, Me.TablaC.CurrentRow.Index).Value) <> "" Then
    '                Else
    '                    Dim posi As Integer = InStr(1, Me.TablaC.Item(BancoDtComplemento.Index, Me.TablaC.CurrentRow.Index).Value, "-", CompareMethod.Binary)
    '                    Dim cuantos As Integer = Len(Me.TablaC.Item(BancoDtComplemento.Index, Me.TablaC.CurrentRow.Index).Value) - Len(Me.TablaC.Item(BancoDtComplemento.Index, Me.TablaC.CurrentRow.Index).Value.Substring(0, posi))
    '                    Dim Al As String = Me.TablaC.Item(BancoDtComplemento.Index, Me.TablaC.CurrentRow.Index).Value.Substring(posi, cuantos)
    '                    Me.TablaC.Item(CtaDTComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes", "No_Cuenta", " Id_Empresa =" & Me.lstCliente.SelectItem & " and Alias = '" & Trim(Al) & "'", True)
    '                    Me.TablaC.Item(CtaBancosComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes INNER JOIN Catalogo_de_Cuentas ON Catalogo_de_Cuentas.Id_cat_Cuentas = Bancos_Clientes.Id_cat_Cuentas", "Catalogo_de_Cuentas.Cuenta", " Bancos_Clientes.Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos_Clientes.Alias = '" & Trim(Al) & "'", True)
    '                End If
    '            Else

    '            End If

    '            '
    '            Try
    '                If Trim(Me.TablaC.Item(CtaOTComplemento.Index, Me.TablaC.CurrentRow.Index).Value) <> "" And Trim(Me.TablaC.Item(CtaOTComplemento.Index, Me.TablaC.CurrentRow.Index).Value) <> Nothing Then
    '                    Dim largo As Integer = Len(Me.TablaC.Item(BancoOrigenTComplemento.Index, Me.TablaC.CurrentRow.Index).Value)
    '                    Dim cadena As String = Trim(Me.TablaC.Item(BancoOrigenTComplemento.Index, Me.TablaC.CurrentRow.Index).Value.ToString.Substring(largo - 3, 3))
    '                    largo = Len(Me.TablaC.Item(CtaOTComplemento.Index, Me.TablaC.CurrentRow.Index).Value)
    '                    Dim Al As String = Me.TablaC.Item(CtaOTComplemento.Index, Me.TablaC.CurrentRow.Index).Value.Substring(largo - 3, 3)
    '                    If cadena <> Al Then
    '                        largo = InStr(1, Me.TablaC.Item(BancoOrigenTComplemento.Index, Me.TablaC.CurrentRow.Index).Value, "-", CompareMethod.Binary)
    '                        Al = Me.TablaC.Item(BancoOrigenTComplemento.Index, Me.TablaC.CurrentRow.Index).Value.Substring(0, largo - 1)
    '                        Me.TablaC.Item(CtaOTComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos.Clave = " & Trim(Al) & " and  RFC = '" & Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value & "' and Bancos_RFC.clabe like '%" & cadena & "%'", True)
    '                    End If
    '                Else
    '                    Me.TablaC.Item(BancoOrigenTComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Banco_destinoComp(Me.lstCliente.SelectItem, Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value)
    '                    Dim posi As Integer = InStr(1, Me.TablaC.Item(BancoOrigenTComplemento.Index, Me.TablaC.CurrentRow.Index).Value, "-", CompareMethod.Binary)
    '                    Dim Al As String = Me.TablaC.Item(BancoOrigenTComplemento.Index, Me.TablaC.CurrentRow.Index).Value.Substring(0, posi - 1)
    '                    Me.TablaC.Item(CtaOTComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos.Clave = " & Trim(Al) & " and  RFC = '" & Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value & "'", True)
    '                End If
    '            Catch ex As Exception

    '            End Try


    '            If Trim(Me.TablaC.Item(BancoDtComplemento.Index, Me.TablaC.CurrentRow.Index).Value) <> "" Then
    '                Try
    '                    If Trim(Me.TablaC.Item(CtaDTComplemento.Index, Me.TablaC.CurrentRow.Index).Value) <> "" And Trim(Me.TablaC.Item(CtaDTComplemento.Index, Me.TablaC.CurrentRow.Index).Value) <> "0" Then
    '                    Else
    '                        Dim posi As Integer = InStr(1, Me.TablaC.Item(BancoDtComplemento.Index, Me.TablaC.CurrentRow.Index).Value, "-", CompareMethod.Binary)
    '                        Dim Al As String = Me.TablaC.Item(BancoDtComplemento.Index, Me.TablaC.CurrentRow.Index).Value.Substring(0, posi - 1)
    '                        Me.TablaC.Item(CtaDTComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC", "Clabe", " Id_Empresa =" & Me.lstCliente.SelectItem & " and id_banco = '" & Trim(Al) & "' and  RFC = '" & Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value & "'", True)
    '                    End If
    '                Catch ex As Exception

    '                End Try
    '            Else
    '                '  Banco_destinoComp()

    '            End If



    '            If Trim(UCase(Me.lblce.Text)) = "FALSE" Then
    '                Me.TablaC.Columns(BancoOrigenTComplemento.Index).Visible = False
    '                Me.TablaC.Columns(CtaOTComplemento.Index).Visible = False
    '                Me.TablaC.Columns(BancoDtComplemento.Index).Visible = False
    '                Me.TablaC.Columns(CtaDTComplemento.Index).Visible = False
    '                Me.TablaC.Columns(FTComplemento.Index).Visible = True

    '            End If


    '        End If






    '        If Me.TablaC.Item(ImpChComplemento.Index, Me.TablaC.CurrentRow.Index).Value > 0 Then

    '            'Cheques
    '            'Cargar bancos destino para ingresos de Cheques
    '            Dim posi As Integer = 0
    '            Dim Al As String = ""
    '            If Trim(Me.TablaC.Item(BancoDEC.Index, Me.TablaC.CurrentRow.Index).Value) <> "" Then
    '                If Trim(Me.TablaC.Item(CtaBancoDChC.Index, Me.TablaC.CurrentRow.Index).Value) <> "" Then


    '                Else
    '                    posi = InStr(1, Me.TablaC.Item(BancoDEC.Index, Me.TablaC.CurrentRow.Index).Value, "-", CompareMethod.Binary)
    '                    Dim cuantos As Integer = Len(Me.TablaC.Item(BancoDEC.Index, Me.TablaC.CurrentRow.Index).Value) - Len(Me.TablaC.Item(BancoDEC.Index, Me.TablaC.CurrentRow.Index).Value.Substring(0, posi))
    '                    Al = Me.TablaC.Item(BancoDEC.Index, Me.TablaC.CurrentRow.Index).Value.Substring(posi, cuantos)
    '                    Me.TablaC.Item(CtaBancoDChC.Index, Me.TablaC.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes", "No_Cuenta", " Id_Empresa =" & Me.lstCliente.SelectItem & " and Alias = '" & Trim(Al) & "'", True)
    '                    Me.TablaC.Item(CtaChequesC.Index, Me.TablaC.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes INNER JOIN Catalogo_de_Cuentas ON Catalogo_de_Cuentas.Id_cat_Cuentas = Bancos_Clientes.Id_cat_Cuentas", "Catalogo_de_Cuentas.Cuenta", " Bancos_Clientes.Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos_Clientes.Alias = '" & Trim(Al) & "'", True)
    '                End If
    '            Else

    '            End If
    '            'Cargar bancos Origen para ingresos de Cheques
    '            If Trim(Me.TablaC.Item(BancoCHComplemento.Index, Me.TablaC.CurrentRow.Index).Value) <> "" Then
    '                If Trim(Me.TablaC.Item(CtaOchComplemento.Index, Me.TablaC.CurrentRow.Index).Value) <> "" Then
    '                    Dim largo As Integer = Len(Me.TablaC.Item(BancoCHComplemento.Index, Me.TablaC.CurrentRow.Index).Value)
    '                    Dim cadena As String = Trim(Me.TablaC.Item(BancoCHComplemento.Index, Me.TablaC.CurrentRow.Index).Value.ToString.Substring(largo - 3, 3))
    '                    largo = Len(Me.TablaC.Item(CtaOchComplemento.Index, Me.TablaC.CurrentRow.Index).Value)
    '                    Al = Me.TablaC.Item(CtaOchComplemento.Index, Me.TablaC.CurrentRow.Index).Value.Substring(largo - 3, 3)
    '                    If cadena <> Al Then
    '                        posi = InStr(1, Me.TablaC.Item(BancoCHComplemento.Index, Me.TablaC.CurrentRow.Index).Value, "-", CompareMethod.Binary)
    '                        Al = Trim(Me.TablaC.Item(BancoCHComplemento.Index, Me.TablaC.CurrentRow.Index).Value.Substring(0, posi - 1))
    '                        Me.TablaC.Item(CtaOchComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos.Clave = " & Trim(Al) & " and  RFC = '" & Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value & "' and Bancos_RFC.clabe like '%" & cadena & "%'", True)
    '                    End If
    '                Else
    '                    posi = InStr(1, Me.TablaC.Item(BancoCHComplemento.Index, Me.TablaC.CurrentRow.Index).Value, "-", CompareMethod.Binary)
    '                    Al = Trim(Me.TablaC.Item(BancoCHComplemento.Index, Me.TablaC.CurrentRow.Index).Value.Substring(0, posi - 1))
    '                    Me.TablaC.Item(CtaOchComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos.Clave = " & Trim(Al) & " and  RFC = '" & Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value & "'", True)
    '                End If
    '            Else
    '                Me.TablaC.Item(BancoCHComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Banco_OrigenChe(Me.lstCliente.SelectItem, Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value)
    '                Me.TablaC.Item(CtaOchComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & "  and  RFC = '" & Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value & "'", True)
    '            End If

    '            'Se Muestran Columnas de Contabilidad Electronica
    '            If Trim(UCase(Me.lblce.Text)) = "FALSE" Then
    '                Me.TablaC.Columns(BancoCHComplemento.Index).Visible = False
    '                Me.TablaC.Columns(CtaOchComplemento.Index).Visible = False
    '                Me.TablaC.Columns(NoChComplemento.Index).Visible = False
    '                Me.TablaC.Columns(FCHComplemento.Index).Visible = True
    '            End If

    '        End If

    '    End Sub
    '    Private Sub Liberar_ProcesoComple(ByVal i As Integer)
    '        Dim contador As Integer = 0
    '        Dim cantidad As Decimal = Me.TablaC.Item(ImpProviComplemento.Index, i).Value
    '        cantidad = cantidad + Me.TablaC.Item(UCComplemento.Index, i).Value
    '        cantidad = cantidad - Me.TablaC.Item(PCComplemento.Index, i).Value

    '        Dim Retencion As Decimal = 0
    '        Retencion = Me.TablaC.Item(RISRComplemento.Index, i).Value + Me.TablaC.Item(RIVAComplemento.Index, i).Value
    '        'Calcula la diferencia en el registro
    '        Me.TablaC.Item(DifComplemento.Index, i).Value = Math.Round(Calcula_diferencia(Me.TablaC.Item(TRComplemento.Index, i).Value - Retencion, Me.TablaC.Item(ImpEfComplemento.Index, i).Value, Me.TablaC.Item(ImpTComplemento.Index, i).Value + Me.TablaC.Item(ProvAComplemento.Index, i).Value + Me.TablaC.Item(ProvPComplemento.Index, i).Value, Me.TablaC.Item(ImpChComplemento.Index, i).Value, Me.TablaC.Item(AjusComplemento.Index, i).Value, Me.TablaC.Item(AntiComplemento.Index, i).Value, cantidad), 2)
    '        If Me.TablaC.Item(DifComplemento.Index, i).Value <> 0 Then
    '            Me.TablaC.Item(DifComplemento.Index, i).Style.BackColor = Color.Red
    '        Else
    '            Me.TablaC.Item(DifComplemento.Index, i).Style.BackColor = Color.Green
    '        End If

    '        If Trim(UCase(Me.lblce.Text)) = "TRUE" Then ' Bloquera filas de Contabilidad electronica
    '            ' If Me.TablaC.Item(DifComplemento.Index, i).Value > 0 Or Me.TablaC.Item(TipPolComplemento.Index, i).Value = Nothing Or IIf(IsDBNull(Me.TablaC.Item(NomCtaComplemento.Index, i).Value) = True, "", Me.TablaC.Item(NomCtaComplemento.Index, i).Value) = "" Or IIf(IsDBNull(Me.TablaC.Item(NumPolComplemento.Index, i).Value) = True, "", Me.TablaC.Item(NumPolComplemento.Index, i).Value) = "" Then
    '            If Me.TablaC.Item(DifComplemento.Index, i).Value <> 0 Or Me.TablaC.Item(TipPolComplemento.Index, i).Value = Nothing Or IIf(IsDBNull(Me.TablaC.Item(NumPolComplemento.Index, i).Value) = True, "", Me.TablaC.Item(NumPolComplemento.Index, i).Value.ToString) = "" Or IIf(IsDBNull(Me.TablaC.Item(SerC.Index, i).Value) = True, "", Me.TablaC.Item(SerC.Index, i).Value) = "" Then

    '                Me.TablaC.Item(ApliComplemento.Index, i).Value = False
    '            Else

    '                If Me.TablaC.Item(ImpTComplemento.Index, i).Value > 0 Then ' Bloqueo transferencia
    '                    Try
    '                        If Me.TablaC.Item(BancoOrigenTComplemento.Index, i).Value = Nothing Or Me.TablaC.Item(BancoDtComplemento.Index, i).Value = Nothing Or Me.TablaC.Item(CtaOTComplemento.Index, i).Value = Nothing Or Me.TablaC.Item(CtaDTComplemento.Index, i).Value = Nothing Or Me.TablaC.Item(FTComplemento.Index, i).Value = Nothing Then
    '                            Me.TablaC.Item(ApliComplemento.Index, i).Value = False
    '                        Else
    '                            Me.TablaC.Item(ApliComplemento.Index, i).Value = True
    '                        End If
    '                    Catch ex As Exception
    '                        Me.TablaC.Item(ApliComplemento.Index, i).Value = False
    '                    End Try

    '                ElseIf Me.TablaC.Item(ImpChComplemento.Index, i).Value > 0 Then ' Bloqueo cheques
    '                    Try
    '                        If Me.TablaC.Item(BancoCHComplemento.Index, i).Value = Nothing Or Me.TablaC.Item(CtaOchComplemento.Index, i).Value = Nothing Or Me.TablaC.Item(NoChComplemento.Index, i).Value = Nothing Or Me.TablaC.Item(FCHComplemento.Index, i).Value = Nothing Then
    '                            Me.TablaC.Item(ApliComplemento.Index, i).Value = False
    '                        Else
    '                            Me.TablaC.Item(ApliComplemento.Index, i).Value = True
    '                        End If
    '                    Catch ex As Exception
    '                        Me.TablaC.Item(ApliComplemento.Index, i).Value = False
    '                    End Try

    '                ElseIf Me.TablaC.Item(ImpChComplemento.Index, i).Value > 0 And Me.TablaC.Item(ImpTComplemento.Index, i).Value > 0 Then ' AMbos
    '                    Try
    '                        If Me.TablaC.Item(BancoOrigenTComplemento.Index, i).Value = Nothing Or Me.TablaC.Item(BancoDtComplemento.Index, i).Value = Nothing Or Me.TablaC.Item(CtaOTComplemento.Index, i).Value = Nothing Or Me.TablaC.Item(CtaDTComplemento.Index, i).Value = Nothing Or Me.TablaC.Item(FTComplemento.Index, i).Value = Nothing Then
    '                            Me.TablaC.Item(ApliComplemento.Index, i).Value = False
    '                        Else
    '                            Me.TablaC.Item(ApliComplemento.Index, i).Value = True
    '                        End If
    '                    Catch ex As Exception
    '                        Me.TablaC.Item(ApliComplemento.Index, i).Value = False
    '                    End Try

    '                    Try
    '                        If Me.TablaC.Item(BancoCHComplemento.Index, i).Value = Nothing Or Me.TablaC.Item(CtaOchComplemento.Index, i).Value = Nothing Or Me.TablaC.Item(NoChComplemento.Index, i).Value = Nothing Or Me.TablaC.Item(FCHComplemento.Index, i).Value = Nothing Then
    '                            Me.TablaC.Item(ApliComplemento.Index, i).Value = False
    '                        Else
    '                            Me.TablaC.Item(ApliComplemento.Index, i).Value = True
    '                        End If
    '                    Catch ex As Exception
    '                        Me.TablaC.Item(ApliComplemento.Index, i).Value = False
    '                    End Try
    '                Else
    '                    Me.TablaC.Item(ApliComplemento.Index, i).Value = True
    '                End If

    '                If Me.TablaC.Item(AjusComplemento.Index, i).Value <> 0 Then ' Bloqueo Ajuste
    '                    If IIf(IsDBNull(Me.TablaC.Item(CtaAjusComplemento.Index, i).Value) = True, "", Me.TablaC.Item(CtaAjusComplemento.Index, i).Value) = "" Then
    '                        Me.TablaC.Item(ApliComplemento.Index, i).Value = False
    '                    Else
    '                        Me.TablaC.Item(ApliComplemento.Index, i).Value = True
    '                    End If
    '                End If

    '                If Me.TablaC.Item(AntiComplemento.Index, i).Value <> 0 Then ' Bloqueo Anticipo
    '                    If IIf(IsDBNull(Me.TablaC.Item(CtaAntiComplemento.Index, i).Value) = True, "", Me.TablaC.Item(CtaAntiComplemento.Index, i).Value) = "" Then
    '                        Me.TablaC.Item(ApliComplemento.Index, i).Value = False
    '                    Else
    '                        Me.TablaC.Item(ApliComplemento.Index, i).Value = True
    '                    End If
    '                End If

    '            End If
    '        Else
    '            'sin contabilidad electronica
    '            If Me.TablaC.Item(DifComplemento.Index, i).Value <> 0 Or Me.TablaC.Item(TipPolComplemento.Index, i).Value = Nothing Or IIf(IsDBNull(Me.TablaC.Item(NumPolComplemento.Index, i).Value) = True, "", Me.TablaC.Item(NumPolComplemento.Index, i).Value) = "" Then
    '                Me.TablaC.Item(ApliComplemento.Index, i).Value = False
    '            Else
    '                Me.TablaC.Item(ApliComplemento.Index, i).Value = True
    '            End If
    '            Try
    '                If Me.TablaC.Item(AjusComplemento.Index, i).Value <> 0 Then ' Bloqueo Ajuste
    '                    If IIf(IsDBNull(Me.TablaC.Item(CtaAjusComplemento.Index, i).Value) = True, "", Me.TablaC.Item(CtaAjusComplemento.Index, i).Value) = "" Then
    '                        Me.TablaC.Item(ApliComplemento.Index, i).Value = False
    '                    Else
    '                        Me.TablaC.Item(ApliComplemento.Index, i).Value = True
    '                    End If
    '                End If

    '                If Me.TablaC.Item(AntiComplemento.Index, i).Value <> 0 Then ' Bloqueo Anticipo
    '                    If IIf(IsDBNull(Me.TablaC.Item(CtaAntiComplemento.Index, i).Value) = True, "", Me.TablaC.Item(CtaAntiComplemento.Index, i).Value) = "" Then
    '                        Me.TablaC.Item(ApliComplemento.Index, i).Value = False
    '                    Else
    '                        Me.TablaC.Item(ApliComplemento.Index, i).Value = True
    '                    End If
    '                End If
    '            Catch ex As Exception

    '            End Try
    '        End If

    '        For s As Integer = 0 To Me.TablaC.Rows.Count - 1
    '            If Me.TablaC.Item(0, s).Value = True Then
    '                contador = contador + 1
    '            End If
    '        Next
    '        If contador > 0 Then
    '            Me.CmdProcesaComple.Enabled = True
    '        End If
    '        If Me.TablaC.Item(ApliComplemento.Index, i).Style.BackColor = Color.Red Then
    '            Me.TablaC.Item(ApliComplemento.Index, i).Value = False
    '        End If
    '    End Sub
    '    Private Function Obtener_indexletra(ByVal valor As String)

    '        Dim Indice As Integer = -1
    '        For i As Integer = 0 To Me.LetraContabilidadComplemento.Items.Count - 1
    '            If valor = Trim(Me.LetraContabilidadComplemento.Items(i)) Then
    '                Indice = i
    '                Exit For
    '            End If
    '        Next
    '        Return Indice

    '    End Function
    '    Private Function Obtener_indextipo(ByVal valor As String)

    '        Dim Indice As Integer = -1
    '        For i As Integer = 0 To Me.TipPolComplemento.Items.Count - 1
    '            If valor = Trim(Me.TipPolComplemento.Items(i)) Then
    '                Indice = i
    '                Exit For
    '            End If
    '        Next
    '        Return Indice

    '    End Function

    '    Private Function Obtener_indexBncoCh(ByVal valor As String)

    '        Dim Indice As Integer = -1
    '        For i As Integer = 0 To Me.BancoDEC.Items.Count - 1
    '            If valor = Trim(Me.BancoDEC.Items(i)) Then
    '                Indice = i
    '                Exit For
    '            End If
    '        Next
    '        Return Indice

    '    End Function
    '    Private Function Obtener_indexBancodes(ByVal valor As String)
    '        Dim Indice As Integer = -1
    '        For i As Integer = 0 To Me.BancoDtComplemento.Items.Count - 1
    '            If valor = Trim(Me.BancoDtComplemento.Items(i)) Then

    '                Indice = i


    '                Exit For
    '            End If
    '        Next
    '        Return Indice

    '    End Function
    '    Private Sub Cargar_bancosComple(ByVal bancos As String)
    '        Dim sql As String = " SELECT rtrim(Bancos.Clave) +'-'+ Bancos_Clientes.Alias AS Alias FROM Bancos_Clientes INNER JOIN Bancos ON Bancos_Clientes.Id_Banco =Bancos.Id_Banco  where Id_Empresa = " & Me.lstCliente.SelectItem & " and alias like '%" & bancos & "%'"
    '        Dim ds As DataSet = Eventos.Obtener_DS(sql)
    '        If ds.Tables(0).Rows.Count > 0 Then
    '            If bancos = "Ch" Then
    '                'Cheque
    '                If Me.BancoDEC.Items.Count = 0 Then
    '                    For i As Integer = 0 To ds.Tables(0).Rows.Count - 1
    '                        Me.BancoDEC.Items.Add(ds.Tables(0).Rows(i)("Alias"))
    '                    Next
    '                Else
    '                    Try
    '                        Me.BancoDEC.Items.Clear()
    '                    Catch ex As Exception

    '                    End Try

    '                    For i As Integer = 0 To ds.Tables(0).Rows.Count - 1
    '                        Me.BancoDEC.Items.Add(ds.Tables(0).Rows(i)("Alias"))
    '                    Next
    '                End If
    '            Else
    '                'Transferencia
    '                'Origen
    '                If Me.BancoDtComplemento.Items.Count = 0 Then
    '                    For i As Integer = 0 To ds.Tables(0).Rows.Count - 1
    '                        Me.BancoDtComplemento.Items.Add(ds.Tables(0).Rows(i)("Alias"))

    '                    Next
    '                Else
    '                    Try
    '                        Me.BancoDtComplemento.Items.Clear()
    '                    Catch ex As Exception

    '                    End Try


    '                    For i As Integer = 0 To ds.Tables(0).Rows.Count - 1
    '                        Me.BancoDtComplemento.Items.Add(ds.Tables(0).Rows(i)("Alias"))

    '                    Next
    '                End If

    '            End If
    '        End If

    '    End Sub

    '    Private Function Banco_destinoComp(ByVal Cliente As Integer, ByVal Rfc As String)

    '        Dim banco As String = ""
    '        Dim sql2 As String = " SELECT DISTINCT CONVERT(NVARCHAR, Bancos.Clave, 103) + '-' + Bancos.Nombre AS Banco ,clabe  FROM     Bancos INNER JOIN     Bancos_RFC ON Bancos.Id_Banco = Bancos_RFC.Id_Banco  WHERE  (Bancos_RFC.Id_Empresa  = " & Cliente & ") and RFC = '" & Rfc & "' and Favorito=1"
    '        Dim ds2 As DataSet = Eventos.Obtener_DS(sql2)

    '        If ds2.Tables(0).Rows.Count > 0 Then
    '            Dim largo As Integer = Len(ds2.Tables(0).Rows(0)("Clabe"))
    '            Try
    '                banco = Trim(ds2.Tables(0).Rows(0)("Banco")) & " " & Trim(ds2.Tables(0).Rows(0)("Clabe").ToString.Substring(largo - 3, 3))
    '            Catch ex As Exception

    '            End Try
    '        Else
    '            banco = ""
    '        End If

    '        Return banco

    '    End Function
    '    Private Sub CmdGuardaComple_Click(sender As Object, e As EventArgs) Handles CmdGuardaComple.Click
    '        Guardar_Complementos()
    '    End Sub

    '    Private Sub Candados(ByVal Posicion As Integer)

    '        If (Math.Round(Me.TablaImportar.Item(ImpProvis.Index, Posicion).Value) = Math.Round(Me.TablaImportar.Item(TReal.Index, Posicion).Value - (Me.TablaImportar.Item(RIVA.Index, Posicion).Value + Me.TablaImportar.Item(RISR.Index, Posicion).Value))) And Me.TablaImportar.Item(Dif.Index, Posicion).Value = 0 Then
    '            If Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value <> Nothing Then
    '                Dim Fila As DataGridViewRow = Me.TablaImportar.Rows(Posicion)
    '                Try
    '                    If Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value <> Nothing Then
    '                        If Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value Like "*PC*" Then
    '                        Else
    '                            Fila.Cells(ContabilizacionC.Index).Value = Me.ContabilizacionC.Items(Obtener_index(Trim(Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value) & "PC"))
    '                        End If

    '                    End If
    '                Catch ex As Exception

    '                End Try
    '            End If
    '        ElseIf Me.TablaImportar.Item(ImpProvis.Index, Posicion).Value > 0 And (Me.TablaImportar.Item(ImpProvis.Index, Posicion).Value <> (Me.TablaImportar.Item(TReal.Index, Posicion).Value - (Me.TablaImportar.Item(RIVA.Index, Posicion).Value + Me.TablaImportar.Item(RISR.Index, Posicion).Value))) Then
    '            Dim Fila As DataGridViewRow = Me.TablaImportar.Rows(Posicion)
    '            Try
    '                If Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value <> Nothing Then
    '                    If Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value Like "*PC*" Then
    '                        Dim posi As Integer = InStr(1, Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value, "PC", CompareMethod.Binary)
    '                        Dim Letra As String = Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, posi - 1)
    '                        Fila.Cells(ContabilizacionC.Index).Value = Me.ContabilizacionC.Items(Obtener_index(Trim(Letra)))
    '                    End If
    '                End If
    '            Catch ex As Exception

    '            End Try

    '            Try
    '                If Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value <> Nothing Then
    '                    If Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value Like "*GN*" Then
    '                        Me.TablaImportar.Item(ImpProvis.Index, Posicion).Value = 0
    '                    End If
    '                End If
    '            Catch ex As Exception

    '            End Try
    '        End If





    '    End Sub


    '    Private Sub Cargar_Pol_Modelo(ByVal tabla As String, ByVal rfc As String)
    '        Dim sql As String = ""
    '        If tabla = "Facturas" Then

    '        ElseIf tabla = "Complementos" Then

    '        ElseIf tabla = "Devoluciones" Then

    '        End If

    '    End Sub


    '    Private Sub TablaImportar_KeyDown(sender As Object, e As KeyEventArgs) Handles TablaImportar.KeyDown
    '        If e.KeyCode = Keys.E AndAlso e.Modifiers = Keys.Shift Then
    '            Me.TablaImportar.Item(ImpEf.Index, Me.TablaImportar.CurrentRow.Index).Value = Me.TablaImportar.Item(Dif.Index, Me.TablaImportar.CurrentRow.Index).Value
    '            If Me.TablaImportar.Item(ImpEf.Index, Me.TablaImportar.CurrentRow.Index).Value > 0 Then
    '                If Candado_Importe_Efectivo(Me.TablaImportar.CurrentRow.Index) = True Then ' se verifica candado
    '                    ' IMPORTE DE EFECTIVO Antiguo Codigo

    '                    Me.TablaImportar.Item(CuentasEfectivo.Index, Me.TablaImportar.CurrentRow.Index).Value = Cuenta_Efectivo()
    '                    Me.TablaImportar.Columns(CuentasEfectivo.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
    '                Else
    '                    If MessageBox.Show("El importe de efectivo Excede los $2,000 deseas usarlo?", Eventos.titulo_app, MessageBoxButtons.YesNo, MessageBoxIcon.Question) = Windows.Forms.DialogResult.Yes Then

    '                        Me.TablaImportar.Item(CuentasEfectivo.Index, Me.TablaImportar.CurrentRow.Index).Value = Cuenta_Efectivo()
    '                        Me.TablaImportar.Columns(CuentasEfectivo.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
    '                    Else
    '                        Me.TablaImportar.Item(ImpEf.Index, Me.TablaImportar.CurrentRow.Index).Value = 0
    '                        Exit Sub
    '                    End If
    '                End If
    '            Else
    '                Me.TablaImportar.Item(CuentasEfectivo.Index, Me.TablaImportar.CurrentRow.Index).Value = ""
    '            End If
    '        ElseIf e.KeyCode = Keys.T AndAlso e.Modifiers = Keys.Shift Then
    '            Me.TablaImportar.Item(ImpT.Index, Me.TablaImportar.CurrentRow.Index).Value = Me.TablaImportar.Item(Dif.Index, Me.TablaImportar.CurrentRow.Index).Value
    '            ' Importe de Transferencia
    '            If Me.TablaImportar.Item(ImpT.Index, Me.TablaImportar.CurrentRow.Index).Value > 0 Then
    '                ' BUSCAR BANCOS EN AUTOMATICO DEL DESTINO
    '                If Trim(Me.TablaImportar.Item(Bancodestino.Index, Me.TablaImportar.CurrentRow.Index).Value) <> Nothing Then
    '                    If Trim(Me.TablaImportar.Item(CtaBD.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" Or Trim(Me.TablaImportar.Item(CtaBD.Index, Me.TablaImportar.CurrentRow.Index).Value) <> Nothing Then
    '                    Else
    '                        Dim posi As Integer = InStr(1, Me.TablaImportar.Item(Bancodestino.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
    '                        Dim cuantos As Integer = Len(Me.TablaImportar.Item(Bancodestino.Index, Me.TablaImportar.CurrentRow.Index).Value) - Len(Me.TablaImportar.Item(Bancodestino.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, posi))
    '                        Dim Al As String = Me.TablaImportar.Item(Bancodestino.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(posi, cuantos)
    '                        Me.TablaImportar.Item(CtaBD.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes", "No_Cuenta", " Id_Empresa =" & Me.lstCliente.SelectItem & " and Alias = '" & Trim(Al) & "'", True)

    '                        Me.TablaImportar.Item(CuentaBancos.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes INNER JOIN Catalogo_de_Cuentas ON Catalogo_de_Cuentas.Id_cat_Cuentas = Bancos_Clientes.Id_cat_Cuentas", "Catalogo_de_Cuentas.Cuenta", " Bancos_Clientes.Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos_Clientes.Alias = '" & Trim(Al) & "'", True)

    '                    End If

    '                End If

    '                If Trim(Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value) <> Nothing Then
    '                    Try
    '                        If Trim(Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" And Trim(Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "0" Then
    '                            Dim largo As Integer = Len(Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value)
    '                            Dim cadena As String = Trim(Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value.ToString.Substring(largo - 3, 3))
    '                            largo = Len(Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value)
    '                            Dim Al As String = Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(largo - 3, 3)
    '                            If cadena <> Al Then
    '                                largo = InStr(1, Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
    '                                Al = Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, largo - 1)
    '                                Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos.Clave = '" & Trim(Al) & "' and  RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "'", True)
    '                            End If
    '                        Else
    '                            Dim posi As Integer = InStr(1, Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
    '                            Dim Al As String = Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, posi - 1)
    '                            Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos.Clave = '" & Trim(Al) & "' and  RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "'", True)
    '                        End If
    '                    Catch ex As Exception

    '                    End Try
    '                Else
    '                    Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value = Banco_destino(Me.lstCliente.SelectItem, Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value)
    '                    Try
    '                        If Trim(Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" And Trim(Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "0" Then
    '                            Dim largo As Integer = Len(Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value)
    '                            Dim cadena As String = Trim(Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value.ToString.Substring(largo - 3, 3))
    '                            largo = Len(Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value)
    '                            Dim Al As String = Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(largo - 3, 3)
    '                            If cadena <> Al Then
    '                                largo = InStr(1, Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
    '                                Al = Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, largo - 1)
    '                                Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos.Clave = '" & Trim(Al) & "' and  RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "'", True)
    '                            End If
    '                        Else
    '                            Dim posi As Integer = InStr(1, Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
    '                            Dim Al As String = Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, posi - 1)
    '                            Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos.Clave = '" & Trim(Al) & "' and  RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "'", True)
    '                        End If
    '                    Catch ex As Exception

    '                    End Try
    '                End If

    '                'If Trim(Me.TablaImportar.Item(TipoPoliza.Index, Me.TablaImportar.CurrentRow.Index).Value) <> Nothing Then
    '                '    If Trim(Me.TablaImportar.Item(Bancodestino.Index, Me.TablaImportar.CurrentRow.Index).Value) <> Nothing Then
    '                '    Else
    '                '        Dim fila As DataGridViewRow = Me.TablaImportar.Rows(Me.TablaImportar.CurrentRow.Index)
    '                '        Try
    '                '            If Trim(Me.TablaImportar.Item(TipoPoliza.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" Then
    '                '                fila.Cells(Bancodestino.Index).Value = Me.Bancodestino.Items(Obtener_indexB(Trim(Me.TablaImportar.Item(TipoPoliza.Index, Me.TablaImportar.CurrentRow.Index).Value)))
    '                '            End If
    '                '        Catch ex As Exception

    '                '        End Try
    '                '    End If
    '                'End If

    '                If Trim(UCase(Me.lblce.Text)) = "FALSE" Then
    '                    Me.TablaImportar.Columns(Fechat.Index).Visible = True
    '                    Me.TablaImportar.Columns(BancoOrigen.Index).Visible = False
    '                    Me.TablaImportar.Columns(CuentaO.Index).Visible = False
    '                    Me.TablaImportar.Columns(Bancodestino.Index).Visible = False
    '                    Me.TablaImportar.Columns(CtaBD.Index).Visible = False
    '                End If

    '            End If
    '        ElseIf e.KeyCode = Keys.C AndAlso e.Modifiers = Keys.Shift Then
    '            Me.TablaImportar.Item(ImpC.Index, Me.TablaImportar.CurrentRow.Index).Value = Me.TablaImportar.Item(Dif.Index, Me.TablaImportar.CurrentRow.Index).Value
    '            If Me.TablaImportar.Item(ImpC.Index, Me.TablaImportar.CurrentRow.Index).Value > 0 Then
    '                'Cheques

    '                Dim posi As Integer = 0
    '                Dim Al As String = ""
    '                If Trim(Me.TablaImportar.Item(BancoDE.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" Then
    '                    If Trim(Me.TablaImportar.Item(CtaDestinoChe.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" Then
    '                    Else
    '                        posi = InStr(1, Me.TablaImportar.Item(BancoDE.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
    '                        Dim cuantos As Integer = Len(Me.TablaImportar.Item(BancoDE.Index, Me.TablaImportar.CurrentRow.Index).Value) - Len(Me.TablaImportar.Item(BancoDE.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, posi))
    '                        Al = Me.TablaImportar.Item(BancoDE.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(posi, cuantos)
    '                        Me.TablaImportar.Item(CtaDestinoChe.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes", "No_Cuenta", " Id_Empresa =" & Me.lstCliente.SelectItem & " and Alias = '" & Trim(Al) & "'", True)
    '                        Me.TablaImportar.Item(CtaCheque.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes INNER JOIN Catalogo_de_Cuentas ON Catalogo_de_Cuentas.Id_cat_Cuentas = Bancos_Clientes.Id_cat_Cuentas", "Catalogo_de_Cuentas.Cuenta", " Bancos_Clientes.Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos_Clientes.Alias = '" & Trim(Al) & "'", True)
    '                    End If
    '                Else

    '                End If
    '                'Cargar bancos Origen para ingresos de Cheques
    '                If Trim(Me.TablaImportar.Item(BancosCheques.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" Then
    '                    If Trim(Me.TablaImportar.Item(CuentaC.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" Then
    '                    Else
    '                        posi = InStr(1, Me.TablaImportar.Item(BancosCheques.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
    '                        Al = Trim(Me.TablaImportar.Item(BancosCheques.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, posi - 1))
    '                        Me.TablaImportar.Item(CuentaC.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos.Clave = " & Trim(Al) & " and  RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "'", True)
    '                    End If
    '                Else
    '                    Me.TablaImportar.Item(BancosCheques.Index, Me.TablaImportar.CurrentRow.Index).Value = Banco_OrigenChe(Me.lstCliente.SelectItem, Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value)
    '                    Me.TablaImportar.Item(CuentaC.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & "  and  RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "'", True)
    '                End If
    '                'Se Muestran Columnas de Contabilidad Electronica
    '                If Trim(UCase(Me.lblce.Text)) = "FALSE" Then
    '                    Me.TablaImportar.Columns(BancosCheques.Index).Visible = False
    '                    Me.TablaImportar.Columns(CuentaC.Index).Visible = False
    '                    Me.TablaImportar.Columns(NoCheque.Index).Visible = False
    '                    Me.TablaImportar.Columns(FechaC.Index).Visible = True

    '                End If

    '            End If


    '        ElseIf e.KeyCode = Keys.A AndAlso e.Modifiers = Keys.Shift Then 'Ajustes
    '            Me.TablaImportar.Item(Anti.Index, Me.TablaImportar.CurrentRow.Index).Value = Me.TablaImportar.Item(Dif.Index, Me.TablaImportar.CurrentRow.Index).Value
    '            If Me.TablaImportar.Item(Anti.Index, Me.TablaImportar.CurrentRow.Index).Value > 0 Then

    '                Me.TablaImportar.Item(CtaAnti.Index, Me.TablaImportar.CurrentRow.Index).Value = Cuenta_Anticipo()
    '                Me.TablaImportar.Columns(CtaAnti.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
    '            Else
    '                Me.TablaImportar.Item(CtaAnti.Index, Me.TablaImportar.CurrentRow.Index).Value = ""
    '            End If

    '        ElseIf e.KeyCode = Keys.J AndAlso e.Modifiers = Keys.Shift Then
    '            Me.TablaImportar.Item(Ajus.Index, Me.TablaImportar.CurrentRow.Index).Value = Me.TablaImportar.Item(Dif.Index, Me.TablaImportar.CurrentRow.Index).Value
    '            If Me.TablaImportar.Item(Ajus.Index, Me.TablaImportar.CurrentRow.Index).Value <> 0 Then
    '                If Candado_Importe_Efectivo(Me.TablaImportar.CurrentRow.Index) = True Then ' se verifica candado
    '                    ' IMPORTE DE EFECTIVO Antiguo Codigo

    '                    Me.TablaImportar.Item(CtaAjustes.Index, Me.TablaImportar.CurrentRow.Index).Value = Cuenta_Efectivo()
    '                    Me.TablaImportar.Columns(CtaAjustes.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
    '                Else
    '                    If MessageBox.Show("El importe de efectivo Excede los $2,000 deseas usarlo?", Eventos.titulo_app, MessageBoxButtons.YesNo, MessageBoxIcon.Question) = Windows.Forms.DialogResult.Yes Then

    '                        Me.TablaImportar.Item(CtaAjustes.Index, Me.TablaImportar.CurrentRow.Index).Value = Cuenta_Efectivo()
    '                        Me.TablaImportar.Columns(CtaAjustes.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
    '                    Else
    '                        Me.TablaImportar.Item(Ajus.Index, Me.TablaImportar.CurrentRow.Index).Value = 0
    '                        Exit Sub
    '                    End If
    '                End If
    '            Else
    '                Me.TablaImportar.Item(CtaAjustes.Index, Me.TablaImportar.CurrentRow.Index).Value = ""
    '            End If

    '        ElseIf e.KeyCode = Keys.P AndAlso e.Modifiers = Keys.Shift Then
    '            Me.TablaImportar.Item(ImpProvis.Index, Me.TablaImportar.CurrentRow.Index).Value = Me.TablaImportar.Item(Dif.Index, Me.TablaImportar.CurrentRow.Index).Value
    '        End If

    '        If e.KeyCode = Keys.A AndAlso e.Modifiers = Keys.Control Then
    '            'Programar calculo automatico de numeros de poliza
    '            Dim Inicial As Integer = InputBox("Teclea el numero de poliza Inicial:", Eventos.titulo_app, 1)
    '            For Each Fila As DataGridViewRow In TablaImportar.Rows
    '                If Fila.Cells(NumPol.Index).Selected = True Then
    '                    Fila.Cells(NumPol.Index).Value = Inicial
    '                    Inicial += 1
    '                End If
    '            Next
    '        End If
    '        Liberar_Proceso(Me.TablaImportar.CurrentRow.Index)
    '    End Sub

    '    Private Sub AgregarBancosRFCsToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles AgregarBancosRFCsToolStripMenuItem.Click

    '        If Me.TCEmitidas.SelectedIndex = 0 Then
    '            If Me.TablaImportar.CurrentCell.ColumnIndex = Me.Bancodestino.Index Then 'Cuentas del Cargo

    '                Dim ds As DataSet = Eventos.Obtener_DS("SELECT DISTINCT CONVERT(NVARCHAR, Bancos.Clave, 103) + '-' + Bancos.Nombre AS Banco ,clabe  FROM     Bancos INNER JOIN     Bancos_RFC ON Bancos.Id_Banco = Bancos_RFC.Id_Banco  WHERE  (Bancos_RFC.Id_Empresa  = " & Me.lstCliente.SelectItem & ") and RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "' order by Banco")
    '                Dim actividad(,) As String
    '                ReDim actividad(2, ds.Tables(0).Rows.Count + 1)

    '                For i As Integer = 0 To ds.Tables(0).Rows.Count - 1

    '                    Dim largo As Integer = Len(ds.Tables(0).Rows(i)("Clabe"))
    '                    Dim cadena As String = Trim(ds.Tables(0).Rows(i)("Banco")) & " " & Trim(ds.Tables(0).Rows(i)("Clabe").ToString.Substring(largo - 3, 3))

    '                    actividad(0, i) = cadena
    '                    Debug.Print(Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value)
    '                    actividad(1, i) = "0"
    '                Next
    '                With My.Forms.DialogUnaSeleccion
    '                    .limpiar()
    '                    .Titulo = Eventos.titulo_app
    '                    .Texto = "Selecciona el Banco"
    '                    .MinSeleccion = 1
    '                    .MaxSeleccion = 1
    '                    .elementos = actividad
    '                    .ShowDialog()
    '                    actividad = .elementos
    '                    If .DialogResult = Windows.Forms.DialogResult.Cancel Then
    '                        Exit Sub
    '                    End If
    '                End With

    '                Dim descrip As String = ""
    '                For i As Integer = 0 To actividad.GetLength(1)
    '                    If actividad(1, i) = "1" Then
    '                        descrip = actividad(0, i)
    '                        Exit For
    '                    End If
    '                Next
    '                Me.TablaImportar.Item(Bancodestino.Index, Me.TablaImportar.CurrentRow.Index).Value = descrip
    '                Me.TablaImportar_CellEndEdit(Me.TablaImportar, Nothing)
    '            ElseIf Me.TablaImportar.CurrentCell.ColumnIndex = Me.BankDT2.Index Then

    '                Dim ds As DataSet = Eventos.Obtener_DS("SELECT DISTINCT CONVERT(NVARCHAR, Bancos.Clave, 103) + '-' + Bancos.Nombre AS Banco ,clabe  FROM     Bancos INNER JOIN     Bancos_RFC ON Bancos.Id_Banco = Bancos_RFC.Id_Banco  WHERE  (Bancos_RFC.Id_Empresa  = " & Me.lstCliente.SelectItem & ") and RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "' order by Banco")
    '                Dim actividad(,) As String
    '                ReDim actividad(2, ds.Tables(0).Rows.Count + 1)

    '                For i As Integer = 0 To ds.Tables(0).Rows.Count - 1

    '                    Dim largo As Integer = Len(ds.Tables(0).Rows(i)("Clabe"))
    '                    Dim cadena As String = Trim(ds.Tables(0).Rows(i)("Banco")) & " " & Trim(ds.Tables(0).Rows(i)("Clabe").ToString.Substring(largo - 3, 3))

    '                    actividad(0, i) = cadena
    '                    Debug.Print(Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value)
    '                    actividad(1, i) = "0"
    '                Next
    '                With My.Forms.DialogUnaSeleccion
    '                    .limpiar()
    '                    .Titulo = Eventos.titulo_app
    '                    .Texto = "Selecciona el Banco"
    '                    .MinSeleccion = 1
    '                    .MaxSeleccion = 1
    '                    .elementos = actividad
    '                    .ShowDialog()
    '                    actividad = .elementos
    '                    If .DialogResult = Windows.Forms.DialogResult.Cancel Then
    '                        Exit Sub
    '                    End If
    '                End With

    '                Dim descrip As String = ""
    '                For i As Integer = 0 To actividad.GetLength(1)
    '                    If actividad(1, i) = "1" Then
    '                        descrip = actividad(0, i)
    '                        Exit For
    '                    End If
    '                Next
    '                Me.TablaImportar.Item(BankDT2.Index, Me.TablaImportar.CurrentRow.Index).Value = descrip
    '                Me.TablaImportar_CellEndEdit(Me.TablaImportar, Nothing)
    '            ElseIf Me.TablaImportar.CurrentCell.ColumnIndex = Me.BancosCheques.Index Then
    '                Dim ds As DataSet = Eventos.Obtener_DS("SELECT DISTINCT CONVERT(NVARCHAR, Bancos.Clave, 103) + '-' + Bancos.Nombre AS Banco ,clabe  FROM     Bancos INNER JOIN     Bancos_RFC ON Bancos.Id_Banco = Bancos_RFC.Id_Banco  WHERE  (Bancos_RFC.Id_Empresa  = " & Me.lstCliente.SelectItem & ") and RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "' order by Banco")
    '                Dim actividad(,) As String
    '                ReDim actividad(2, ds.Tables(0).Rows.Count + 1)

    '                For i As Integer = 0 To ds.Tables(0).Rows.Count - 1

    '                    Dim largo As Integer = Len(ds.Tables(0).Rows(i)("Clabe"))
    '                    Dim cadena As String = Trim(ds.Tables(0).Rows(i)("Banco")) & " " & Trim(ds.Tables(0).Rows(i)("Clabe").ToString.Substring(largo - 3, 3))

    '                    actividad(0, i) = cadena
    '                    Debug.Print(Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value)
    '                    actividad(1, i) = "0"
    '                Next
    '                With My.Forms.DialogUnaSeleccion
    '                    .limpiar()
    '                    .Titulo = Eventos.titulo_app
    '                    .Texto = "Selecciona el Banco"
    '                    .MinSeleccion = 1
    '                    .MaxSeleccion = 1
    '                    .elementos = actividad
    '                    .ShowDialog()
    '                    actividad = .elementos
    '                    If .DialogResult = Windows.Forms.DialogResult.Cancel Then
    '                        Exit Sub
    '                    End If
    '                End With

    '                Dim descrip As String = ""
    '                For i As Integer = 0 To actividad.GetLength(1)
    '                    If actividad(1, i) = "1" Then
    '                        descrip = actividad(0, i)
    '                        Exit For
    '                    End If
    '                Next
    '                Me.TablaImportar.Item(BancosCheques.Index, Me.TablaImportar.CurrentRow.Index).Value = descrip
    '                Me.TablaImportar_CellEndEdit(Me.TablaImportar, Nothing)

    '            End If
    '        ElseIf Me.TCEmitidas.SelectedIndex = 1 Then
    '        ElseIf Me.TCEmitidas.SelectedIndex = 2 Then
    '            If Me.TablaC.CurrentCell.ColumnIndex = Me.NomCtaComplemento.Index Then 'Cuentas del Cargo

    '                Dim ds As DataSet = Eventos.Obtener_DS("SELECT DISTINCT CONVERT(NVARCHAR, Bancos.Clave, 103) + '-' + Bancos.Nombre AS Banco ,clabe  FROM     Bancos INNER JOIN     Bancos_RFC ON Bancos.Id_Banco = Bancos_RFC.Id_Banco  WHERE  (Bancos_RFC.Id_Empresa  = " & Me.lstCliente.SelectItem & ") and RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "' order by Banco")
    '                Dim actividad(,) As String
    '                ReDim actividad(2, ds.Tables(0).Rows.Count + 1)

    '                For i As Integer = 0 To ds.Tables(0).Rows.Count - 1

    '                    Dim largo As Integer = Len(ds.Tables(0).Rows(i)("Clabe"))
    '                    Dim cadena As String = Trim(ds.Tables(0).Rows(i)("Banco")) & " " & Trim(ds.Tables(0).Rows(i)("Clabe").ToString.Substring(largo - 3, 3))

    '                    actividad(0, i) = cadena
    '                    Debug.Print(Me.TablaC.Item(RFCE.Index, Me.TablaC.CurrentRow.Index).Value)
    '                    actividad(1, i) = "0"
    '                Next
    '                With My.Forms.DialogUnaSeleccion
    '                    .limpiar()
    '                    .Titulo = Eventos.titulo_app
    '                    .Texto = "Selecciona el Banco"
    '                    .MinSeleccion = 1
    '                    .MaxSeleccion = 1
    '                    .elementos = actividad
    '                    .ShowDialog()
    '                    actividad = .elementos
    '                    If .DialogResult = Windows.Forms.DialogResult.Cancel Then
    '                        Exit Sub
    '                    End If
    '                End With

    '                Dim descrip As String = ""
    '                For i As Integer = 0 To actividad.GetLength(1)
    '                    If actividad(1, i) = "1" Then
    '                        descrip = actividad(0, i)
    '                        Exit For
    '                    End If
    '                Next
    '                Me.TablaC.Item(BancoDtComplemento.Index, Me.TablaC.CurrentRow.Index).Value = descrip
    '                Me.TablaC_CellEndEdit(Me.TablaC, Nothing)

    '            End If
    '        End If



    '    End Sub

    '    Private Sub CmdEfectivo_Click(sender As Object, e As EventArgs) Handles CmdEfectivo.Click
    '        For i As Integer = 0 To Me.TablaImportar.Rows.Count - 1
    '            If Me.TablaImportar.Item(ImpEf.Index, i).Value > 0 Then
    '                Me.TablaImportar.Item(CuentasEfectivo.Index, i).Value = Cuenta_Efectivo()
    '                Me.TablaImportar.Columns(CuentasEfectivo.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
    '                Liberar_Proceso(i)
    '            Else
    '                If Me.TablaImportar.Item(Tot.Index, i).Value <= 2000 And Me.TablaImportar.Item(ImpEf.Index, i).Value = 0 And Me.TablaImportar.Item(Dif.Index, i).Value = Me.TablaImportar.Item(Tot.Index, i).Value Then
    '                    If UCase(Trim(Me.TablaImportar.Item(Fpago.Index, i).Value)) Like "*TRANSF*" Then
    '                    Else
    '                        Me.TablaImportar.Item(ImpEf.Index, i).Value = Me.TablaImportar.Item(Tot.Index, i).Value
    '                        Me.TablaImportar.Item(CuentasEfectivo.Index, i).Value = Cuenta_Efectivo()
    '                        Me.TablaImportar.Columns(CuentasEfectivo.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
    '                        Liberar_Proceso(i)
    '                        Try
    '                            Dim Fila As DataGridViewRow = Me.TablaImportar.Rows(i)
    '                            If Trim(Me.TablaImportar.Item(TipoPoliza.Index, i).Value) <> Nothing Then
    '                            Else

    '                                Fila.Cells(TipoPoliza.Index).Value = Me.TipoPoliza.Items(Obtener_index2(Trim("004 - Efectivo")))

    '                            End If
    '                        Catch ex As Exception

    '                        End Try
    '                    End If
    '                End If
    '            End If
    '        Next
    '    End Sub
    '    Private Sub Cargar_Pol_Modelo(ByVal RFC As String, ByVal Fecha As String, ByVal i As Integer)
    '        If Me.TablaImportar.Item(Aplic.Index, i).Value = False Then
    '            If Me.TablaImportar.Item(Dif.Index, i).Value <> 0 Then

    '                Dim Sql As String = " SELECT 	Id_Pol_Mod_Factura,	RFC,	Nombre,	FechaAntesde,	FechaDespuesde,	Clave,	Efectivo,
    '	                        Transferencia,	Banco_Origen,	Banco_Destino,	Cheque,	Nom_Banco_Ch,	Tipo_Poliza,	Provision,	Anticipo,	Id_Empresa,	Emitidas
    '                            FROM dbo.Facturas_Poliza_Modelo where Rfc= '" & RFC & "'  and  " & Fecha.ToString.Substring(0, 2) & " BETWEEN   FechaAntesde and FechaDespuesde "

    '                '  From  dbo.Facturas_Poliza_Modelo where Rfc= '" & RFC & "'  and FechaAntesde <= " & Fecha.ToString.Substring(0, 2) & " and FechaDespuesde >= " & Fecha.ToString.Substring(0, 2) & "  "
    '                Dim ds As DataSet = Eventos.Obtener_DS(Sql)
    '                If ds.Tables(0).Rows.Count > 0 Then
    '                    Dim Fila As DataGridViewRow = Me.TablaImportar.Rows(i)

    '                    Try
    '                        If Trim(Me.TablaImportar.Item(ContabilizacionC.Index, i).Value) <> Nothing Then
    '                        Else
    '                            If Trim(ds.Tables(0).Rows(0)("Clave")) <> "" Then
    '                                Fila.Cells(ContabilizacionC.Index).Value = Me.ContabilizacionC.Items(Obtener_index(Trim(ds.Tables(0).Rows(0)("Clave"))))
    '                                'Calcula cuenta cargos
    '                                If Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value <> Nothing Then

    '                                    If Me.TablaImportar.Item(NCuenta.Index, Me.TablaImportar.CurrentRow.Index).Value = Nothing Then
    '                                        If Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value = "C" Or Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value = "CPP" Then
    '                                            Me.TablaImportar.Item(ProvA.Index, Me.TablaImportar.CurrentRow.Index).Value = 0
    '                                        ElseIf Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value = "GG" Or Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value = "GGPP" Then
    '                                            Me.TablaImportar.Item(ProvP.Index, Me.TablaImportar.CurrentRow.Index).Value = 0
    '                                        End If
    '                                        Me.TablaImportar.Item(NCuenta.Index, Me.TablaImportar.CurrentRow.Index).Value = Cuenta_cargos(Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value, Trim(Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value))
    '                                        Me.TablaImportar.Item(LetraS.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.Calcula_letraSat(Me.TablaImportar.Item(MPago.Index, Me.TablaImportar.CurrentRow.Index).Value, Me.TablaImportar.Item(UCFDI.Index, Me.TablaImportar.CurrentRow.Index).Value)
    '                                    End If
    '                                Else
    '                                    Me.TablaImportar.Item(NCuenta.Index, Me.TablaImportar.CurrentRow.Index).Value = ""
    '                                End If
    '                            End If
    '                        End If
    '                    Catch ex As Exception

    '                    End Try

    '                    Try
    '                        If Trim(Me.TablaImportar.Item(TipoPoliza.Index, i).Value) <> Nothing Then
    '                        Else
    '                            If Trim(ds.Tables(0).Rows(0)("Tipo_Poliza")) <> "" Then
    '                                Fila.Cells(TipoPoliza.Index).Value = Me.TipoPoliza.Items(Obtener_index2(Trim(ds.Tables(0).Rows(0)("Tipo_Poliza"))))
    '                            End If
    '                        End If
    '                    Catch ex As Exception

    '                    End Try

    '                    Try
    '                        If Trim(ds.Tables(0).Rows(0)("Transferencia")) = True Then

    '                            Me.TablaImportar.Item(ImpT.Index, i).Value = Me.TablaImportar.Item(Dif.Index, i).Value
    '                            If Trim(Me.TablaImportar.Item(BancoOrigen.Index, i).Value) <> Nothing Then
    '                            Else

    '                                If Trim(ds.Tables(0).Rows(0)("Banco_Destino")) <> "" Then
    '                                    Fila.Cells(Bancodestino.Index).Value = Me.Bancodestino.Items(Obtener_indexB(Trim(ds.Tables(0).Rows(0)("Banco_Destino"))))
    '                                    If Trim(Me.TablaImportar.Item(CtaBD.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" Then
    '                                    Else
    '                                        Dim posi As Integer = InStr(1, Me.TablaImportar.Item(Bancodestino.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
    '                                        Dim cuantos As Integer = Len(Me.TablaImportar.Item(Bancodestino.Index, Me.TablaImportar.CurrentRow.Index).Value) - Len(Me.TablaImportar.Item(Bancodestino.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, posi))
    '                                        Dim Al As String = Me.TablaImportar.Item(Bancodestino.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(posi, cuantos)
    '                                        Me.TablaImportar.Item(CtaBD.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes", "No_Cuenta", " Id_Empresa =" & Me.lstCliente.SelectItem & " and Alias = '" & Trim(Al) & "'", True)
    '                                        Me.TablaImportar.Item(CuentaBancos.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes INNER JOIN Catalogo_de_Cuentas ON Catalogo_de_Cuentas.Id_cat_Cuentas = Bancos_Clientes.Id_cat_Cuentas", "Catalogo_de_Cuentas.Cuenta", " Bancos_Clientes.Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos_Clientes.Alias = '" & Trim(Al) & "'", True)
    '                                    End If
    '                                End If
    '                                Me.TablaImportar.Item(BancoOrigen.Index, i).Value = IIf(IsDBNull(ds.Tables(0).Rows(0)("Banco_Origen")) = True, "", ds.Tables(0).Rows(0)("Banco_Origen"))
    '                                Try
    '                                    If Trim(Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" And Trim(Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "0" Then
    '                                        Dim largo As Integer = Len(Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value)
    '                                        Dim cadena As String = Trim(Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value.ToString.Substring(largo - 3, 3))
    '                                        largo = Len(Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value)
    '                                        Dim Al As String = Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(largo - 3, 3)
    '                                        If cadena <> Al Then
    '                                            largo = InStr(1, Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
    '                                            Al = Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, largo - 1)
    '                                            Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos.Clave = '" & Trim(Al) & "' and  RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "'", True)
    '                                        End If
    '                                    Else
    '                                        Dim posi As Integer = InStr(1, Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
    '                                        Dim Al As String = Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, posi - 1)
    '                                        Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos.Clave = '" & Trim(Al) & "' and  RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "'", True)
    '                                    End If
    '                                Catch ex As Exception

    '                                End Try

    '                            End If
    '                        End If
    '                    Catch ex As Exception

    '                    End Try

    '                    Try
    '                        If Trim(ds.Tables(0).Rows(0)("Cheque")) = True Then
    '                            Me.TablaImportar.Item(ImpC.Index, i).Value = Me.TablaImportar.Item(Dif.Index, i).Value
    '                        End If
    '                    Catch ex As Exception

    '                    End Try
    '                    Try
    '                        If Trim(ds.Tables(0).Rows(0)("Efectivo")) = True Then
    '                            Me.TablaImportar.Item(ImpEf.Index, i).Value = Me.TablaImportar.Item(Dif.Index, i).Value

    '                        End If
    '                    Catch ex As Exception

    '                    End Try
    '                    Try
    '                        If Trim(ds.Tables(0).Rows(0)("Anticipo")) = True Then
    '                            Me.TablaImportar.Item(Anti.Index, i).Value = Me.TablaImportar.Item(Dif.Index, i).Value

    '                        End If
    '                    Catch ex As Exception

    '                    End Try
    '                    Try
    '                        If Trim(ds.Tables(0).Rows(0)("Provision")) = True Then
    '                            Me.TablaImportar.Item(ImpProvis.Index, i).Value = Me.TablaImportar.Item(Dif.Index, i).Value
    '                        End If
    '                    Catch ex As Exception

    '                    End Try
    '                    Me.TablaImportar_CellEndEdit(Me.TablaImportar, Nothing)
    '                End If
    '            End If

    '        End If
    '    End Sub

    '    Private Sub Cargar_Pol_Modelo_Notas(ByVal RFC As String, ByVal Fecha As String, ByVal i As Integer)
    '        If Me.TablaD.Item(AplD.Index, i).Value = False Then
    '            If Me.TablaD.Item(DifD.Index, i).Value <> 0 Then

    '                Dim Sql As String = " SELECT 	Id_Pol_Mod_Nota,	RFC,	Nombre,	FechaAntesde,	FechaDespuesde,	Clave,	Efectivo,	
    '                                Transferencia,	Cheque,	Tipo_Poliza,	ProvisionAcred,	ProvisionProveed,	Id_Empresa FROM dbo.Notas_Pol_Modelo 
    '                                where Emitidas = 1 and Rfc= '" & RFC & "'  and  " & Fecha.ToString.Substring(0, 2) & " BETWEEN   FechaAntesde and FechaDespuesde "

    '                '  From  dbo.Facturas_Poliza_Modelo where Rfc= '" & RFC & "'  and FechaAntesde <= " & Fecha.ToString.Substring(0, 2) & " and FechaDespuesde >= " & Fecha.ToString.Substring(0, 2) & "  "
    '                Dim ds As DataSet = Eventos.Obtener_DS(Sql)
    '                If ds.Tables(0).Rows.Count > 0 Then
    '                    Dim Fila As DataGridViewRow = Me.TablaD.Rows(i)

    '                    Try
    '                        If Trim(Me.TablaD.Item(LetraCd.Index, i).Value) <> Nothing Then
    '                        Else
    '                            If Trim(ds.Tables(0).Rows(0)("Clave")) <> "" Then
    '                                Fila.Cells(LetraCd.Index).Value = Me.LetraCd.Items(Obtener_indexDV(Trim(ds.Tables(0).Rows(0)("Clave"))))
    '                                'Calcula cuenta cargos
    '                                If Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value <> Nothing Then

    '                                    If Me.TablaD.Item(NomCuentaD.Index, Me.TablaD.CurrentRow.Index).Value = Nothing Then
    '                                        If Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value = "C" Or Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value = "CPP" Then
    '                                            Me.TablaD.Item(ProvAD.Index, Me.TablaD.CurrentRow.Index).Value = 0
    '                                        ElseIf Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value = "GG" Or Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value = "GGPP" Then
    '                                            Me.TablaD.Item(ProvPD.Index, Me.TablaD.CurrentRow.Index).Value = 0
    '                                        End If
    '                                        Me.TablaD.Item(NomCuentaD.Index, Me.TablaD.CurrentRow.Index).Value = Cuenta_cargos(Me.TablaD.Item(RFCED.Index, Me.TablaD.CurrentRow.Index).Value, Trim(Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value))
    '                                        Me.TablaD.Item(LetraSD.Index, Me.TablaD.CurrentRow.Index).Value = Eventos.Calcula_letraSat(Me.TablaD.Item(MetoD.Index, Me.TablaD.CurrentRow.Index).Value, Me.TablaD.Item(UcfdiD.Index, Me.TablaD.CurrentRow.Index).Value)
    '                                    End If
    '                                Else
    '                                    Me.TablaD.Item(NomCuentaD.Index, Me.TablaD.CurrentRow.Index).Value = ""
    '                                End If
    '                            End If
    '                        End If
    '                    Catch ex As Exception

    '                    End Try

    '                    Try
    '                        If Trim(Me.TablaD.Item(TipPolD.Index, i).Value) <> Nothing Then
    '                        Else
    '                            If Trim(ds.Tables(0).Rows(0)("Tipo_Poliza")) <> "" Then
    '                                Fila.Cells(TipPolD.Index).Value = Me.TipPolD.Items(Obtener_index2Dv(Trim(ds.Tables(0).Rows(0)("Tipo_Poliza"))))
    '                            End If
    '                        End If
    '                    Catch ex As Exception

    '                    End Try

    '                    Try
    '                        If Trim(ds.Tables(0).Rows(0)("Transferencia")) = True Then

    '                            Me.TablaD.Item(ImpTD.Index, i).Value = Me.TablaD.Item(DifD.Index, i).Value
    '                            If Trim(Me.TablaD.Item(BancoOd.Index, i).Value) <> Nothing Then
    '                            Else


    '                                If Trim(ds.Tables(0).Rows(0)("Banco_Origen")) <> "" Then
    '                                    Fila.Cells(BancoOd.Index).Value = Me.BancoOd.Items(Obtener_indexBDv(Trim(ds.Tables(0).Rows(0)("Banco_Origen"))))
    '                                    If Trim(Me.TablaD.Item(CtaOD.Index, Me.TablaD.CurrentRow.Index).Value) <> "" Then
    '                                    Else
    '                                        Dim posi As Integer = InStr(1, Me.TablaD.Item(BancoOd.Index, Me.TablaD.CurrentRow.Index).Value, "-", CompareMethod.Binary)
    '                                        Dim cuantos As Integer = Len(Me.TablaD.Item(BancoOd.Index, Me.TablaD.CurrentRow.Index).Value) - Len(Me.TablaD.Item(BancoOd.Index, Me.TablaD.CurrentRow.Index).Value.Substring(0, posi))
    '                                        Dim Al As String = Me.TablaD.Item(BancoOd.Index, Me.TablaD.CurrentRow.Index).Value.Substring(posi, cuantos)
    '                                        Me.TablaD.Item(CtaOD.Index, Me.TablaD.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes", "No_Cuenta", " Id_Empresa =" & Me.lstCliente.SelectItem & " and Alias = '" & Trim(Al) & "'", True)

    '                                        Me.TablaD.Item(CtaBancosD.Index, Me.TablaD.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes INNER JOIN Catalogo_de_Cuentas ON Catalogo_de_Cuentas.Id_cat_Cuentas = Bancos_Clientes.Id_cat_Cuentas", "Catalogo_de_Cuentas.Cuenta", " Bancos_Clientes.Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos_Clientes.Alias = '" & Trim(Al) & "'", True)

    '                                    End If

    '                                End If
    '                                Me.TablaD.Item(BancoDD.Index, i).Value = IIf(IsDBNull(ds.Tables(0).Rows(0)("Banco_Destino")) = True, "", ds.Tables(0).Rows(0)("Banco_Destino"))

    '                                Try
    '                                    If Trim(Me.TablaD.Item(CtaDD.Index, Me.TablaD.CurrentRow.Index).Value) <> "" And Trim(Me.TablaD.Item(CtaDD.Index, Me.TablaD.CurrentRow.Index).Value) <> "0" Then
    '                                        Dim largo As Integer = Len(Me.TablaD.Item(BancoDD.Index, Me.TablaD.CurrentRow.Index).Value)
    '                                        Dim cadena As String = Trim(Me.TablaD.Item(BancoDD.Index, Me.TablaD.CurrentRow.Index).Value.ToString.Substring(largo - 3, 3))
    '                                        largo = Len(Me.TablaD.Item(CtaDD.Index, Me.TablaD.CurrentRow.Index).Value)
    '                                        Dim Al As String = Me.TablaD.Item(CtaDD.Index, Me.TablaD.CurrentRow.Index).Value.Substring(largo - 3, 3)
    '                                        If cadena <> Al Then
    '                                            largo = InStr(1, Me.TablaD.Item(BancoDD.Index, Me.TablaD.CurrentRow.Index).Value, "-", CompareMethod.Binary)
    '                                            Al = Me.TablaD.Item(BancoDD.Index, Me.TablaD.CurrentRow.Index).Value.Substring(0, largo - 1)
    '                                            Me.TablaD.Item(CtaDD.Index, Me.TablaD.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC", "Clabe", " Id_Empresa =" & Me.lstCliente.SelectItem & " and id_banco = '" & Trim(Al) & "' and  RFC = '" & Me.TablaD.Item(RFCE.Index, Me.TablaD.CurrentRow.Index).Value & "'", True)
    '                                        End If
    '                                    Else
    '                                        Dim posi As Integer = InStr(1, Me.TablaD.Item(BancoDD.Index, Me.TablaD.CurrentRow.Index).Value, "-", CompareMethod.Binary)
    '                                        Dim Al As String = Me.TablaD.Item(BancoDD.Index, Me.TablaD.CurrentRow.Index).Value.Substring(0, posi - 1)
    '                                        Me.TablaD.Item(CtaDD.Index, Me.TablaD.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC", "Clabe", " Id_Empresa =" & Me.lstCliente.SelectItem & " and id_banco = '" & Trim(Al) & "' and  RFC = '" & Me.TablaD.Item(RFCE.Index, Me.TablaD.CurrentRow.Index).Value & "'", True)
    '                                    End If
    '                                Catch ex As Exception

    '                                End Try

    '                            End If
    '                        End If
    '                    Catch ex As Exception

    '                    End Try

    '                    Try
    '                        If Trim(ds.Tables(0).Rows(0)("Cheque")) = True Then
    '                            Me.TablaD.Item(ImpCHD.Index, i).Value = Me.TablaD.Item(DifD.Index, i).Value

    '                            If Trim(Me.TablaD.Item(NomBankCHD.Index, i).Value) <> Nothing Then
    '                            Else
    '                                If Trim(ds.Tables(0).Rows(0)("Nom_Banco_Ch")) <> "" Then
    '                                    Fila.Cells(NomBankCHD.Index).Value = Me.NomBankCHD.Items(Obtener_indexBDvBH(Trim(ds.Tables(0).Rows(0)("Nom_Banco_Ch"))))
    '                                End If
    '                            End If
    '                        End If
    '                    Catch ex As Exception

    '                    End Try
    '                    Try
    '                        If Trim(ds.Tables(0).Rows(0)("Efectivo")) = True Then
    '                            Me.TablaD.Item(ImpED.Index, i).Value = Me.TablaD.Item(DifD.Index, i).Value

    '                        End If
    '                    Catch ex As Exception

    '                    End Try
    '                    Try
    '                        If Trim(ds.Tables(0).Rows(0)("ProvisionAcred")) = True Then
    '                            Me.TablaD.Item(ProvAD.Index, i).Value = Me.TablaD.Item(DifD.Index, i).Value

    '                        End If
    '                    Catch ex As Exception

    '                    End Try
    '                    Try
    '                        If Trim(ds.Tables(0).Rows(0)("ProvisionProveed")) = True Then
    '                            Me.TablaD.Item(ProvPD.Index, i).Value = Me.TablaD.Item(DifD.Index, i).Value
    '                        End If
    '                    Catch ex As Exception

    '                    End Try
    '                    Me.TablaD_CellEndEdit(Me.TablaD, Nothing)
    '                End If
    '            End If

    '        End If
    '    End Sub


    '    Private Sub Buscador1_Buscar() Handles Buscador1.Buscar
    '        'Por defecto, indico buscar en la primera columna
    '        Dim indiceColumna As Integer = Me.TablaImportar.CurrentCell.ColumnIndex
    '        Dim Busqueda As String = Trim(UCase(Me.Buscador1.TxtFiltro.Text.ToLower))
    '        Dim cadena As String = ""
    '        Dim row As DataGridViewRow
    '        'Recorro filas del DataGridView
    '        For i As Integer = Me.TablaImportar.CurrentRow.Index To Me.TablaImportar.Rows.Count - 1
    '            row = Me.TablaImportar.Rows(i)
    '            cadena = Trim(UCase(row.Cells(indiceColumna).Value))
    '            'Si el contenido de la columna coinside con el valor del TextBox
    '            If cadena Like "*" & Busqueda & "*" Then
    '                'Selecciono fila y abandono bucle
    '                ' row.Selected = True
    '                If Me.TablaImportar.CurrentRow.Index = row.Index Then
    '                    Me.TablaImportar.Rows(row.Index).Cells(indiceColumna).Selected = True
    '                    Me.TablaImportar.CurrentCell = Me.TablaImportar.Rows(row.Index).Cells(indiceColumna)
    '                Else
    '                    Me.TablaImportar.Rows(row.Index).Cells(indiceColumna).Selected = True
    '                    Me.TablaImportar.CurrentCell = Me.TablaImportar.Rows(row.Index).Cells(indiceColumna)
    '                    Exit For
    '                End If

    '            End If
    '        Next

    '    End Sub

    '    Private Sub Buscador2_Buscar() Handles Buscador2.Buscar
    '        Dim indiceColumna As Integer = Me.TablaD.CurrentCell.ColumnIndex
    '        Dim Busqueda As String = Trim(UCase(Me.Buscador2.TxtFiltro.Text.ToLower))
    '        Dim cadena As String = ""
    '        Dim row As DataGridViewRow
    '        For i As Integer = Me.TablaD.CurrentRow.Index To Me.TablaD.Rows.Count - 1
    '            row = Me.TablaD.Rows(i)
    '            cadena = Trim(UCase(row.Cells(indiceColumna).Value))
    '            If cadena Like "*" & Busqueda & "*" Then
    '                If Me.TablaD.CurrentRow.Index = row.Index Then
    '                    Me.TablaD.Rows(row.Index).Cells(indiceColumna).Selected = True
    '                    Me.TablaD.CurrentCell = Me.TablaD.Rows(row.Index).Cells(indiceColumna)
    '                Else
    '                    Me.TablaD.Rows(row.Index).Cells(indiceColumna).Selected = True
    '                    Me.TablaD.CurrentCell = Me.TablaD.Rows(row.Index).Cells(indiceColumna)
    '                    Exit For
    '                End If
    '            End If
    '        Next
    '    End Sub

    '    Private Sub Buscador3_Buscar() Handles Buscador3.Buscar
    '        Dim indiceColumna As Integer = Me.TablaC.CurrentCell.ColumnIndex
    '        Dim Busqueda As String = Trim(UCase(Me.Buscador3.TxtFiltro.Text.ToLower))
    '        Dim cadena As String = ""
    '        Dim row As DataGridViewRow
    '        For i As Integer = Me.TablaC.CurrentRow.Index To Me.TablaC.Rows.Count - 1
    '            row = Me.TablaC.Rows(i)
    '            cadena = Trim(UCase(row.Cells(indiceColumna).Value))
    '            If cadena Like "*" & Busqueda & "*" Then
    '                If Me.TablaC.CurrentRow.Index = row.Index Then
    '                    Me.TablaC.Rows(row.Index).Cells(indiceColumna).Selected = True
    '                    Me.TablaC.CurrentCell = Me.TablaC.Rows(row.Index).Cells(indiceColumna)
    '                Else
    '                    Me.TablaC.Rows(row.Index).Cells(indiceColumna).Selected = True
    '                    Me.TablaC.CurrentCell = Me.TablaC.Rows(row.Index).Cells(indiceColumna)
    '                    Exit For
    '                End If
    '            End If
    '        Next
    '    End Sub

    '    Private Sub TablaD_KeyDown(sender As Object, e As KeyEventArgs) Handles TablaD.KeyDown
    '        If e.KeyCode = Keys.E AndAlso e.Modifiers = Keys.Shift Then
    '            Me.TablaD.Item(ImpED.Index, Me.TablaD.CurrentRow.Index).Value = Me.TablaD.Item(DifD.Index, Me.TablaD.CurrentRow.Index).Value
    '        ElseIf e.KeyCode = Keys.T AndAlso e.Modifiers = Keys.Shift Then
    '            Me.TablaD.Item(ImpTD.Index, Me.TablaD.CurrentRow.Index).Value = Me.TablaD.Item(DifD.Index, Me.TablaD.CurrentRow.Index).Value
    '        ElseIf e.KeyCode = Keys.C AndAlso e.Modifiers = Keys.Shift Then
    '            Me.TablaD.Item(ImpCHD.Index, Me.TablaD.CurrentRow.Index).Value = Me.TablaD.Item(DifD.Index, Me.TablaD.CurrentRow.Index).Value
    '        ElseIf e.KeyCode = Keys.A AndAlso e.Modifiers = Keys.Shift Then 'Ajustes
    '            Me.TablaD.Item(AntiD.Index, Me.TablaD.CurrentRow.Index).Value = Me.TablaD.Item(DifD.Index, Me.TablaD.CurrentRow.Index).Value
    '        ElseIf e.KeyCode = Keys.J AndAlso e.Modifiers = Keys.Shift Then
    '            Me.TablaD.Item(AjusD.Index, Me.TablaD.CurrentRow.Index).Value = Me.TablaD.Item(DifD.Index, Me.TablaD.CurrentRow.Index).Value
    '        End If
    '        If e.KeyCode = Keys.A AndAlso e.Modifiers = Keys.Control Then
    '            'Programar calculo automatico de numeros de poliza
    '            Dim Inicial As Integer = InputBox("Teclea el numero de poliza Inicial:", Eventos.titulo_app, 1)
    '            For Each Fila As DataGridViewRow In TablaD.Rows
    '                If Fila.Cells(NPolD.Index).Selected = True Then
    '                    Fila.Cells(NPolD.Index).Value = Inicial
    '                    Inicial += 1
    '                End If
    '            Next
    '        End If
    '        Liberar_ProcesoDev(Me.TablaD.CurrentRow.Index)
    '    End Sub

    '    Private Sub TablaC_KeyDown(sender As Object, e As KeyEventArgs)
    '        RadMessageBox.SetThemeName("MaterialBlueGrey")
    '        If e.KeyCode = Keys.E AndAlso e.Modifiers = Keys.Shift Then
    '            Me.TablaC.Item(ImpEfComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Me.TablaC.Item(DifComplemento.Index, Me.TablaC.CurrentRow.Index).Value
    '            If Me.TablaC.Item(ImpEfComplemento.Index, Me.TablaC.CurrentRow.Index).Value > 0 Then
    '                If Candado_Importe_Efectivocomple(Me.TablaC.CurrentRow.Index) = True Then ' se verifica candado
    '                    ' IMPORTE DE EFECTIVO Antiguo Codigo
    '                    Me.TablaC.Item(CtaEfComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Cuenta_Efectivo()
    '                    Me.TablaC.Columns(CtaEfComplemento.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
    '                Else
    '                    If RadMessageBox.Show("El importe de efectivo Excede los $2,000 deseas usarlo?", Eventos.titulo_app, MessageBoxButtons.YesNo, RadMessageIcon.Question) = Windows.Forms.DialogResult.Yes Then
    '                        Me.TablaC.Item(CtaEfComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Cuenta_Efectivo()
    '                        Me.TablaC.Columns(CtaEfComplemento.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
    '                    Else
    '                        Me.TablaC.Item(ImpEfComplemento.Index, Me.TablaC.CurrentRow.Index).Value = 0
    '                        Exit Sub
    '                    End If
    '                End If
    '            Else
    '                Me.TablaC.Item(CtaEfComplemento.Index, Me.TablaC.CurrentRow.Index).Value = ""
    '            End If
    '        ElseIf e.KeyCode = Keys.T AndAlso e.Modifiers = Keys.Shift Then
    '            Me.TablaC.Item(ImpTComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Me.TablaC.Item(DifComplemento.Index, Me.TablaC.CurrentRow.Index).Value
    '            If Me.TablaC.Item(ImpTComplemento.Index, Me.TablaC.CurrentRow.Index).Value > 0 Then
    '                If Trim(Me.TablaC.Item(BancoOrigenTComplemento.Index, Me.TablaC.CurrentRow.Index).Value) <> "" Then
    '                    If Trim(Me.TablaC.Item(CtaOTComplemento.Index, Me.TablaC.CurrentRow.Index).Value) <> "" Then
    '                    Else
    '                        Dim posi As Integer = InStr(1, Me.TablaC.Item(BancoOrigenTComplemento.Index, Me.TablaC.CurrentRow.Index).Value, "-", CompareMethod.Binary)
    '                        Dim cuantos As Integer = Len(Me.TablaC.Item(BancoOrigenTComplemento.Index, Me.TablaC.CurrentRow.Index).Value) - Len(Me.TablaC.Item(BancoOrigenTComplemento.Index, Me.TablaC.CurrentRow.Index).Value.Substring(0, posi))
    '                        Dim Al As String = Me.TablaC.Item(BancoOrigenTComplemento.Index, Me.TablaC.CurrentRow.Index).Value.Substring(posi, cuantos)
    '                        Me.TablaC.Item(CtaOTComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes", "No_Cuenta", " Id_Empresa =" & Me.lstCliente.SelectItem & " and Alias = '" & Trim(Al) & "'", True)

    '                        Me.TablaC.Item(CtaBancosComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes INNER JOIN Catalogo_de_Cuentas ON Catalogo_de_Cuentas.Id_cat_Cuentas = Bancos_Clientes.Id_cat_Cuentas", "Catalogo_de_Cuentas.Cuenta", " Bancos_Clientes.Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos_Clientes.Alias = '" & Trim(Al) & "'", True)
    '                    End If
    '                Else

    '                End If

    '                If Trim(Me.TablaC.Item(BancoDtComplemento.Index, Me.TablaC.CurrentRow.Index).Value) <> "" Then
    '                    Try
    '                        If Trim(Me.TablaC.Item(CtaDTComplemento.Index, Me.TablaC.CurrentRow.Index).Value) <> "" And Trim(Me.TablaC.Item(CtaDTComplemento.Index, Me.TablaC.CurrentRow.Index).Value) <> "0" Then
    '                        Else
    '                            Dim posi As Integer = InStr(1, Me.TablaC.Item(BancoDtComplemento.Index, Me.TablaC.CurrentRow.Index).Value, "-", CompareMethod.Binary)
    '                            Dim Al As String = Me.TablaC.Item(BancoDtComplemento.Index, Me.TablaC.CurrentRow.Index).Value.Substring(0, posi - 1)
    '                            Me.TablaC.Item(CtaDTComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC", "Clabe", " Id_Empresa =" & Me.lstCliente.SelectItem & " and id_banco = '" & Trim(Al) & "' and  RFC = '" & Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value & "'", True)
    '                        End If
    '                    Catch ex As Exception

    '                    End Try
    '                Else
    '                    '  Banco_destinoComp()

    '                End If



    '                If Trim(UCase(Me.lblce.Text)) = "FALSE" Then
    '                    Me.TablaC.Columns(BancoOrigenTComplemento.Index).Visible = False
    '                    Me.TablaC.Columns(CtaOTComplemento.Index).Visible = False
    '                    Me.TablaC.Columns(BancoDtComplemento.Index).Visible = False
    '                    Me.TablaC.Columns(CtaDTComplemento.Index).Visible = False
    '                    Me.TablaC.Columns(FTComplemento.Index).Visible = True

    '                End If


    '            End If
    '        ElseIf e.KeyCode = Keys.C AndAlso e.Modifiers = Keys.Shift Then
    '            Me.TablaC.Item(ImpChComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Me.TablaC.Item(DifComplemento.Index, Me.TablaC.CurrentRow.Index).Value
    '            If Me.TablaC.Item(ImpChComplemento.Index, Me.TablaC.CurrentRow.Index).Value > 0 Then
    '                'Cheques

    '                Dim posi As Integer = 0
    '                Dim Al As String = ""
    '                If Trim(Me.TablaC.Item(BancoDEC.Index, Me.TablaC.CurrentRow.Index).Value) <> "" Then
    '                    If Trim(Me.TablaC.Item(CtaBancoDChC.Index, Me.TablaC.CurrentRow.Index).Value) <> "" Then


    '                    Else
    '                        posi = InStr(1, Me.TablaC.Item(BancoDEC.Index, Me.TablaC.CurrentRow.Index).Value, "-", CompareMethod.Binary)
    '                        Dim cuantos As Integer = Len(Me.TablaC.Item(BancoDEC.Index, Me.TablaC.CurrentRow.Index).Value) - Len(Me.TablaC.Item(BancoDEC.Index, Me.TablaC.CurrentRow.Index).Value.Substring(0, posi))
    '                        Al = Me.TablaC.Item(BancoDEC.Index, Me.TablaC.CurrentRow.Index).Value.Substring(posi, cuantos)
    '                        Me.TablaC.Item(CtaBancoDChC.Index, Me.TablaC.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes", "No_Cuenta", " Id_Empresa =" & Me.lstCliente.SelectItem & " and Alias = '" & Trim(Al) & "'", True)
    '                        Me.TablaC.Item(CtaChequesC.Index, Me.TablaC.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes INNER JOIN Catalogo_de_Cuentas ON Catalogo_de_Cuentas.Id_cat_Cuentas = Bancos_Clientes.Id_cat_Cuentas", "Catalogo_de_Cuentas.Cuenta", " Bancos_Clientes.Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos_Clientes.Alias = '" & Trim(Al) & "'", True)
    '                    End If
    '                Else

    '                End If
    '                'Cargar bancos Origen para ingresos de Cheques
    '                If Trim(Me.TablaC.Item(BancoCHComplemento.Index, Me.TablaC.CurrentRow.Index).Value) <> "" Then
    '                    If Trim(Me.TablaC.Item(CtaOchComplemento.Index, Me.TablaC.CurrentRow.Index).Value) <> "" Then
    '                        Dim largo As Integer = Len(Me.TablaC.Item(BancoCHComplemento.Index, Me.TablaC.CurrentRow.Index).Value)
    '                        Dim cadena As String = Trim(Me.TablaC.Item(BancoCHComplemento.Index, Me.TablaC.CurrentRow.Index).Value.ToString.Substring(largo - 3, 3))
    '                        largo = Len(Me.TablaC.Item(CtaOchComplemento.Index, Me.TablaC.CurrentRow.Index).Value)
    '                        Al = Me.TablaC.Item(CtaOchComplemento.Index, Me.TablaC.CurrentRow.Index).Value.Substring(largo - 3, 3)
    '                        If cadena <> Al Then
    '                            posi = InStr(1, Me.TablaC.Item(BancoCHComplemento.Index, Me.TablaC.CurrentRow.Index).Value, "-", CompareMethod.Binary)
    '                            Al = Trim(Me.TablaC.Item(BancoCHComplemento.Index, Me.TablaC.CurrentRow.Index).Value.Substring(0, posi - 1))
    '                            Me.TablaC.Item(CtaOchComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos.Clave = " & Trim(Al) & " and  RFC = '" & Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value & "' and Bancos_RFC.clabe like '%" & cadena & "%'", True)
    '                        End If
    '                    Else
    '                        posi = InStr(1, Me.TablaC.Item(BancoCHComplemento.Index, Me.TablaC.CurrentRow.Index).Value, "-", CompareMethod.Binary)
    '                        Al = Trim(Me.TablaC.Item(BancoCHComplemento.Index, Me.TablaC.CurrentRow.Index).Value.Substring(0, posi - 1))
    '                        Me.TablaC.Item(CtaOchComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos.Clave = " & Trim(Al) & " and  RFC = '" & Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value & "'", True)
    '                    End If
    '                Else
    '                    Me.TablaC.Item(BancoCHComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Banco_OrigenChe(Me.lstCliente.SelectItem, Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value)
    '                    Me.TablaC.Item(CtaOchComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & "  and  RFC = '" & Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value & "'", True)
    '                End If
    '                'Se Muestran Columnas de Contabilidad Electronica
    '                If Trim(UCase(Me.lblce.Text)) = "FALSE" Then
    '                    Me.TablaC.Columns(BancoCHComplemento.Index).Visible = False
    '                    Me.TablaC.Columns(CtaOchComplemento.Index).Visible = False
    '                    Me.TablaC.Columns(NoChComplemento.Index).Visible = False
    '                    Me.TablaC.Columns(FCHComplemento.Index).Visible = True
    '                End If

    '            End If
    '        ElseIf e.KeyCode = Keys.A AndAlso e.Modifiers = Keys.Shift Then 'Anticipos
    '            Me.TablaC.Item(AntiComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Me.TablaC.Item(DifComplemento.Index, Me.TablaC.CurrentRow.Index).Value
    '            If Me.TablaC.Item(AntiComplemento.Index, Me.TablaC.CurrentRow.Index).Value > 0 Then

    '                Me.TablaC.Item(CtaAntiComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Cuenta_Anticipo()
    '                Me.TablaC.Columns(CtaAntiComplemento.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
    '            Else
    '                Me.TablaC.Item(CtaAntiComplemento.Index, Me.TablaC.CurrentRow.Index).Value = ""
    '            End If
    '        ElseIf e.KeyCode = Keys.J AndAlso e.Modifiers = Keys.Shift Then 'Ajustes
    '            Me.TablaC.Item(AjusComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Me.TablaC.Item(DifComplemento.Index, Me.TablaC.CurrentRow.Index).Value
    '            If Me.TablaC.Item(AjusComplemento.Index, Me.TablaC.CurrentRow.Index).Value <> 0 Then
    '                If Candado_Importe_Efectivocomple(Me.TablaC.CurrentRow.Index) = True Then ' se verifica candado
    '                    Me.TablaC.Item(CtaAjusComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Cuenta_Efectivo()
    '                    Me.TablaC.Columns(CtaAjusComplemento.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
    '                Else
    '                    If RadMessageBox.Show("El importe de efectivo Excede los $2,000 deseas usarlo?", Eventos.titulo_app, MessageBoxButtons.YesNo, RadMessageIcon.Question) = Windows.Forms.DialogResult.Yes Then

    '                        Me.TablaC.Item(CtaAjusComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Cuenta_Efectivo()
    '                        Me.TablaC.Columns(CtaAjusComplemento.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
    '                    Else
    '                        Me.TablaC.Item(AjusComplemento.Index, Me.TablaC.CurrentRow.Index).Value = 0
    '                        Exit Sub
    '                    End If
    '                End If
    '            Else
    '                Me.TablaC.Item(CtaAjusComplemento.Index, Me.TablaC.CurrentRow.Index).Value = ""
    '            End If
    '        End If
    '        If e.KeyCode = Keys.A AndAlso e.Modifiers = Keys.Control Then
    '            'Programar calculo automatico de numeros de poliza
    '            Dim Inicial As Integer = InputBox("Teclea el numero de poliza Inicial:", Eventos.titulo_app, 1)
    '            For Each Fila As DataGridViewRow In TablaC.Rows
    '                If Fila.Cells(NumPolComplemento.Index).Selected = True Then
    '                    Fila.Cells(NumPolComplemento.Index).Value = Inicial
    '                    Inicial += 1
    '                End If
    '            Next
    '        End If
    '        Liberar_ProcesoComple(Me.TablaC.CurrentRow.Index)
    '    End Sub

    '    Private Sub CrearPolizaManualToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles CrearPolizaManualToolStripMenuItem.Click
    '        ' Eventos.Abrir_form(Control_de_Polizas)
    '    End Sub

    '    'Private Sub CmdManual_Click(sender As Object, e As EventArgs) Handles CmdManual.Click
    '    '    Eventos.Abrir_Manual("Emitidas")
    '    'End Sub

    '    Private Sub TablaC_DataError(sender As Object, e As DataGridViewDataErrorEventArgs)

    '    End Sub

    '    Private Sub TablaD_DataError(sender As Object, e As DataGridViewDataErrorEventArgs) Handles TablaD.DataError

    '    End Sub

    '    Private Sub TablaImportar_DataError(sender As Object, e As DataGridViewDataErrorEventArgs) Handles TablaImportar.DataError

    '    End Sub

    '    Private Sub SP1_DoWork(sender As Object, e As System.ComponentModel.DoWorkEventArgs) Handles SP1.DoWork
    '        My.Forms.Inicio.txtServerDB.Text = serV
    '        Facturas(Dato)
    '        Cargar_valores_contables()
    '        Color_Columnas()
    '        Dim frm As New BarraProcesovb
    '        frm.Show()
    '        frm.Text = "Cargando Valores predefinidos por favor espere..."
    '        frm.Barra.Minimum = 0
    '        frm.Barra.Maximum = Me.TablaImportar.Rows.Count
    '        For i As Integer = 0 To Me.TablaImportar.Rows.Count - 1
    '            Liberar_Proceso(i)
    '            Cargar_Pol_Modelo(Me.TablaImportar.Item(RFCE.Index, i).Value, Me.TablaImportar.Item(Fecha_Emi.Index, i).Value, i)
    '            Me.TablaImportar_CellEndEdit(Me.TablaImportar, Nothing)
    '            frm.Barra.value = i
    '        Next
    '        frm.Close()
    '    End Sub

    '    Private Sub SP2_DoWork(sender As Object, e As System.ComponentModel.DoWorkEventArgs) Handles SP2.DoWork
    '        RadMessageBox.SetThemeName("MaterialBlueGrey")
    '        My.Forms.Inicio.txtServerDB.Text = serV
    '        Complementos(DatoC)
    '        Cargar_valores_contablesC()
    '        Color_ColumnasC()
    '        Dim frm As New BarraProcesovb
    '        frm.Show()
    '        frm.Text = "Verificando informacion de pagos por favor espere..."
    '        frm.Barra.Minimum = 0
    '        frm.Barra.Maximum = Me.TablaC.Rows.Count
    '        For i As Integer = 0 To Me.TablaC.Rows.Count - 1
    '            Liberar_ProcesoComple(i)
    '            frm.Barra.value = i
    '        Next
    '        frm.Close()
    '        RadMessageBox.Show("Proceso Terminado...", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
    '    End Sub

#End Region
    Private Sub Cmd_Procesar_Click(sender As Object, e As EventArgs) Handles Cmd_Procesar.Click
        If Me.TablaImportar.Rows.Count > 0 Then
            If Me.lstCliente.SelectText <> "" Then
                If Verifica_catalogo_cliente(Me.lstCliente.SelectItem) = True Then
                    Guardar_Carga()
                    RadMessageBox.SetThemeName("MaterialBlueGrey")
                    If RadMessageBox.Show("La empresa " & Me.lstCliente.SelectText & " es correcta?", Eventos.titulo_app, MessageBoxButtons.YesNo, RadMessageIcon.Question) = Windows.Forms.DialogResult.Yes Then
                        Me.Barra.Maximum = Me.TablaImportar.RowCount - 1
                        Me.Barra.Minimum = 0
                        Me.Barra.Value1 = 0

                        For p As Integer = 0 To Me.TablaImportar.RowCount - 1
                            If Me.TablaImportar.Item(Aplic.Index, p).Value = True Then ' se paso todos los filtros de creacion
                                Codificar_polizas(p)
                            End If
                            If Me.Barra.Value1 = Me.Barra.Maximum Then
                                Me.Barra.Minimum = 0
                                Me.Cursor = Cursors.Arrow
                                RadMessageBox.SetThemeName("MaterialBlueGrey")
                                RadMessageBox.Show("Proceso Terminado", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
                                Me.Barra.Value1 = 0
                            Else
                                Me.Barra.Value1 += 1
                            End If
                        Next
                    End If
                Else
                    MessageBox.Show("No existe Catalogo de cuentas para: " & Me.lstCliente.SelectText & "", Eventos.titulo_app, MessageBoxButtons.OK, MessageBoxIcon.Information)
                End If
                Me.CmdImportar.PerformClick()
            Else
                RadMessageBox.SetThemeName("MaterialBlueGrey")
                RadMessageBox.Show("No se ha seleccionado una Empresa", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
            End If



        Else
            RadMessageBox.SetThemeName("MaterialBlueGrey")
            RadMessageBox.Show("No se ha Importado ningun archivo", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
        End If
    End Sub
    Private Sub CmdImportar_Click(sender As Object, e As EventArgs) Handles CmdImportar.Click
        activo = True
        Limpia()

        If Me.lstCliente.SelectText <> "" Then
            If Buscar_Parametros(Me.lstCliente.SelectItem) = True Then
                Buscar_xml(Me.lstCliente.SelectItem, " and Fecha_Emision >= " & Eventos.Sql_hoy(Me.DtInicio.Value) & " and Fecha_Emision <= " & Eventos.Sql_hoy(Dtfin.Value) & "")
                SP1.RunWorkerAsync(Me.TablaImportar)
                Control.CheckForIllegalCrossThreadCalls = False
                Me.TablaImportar.Enabled = True
                activo = False
            End If
        Else
            RadMessageBox.SetThemeName("MaterialBlueGrey")
            RadMessageBox.Show("No se ha seleccionado una Empresa", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
        End If
    End Sub
    Private Sub Facturas(ByVal ds As DataSet)
        Try
            If ds.Tables(0).Rows.Count > 0 Then

            End If
        Catch ex As Exception
            Exit Sub
        End Try
        Dim frm As New BarraProcesovb
        frm.Show()
        frm.Text = "Calculando Facturas por favor espere..."
        frm.Barra.Minimum = 0
        frm.Barra.Maximum = ds.Tables(0).Rows.Count
        For j As Integer = 0 To ds.Tables(0).Rows.Count - 1



            Dim Fila As DataGridViewRow = Me.TablaImportar.Rows(j)
            Me.TablaImportar.Item(0, j).Value = False
            Me.TablaImportar.Item(Id_Xml.Index, j).Value = ds.Tables(0).Rows(j)("Id_Registro_Xml")
            Me.TablaImportar.Item(Tip.Index, j).Value = ds.Tables(0).Rows(j)("Tipo")
            Me.TablaImportar.Item(Fecha_Emi.Index, j).Value = ds.Tables(0).Rows(j)("Fecha_Emision")
            Me.TablaImportar.Item(UUI.Index, j).Value = ds.Tables(0).Rows(j)("UUID")
            Me.TablaImportar.Item(UCFDI.Index, j).Value = ds.Tables(0).Rows(j)("UsoCFDI")
            Me.TablaImportar.Item(RFCE.Index, j).Value = ds.Tables(0).Rows(j)("RFC_Receptor")
            Me.TablaImportar.Item(NomEmisor.Index, j).Value = ds.Tables(0).Rows(j)("Nombre_Receptor")
            Me.TablaImportar.Item(Conc.Index, j).Value = ds.Tables(0).Rows(j)("Conceptos")
            Me.TablaImportar.Item(MPago.Index, j).Value = ds.Tables(0).Rows(j)("Metodo_de_Pago")
            Me.TablaImportar.Item(Fpago.Index, j).Value = Trim(ds.Tables(0).Rows(j)("Descripcion"))
            Me.TablaImportar.Item(Subtotal.Index, j).Value = ds.Tables(0).Rows(j)("SubTotal")
            Me.TablaImportar.Item(CIVA.Index, j).Value = ds.Tables(0).Rows(j)("IVA_16")
            Me.TablaImportar.Item(Tot.Index, j).Value = ds.Tables(0).Rows(j)("Total")

            Me.TablaImportar.Item(LetraS.Index, j).Value = ds.Tables(0).Rows(j)("Letra_Sat")
            Me.TablaImportar.Item(NCuenta.Index, j).Value = ds.Tables(0).Rows(j)("Nombre_cuenta")
            Try
                If Trim(ds.Tables(0).Rows(j)("Clave")) <> "" Then
                    Fila.Cells(ContabilizacionC.Index).Value = Me.ContabilizacionC.Items(Obtener_index(Trim(ds.Tables(0).Rows(j)("Clave"))))
                    '     Me.TablaImportar.Item(ContabilizacionC.INDEX, j).Value = Me.ContabilizacionC.Items(Obtener_index(ds.Tables(0).Rows(j)("Clave")))
                End If

            Catch ex As Exception

            End Try

            Dim year As String = ds.Tables(0).Rows(j)("Fecha_Emision").ToString.Substring(6, 4)
            Dim month As String = ds.Tables(0).Rows(j)("Fecha_Emision").ToString.Substring(3, 2)
            Me.TablaImportar.Item(anio.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Anio_Contable")) = True, year, ds.Tables(0).Rows(j)("Anio_Contable"))
            Me.TablaImportar.Item(Mes.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Mes_Contable")) = True, month, ds.Tables(0).Rows(j)("Mes_Contable"))
            Me.TablaImportar.Item(ImpEf.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Efectivo")) = True, 0, ds.Tables(0).Rows(j)("Imp_Efectivo"))
            Me.TablaImportar.Item(CuentasEfectivo.Index, j).Value = ds.Tables(0).Rows(j)("Cuenta_Efectivo")
            Me.TablaImportar.Item(ImpT.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Transf")) = True, 0, ds.Tables(0).Rows(j)("Imp_Transf"))


            Me.TablaImportar.Item(BancoOrigen.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Banco_Origen")) = True, "", ds.Tables(0).Rows(j)("Banco_Origen"))

            Me.TablaImportar.Item(CuentaO.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cuenta_Origen")) = True, "", ds.Tables(0).Rows(j)("Cuenta_Origen"))

            Try
                If Trim(ds.Tables(0).Rows(j)("Banco_Destino")) <> "" Then
                    Fila.Cells(Bancodestino.Index).Value = Me.Bancodestino.Items(Obtener_indexB(Trim(ds.Tables(0).Rows(j)("Banco_Destino"))))
                End If
            Catch ex As Exception

            End Try

            Me.TablaImportar.Item(CtaBD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cuenta_Destino")) = True, "", ds.Tables(0).Rows(j)("Cuenta_Destino"))
            Me.TablaImportar.Item(Fechat.Index, j).Value = ds.Tables(0).Rows(j)("Fecha_Transaccion")

            'Implementar las 10 Transferencias

            Try
                Me.TablaImportar.Item(ImpT2.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Transf1")) = True, 0, ds.Tables(0).Rows(j)("Imp_Transf1"))
                Try
                    If Trim(ds.Tables(0).Rows(j)("Banco_Origen1")) <> "" Then
                        Fila.Cells(BankOT2.Index).Value = Me.BankOT2.Items(Obtener_indexBancoOrigenT2(Trim(ds.Tables(0).Rows(j)("Banco_Origen1"))))
                    End If
                Catch ex As Exception

                End Try
                Me.TablaImportar.Item(CtaOT2.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cuenta_Origen1")) = True, "", ds.Tables(0).Rows(j)("Cuenta_Origen1"))
                Me.TablaImportar.Item(BankDT2.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Banco_Destino1")) = True, "", ds.Tables(0).Rows(j)("Banco_Destino1"))
                Me.TablaImportar.Item(CtaDT2.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cuenta_Destino1")) = True, "", ds.Tables(0).Rows(j)("Cuenta_Destino1"))
                Me.TablaImportar.Item(FT2.Index, j).Value = ds.Tables(0).Rows(j)("Fecha_Transaccion1")
                Me.TablaImportar.Item(CtaT2.Index, j).Value = ds.Tables(0).Rows(j)("Cuenta_Bancos1")
            Catch ex As Exception

            End Try





            Me.TablaImportar.Item(ImpC.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Cheque")) = True, 0, ds.Tables(0).Rows(j)("Imp_Cheque"))


            Try
                If Trim(ds.Tables(0).Rows(j)("Nom_Banco_Ch")) <> "" Then
                    Me.TablaImportar.Item(BancosCheques.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Nom_Banco_Ch")) = True, "", ds.Tables(0).Rows(j)("Nom_Banco_Ch"))
                End If
            Catch ex As Exception

            End Try
            Try
                If Trim(ds.Tables(0).Rows(j)("Banco_Dest_Cheque")) <> "" Then
                    Fila.Cells(BancoDE.Index).Value = Me.BancoDE.Items(Obtener_indexbN(Trim(ds.Tables(0).Rows(j)("Banco_Dest_Cheque"))))
                End If
            Catch ex As Exception

            End Try
            ' Me.TablaImportar.Item(BancosCheques.Index, j).Value = ds.Tables(0).Rows(j)("Nom_Banco_Ch")

            Me.TablaImportar.Item(CuentaC.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cuenta_Origen_Ch")) = True, "", ds.Tables(0).Rows(j)("Cuenta_Origen_Ch"))
            Me.TablaImportar.Item(CtaDestinoChe.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cuenta_Dest_Cheque")) = True, "", ds.Tables(0).Rows(j)("Cuenta_Dest_Cheque"))
            Me.TablaImportar.Item(CtaCheque.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cuenta_Cheques")) = True, "", ds.Tables(0).Rows(j)("Cuenta_Cheques"))

            Me.TablaImportar.Item(NoCheque.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("No_Cheque")) = True, "", ds.Tables(0).Rows(j)("No_Cheque"))
            Me.TablaImportar.Item(FechaC.Index, j).Value = ds.Tables(0).Rows(j)("Fecha_Ch")
            Me.TablaImportar.Item(CuentaBancos.Index, j).Value = ds.Tables(0).Rows(j)("Cuenta_Bancos")
            Me.TablaImportar.Item(ProvA.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Provision_Acreedor")) = True, 0, ds.Tables(0).Rows(j)("Provision_Acreedor"))
            Me.TablaImportar.Item(ProvP.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Provision_Proveedor")) = True, 0, ds.Tables(0).Rows(j)("Provision_Proveedor"))
            Me.TablaImportar.Item(Dif.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Diferencia")) = True, 0, ds.Tables(0).Rows(j)("Diferencia"))

            Try
                If Trim(ds.Tables(0).Rows(j)("Tipo_Poliza")) <> "" Then
                    Fila.Cells(TipoPoliza.Index).Value = Me.TipoPoliza.Items(Obtener_index2(Trim(ds.Tables(0).Rows(j)("Tipo_Poliza"))))
                    ' Me.TablaImportar.Item(tipopoliza.INDEX, j).Value = Me.TipoPoliza.Items(Obtener_index(ds.Tables(0).Rows(j)("Tipo_Poliza")))
                End If

            Catch ex As Exception

            End Try

            Try
                If Trim(ds.Tables(0).Rows(j)("Ser")) <> "" Then
                    Fila.Cells(Ser.Index).Value = Me.Ser.Items(Obtener_indexSer(Trim(ds.Tables(0).Rows(j)("ser"))))

                End If

            Catch ex As Exception

            End Try
            '   Me.TablaImportar.Item(tipopoliza.INDEX, j).Value = ds.Tables(0).Rows(j)("Tipo_Poliza")
            Me.TablaImportar.Item(ImpG.Index, j).Value = ds.Tables(0).Rows(j)("Imp_Grabado")
            Me.TablaImportar.Item(ImpEx.Index, j).Value = ds.Tables(0).Rows(j)("Imp_Exento")
            Me.TablaImportar.Item(IVAR.Index, j).Value = ds.Tables(0).Rows(j)("IVA_real")
            Me.TablaImportar.Item(PagoA.Index, j).Value = ds.Tables(0).Rows(j)("Prc_Pago_Acumulado")
            Me.TablaImportar.Item(TReal.Index, j).Value = ds.Tables(0).Rows(j)("Total_Real")
            Me.TablaImportar.Item(Mone.Index, j).Value = ds.Tables(0).Rows(j)("Moneda")
            Me.TablaImportar.Item(UCambaria.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Utilidad_Cambiaria")) = True, 0, ds.Tables(0).Rows(j)("Utilidad_Cambiaria"))
            Me.TablaImportar.Item(PCambiaria.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Perdida_Cambiaria")) = True, 0, ds.Tables(0).Rows(j)("Perdida_Cambiaria"))
            Me.TablaImportar.Item(ImpD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Devolucion")) = True, 0, ds.Tables(0).Rows(j)("Imp_Devolucion"))
            Me.TablaImportar.Item(CuntaDev.Index, j).Value = ds.Tables(0).Rows(j)("Cuenta_Devolucion")
            Me.TablaImportar.Item(NumPol.Index, j).Value = ds.Tables(0).Rows(j)("numpol")
            Me.TablaImportar.Item(RISR.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Retenido_ISR")) = True, 0, ds.Tables(0).Rows(j)("Retenido_ISR"))
            Me.TablaImportar.Item(RIVA.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Retenido_IVA")) = True, 0, ds.Tables(0).Rows(j)("Retenido_IVA"))
            'Ajutes y Anticipos
            Me.TablaImportar.Item(Anti.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Anticipos")) = True, 0, ds.Tables(0).Rows(j)("Anticipos"))
            Me.TablaImportar.Item(CtaAnti.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cta_Anticipos")) = True, "", ds.Tables(0).Rows(j)("Cta_Anticipos"))
            Me.TablaImportar.Item(Ajus.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Ajuste")) = True, 0, ds.Tables(0).Rows(j)("Ajuste"))
            Me.TablaImportar.Item(CtaAjustes.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cta_Ajuste")) = True, "", ds.Tables(0).Rows(j)("Cta_Ajuste"))
            Me.TablaImportar.Item(ImpProvis.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Provision")) = True, 0, ds.Tables(0).Rows(j)("Imp_Provision"))
            Me.TablaImportar.Item(CtaProv.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cta_Provision")) = True, "", ds.Tables(0).Rows(j)("Cta_Provision"))




            Try
                If Trim(ds.Tables(0).Rows(j)("Cta_Orden")) <> "" Then
                    Fila.Cells(CtaOrden.Index).Value = Me.CtaOrden.Items(Obtener_indexCtaOrden(Trim(IIf(IsDBNull(ds.Tables(0).Rows(j)("Cta_Orden")) = True, "NO", ds.Tables(0).Rows(j)("Cta_Orden")))))
                End If
            Catch ex As Exception

            End Try
            'Series
            Try
                If Trim(ds.Tables(0).Rows(j)("Serie")) <> "" Then

                    Fila.Cells(Ser.Index).Value = Me.Ser.Items(Obtener_Index(Trim(IIf(IsDBNull(ds.Tables(0).Rows(j)("Serie")) = True, "", ds.Tables(0).Rows(j)("Serie"))), Me.Ser))
                End If
            Catch ex As Exception

            End Try
            frm.Barra.Value = j

        Next
        frm.Close()
    End Sub
    Private Sub Buscar_xml(ByVal Id_Empresa As Integer, ByVal periodo As String)
        Dim sql As String = " SELECT "
        sql &= " 	Id_Registro_Xml,	Verificado_Asoc,	Estado_SAT,	Version,	Tipo,	Fecha_Emision,"
        sql &= " 	Fecha_Timbrado,	EstadoPago,	FechaPago,	Serie,	Folio,	UUID,	UUID_Relacion,	RFC_Emisor,"
        sql &= " 	Nombre_Emisor,	LugarDeExpedicion,	RFC_Receptor,	Nombre_Receptor,	ResidenciaFiscal,	NumRegIdTrib,"
        sql &= " 	UsoCFDI,Retenido_IVA + Retenido_ISR  + Total -IVA_16 AS SubTotal,	Descuento,	Total_IEPS,	IVA_16,	Retenido_IVA,	Retenido_ISR,	ISH,	Total,"
        sql &= " 	TotalOriginal,	Total_Trasladados,	Total_Retenidos,	Total_LocalTrasladado,	Total_LocalRetenido,	Complemento,"
        sql &= " 	Moneda,	Tipo_De_Cambio,	Metodos_de_Pago.descripcion   ,	Metodo_de_Pago ,	NumCtaPago,	Condicion_de_Pago,	Conceptos,"
        sql &= " 	Combustible,	IEPS_3,	IEPS_6,	IEPS_7,	IEPS_8,	IEPS_9,	IEPS_26,	IEPS_30,	IEPS_53,	IEPS_160,"
        sql &= " 	Archivo_XML,	Direccion_Emisor,	Localidad_Emisor,	Direccion_Receptor,	Localidad_Receptor,	Autorizada,	Consecutivo_Carga,"
        sql &= " 	Id_Empresa,	Carga_Procesada,	Id_Poliza,Letra_Sat,	Nombre_cuenta,	Xml_Sat.Clave,	Anio_Contable,	Mes_Contable,	Imp_Efectivo,	Cuenta_Efectivo,
	Imp_Transf,	Banco_Origen,	Cuenta_Origen,	Banco_Destino,Cuenta_Destino,	Fecha_Transaccion,	Imp_Cheque,
	Nom_Banco_Ch,	Cuenta_Origen_Ch,   Banco_Dest_Cheque,  Cuenta_Dest_Cheque,  Cuenta_Cheques,	No_Cheque,	Fecha_Ch,	Cuenta_Bancos,	Provision_Acreedor,	Provision_Proveedor,
	Diferencia,	Tipo_Poliza,	Imp_Grabado,	Imp_Exento,	IVA_real,	Prc_Pago_Acumulado,	Total_Real,	Utilidad_Cambiaria,
	Perdida_Cambiaria,	Imp_Devolucion,	Cuenta_Devolucion 	,Numpol,	RIRS,	RIVA,Ajuste , Anticipos, Cta_Ajuste, Cta_Anticipos,Imp_Provision ,Cta_Orden,
    Imp_Transf1,        Banco_Origen1,	 Cuenta_Origen1,	 Banco_Destino1, Cuenta_Destino1 	,	 Fecha_Transaccion1,	 Cuenta_Bancos1 
    ,Imp_Transf2	 ,Banco_Origen2,	 Cuenta_Origen2	, Banco_Destino2	 , Cuenta_Destino2	, Fecha_Transaccion2,Cuenta_Bancos2	 
    ,Imp_Transf3	 ,Banco_Origen3,	 Cuenta_Origen3,	 Banco_Destino3,Cuenta_Destino3	,	 Fecha_Transaccion3,	 Cuenta_Bancos3	 
    ,Imp_Transf4	 ,Banco_Origen4,	 Cuenta_Origen4	, Banco_Destino4	 , Cuenta_Destino4	,Fecha_Transaccion4, Cuenta_Bancos4 
    ,Imp_Transf5 ,Banco_Origen5,	 Cuenta_Origen5,	 Banco_Destino5,Cuenta_Destino5	,	 Fecha_Transaccion5,	 Cuenta_Bancos5	 
    ,Imp_Transf6	 ,Banco_Origen6,	 Cuenta_Origen6,	 Banco_Destino6,Cuenta_Destino7	,	 Fecha_Transaccion6, Cuenta_Bancos6	 
    ,Imp_Transf7	 ,Banco_Origen7,	 Cuenta_Origen7,	 Banco_Destino7,Cuenta_Destino7	,	 Fecha_Transaccion7,	 Cuenta_Bancos7,	 
    Imp_Transf8	 ,Banco_Origen8,	 Cuenta_Origen8,	 Banco_Destino8,Cuenta_Destino8	, Fecha_Transaccion8,	 Cuenta_Bancos8	 
    ,Imp_Transf9	 ,Banco_Origen9,	 Cuenta_Origen9,	 Banco_Destino9,Cuenta_Destino9	,	 Fecha_Transaccion9,	 Cuenta_Bancos9,
    Imp_Transf10,	 Banco_Origen10,	 Cuenta_Origen10, Banco_Destino10,Cuenta_Destino10	, Fecha_Transaccion10,	 Cuenta_Bancos10,Cta_Provision,ser

"
        sql &= " FROM dbo.Xml_Sat inner join Metodos_de_Pago on Metodos_de_Pago.clave = Xml_Sat.FormaDePago   where  tipo = 'Factura' and emitidas= " & Eventos.Bool2(True) & " and Id_Empresa =" & Id_Empresa & " and Id_Poliza IS NULL AND  (Carga_Procesada =0	OR Carga_Procesada IS NULL) " & periodo & " "
        Dim ds As DataSet = Eventos.Obtener_DS(sql)
        If ds.Tables(0).Rows.Count > 0 Then
            Me.TablaImportar.RowCount = 1
            Me.Barra.Maximum = Me.TablaImportar.RowCount - 1
            Me.Barra.Minimum = 0
            Me.Barra.Value1 = 0
            Dim contab As DataSet = Eventos.Obtener_DS(" Select 'I' as Clave union select 'IPC' AS Clave  ")
            If contab.Tables(0).Rows.Count > 0 Then
                If Me.ContabilizacionC.Items.Count = 0 Then
                    For i As Integer = 0 To contab.Tables(0).Rows.Count - 1
                        Me.ContabilizacionC.Items.Add(Trim(contab.Tables(0).Rows(i)("Clave")))
                    Next
                Else
                    Me.ContabilizacionC.Items.Clear()
                    For i As Integer = 0 To contab.Tables(0).Rows.Count - 1
                        Me.ContabilizacionC.Items.Add(Trim(contab.Tables(0).Rows(i)("clave")))
                    Next
                End If
            End If
            Dim Tipo As DataSet = Eventos.Obtener_DS(" Select convert(NVARCHAR,Clave,103)  +' - ' + Nombre as Clave  from Tipos_Poliza_Sat INNER JOIN Tipo_Poliza ON Tipo_Poliza.Id_Tipo_poliza = Tipos_Poliza_Sat.Id_Tipo_poliza  where Id_Empresa= " & Me.lstCliente.SelectItem & "       ")
            If Tipo.Tables(0).Rows.Count > 0 Then
                If Me.TipoPoliza.Items.Count = 0 Then
                    For i As Integer = 0 To Tipo.Tables(0).Rows.Count - 1
                        Me.TipoPoliza.Items.Add(Trim(Tipo.Tables(0).Rows(i)("Clave")))
                    Next
                Else
                    Me.TipoPoliza.Items.Clear()
                    For i As Integer = 0 To Tipo.Tables(0).Rows.Count - 1
                        Me.TipoPoliza.Items.Add(Trim(Tipo.Tables(0).Rows(i)("Clave")))
                    Next
                End If
            End If
            Dim Series As DataSet = Eventos.Obtener_DS(" SELECT Serie FROM dbo.Series WHERE Id_Empresa = " & Me.lstCliente.SelectItem & " ")
            If Series.Tables(0).Rows.Count > 0 Then
                If Me.Ser.Items.Count = 0 Then
                    For i As Integer = 0 To Series.Tables(0).Rows.Count - 1
                        Me.Ser.Items.Add(Trim(Series.Tables(0).Rows(i)("Serie")))
                    Next
                Else
                    Me.Ser.Items.Clear()
                    For i As Integer = 0 To Series.Tables(0).Rows.Count - 1
                        Me.Ser.Items.Add(Trim(Series.Tables(0).Rows(i)("Serie")))
                    Next
                End If
            End If

            Dim Ctaor As DataSet = Eventos.Obtener_DS(" Select 'SI' as Clave  UNION sELECT 'NO' as Clave")
            If Ctaor.Tables(0).Rows.Count > 0 Then
                If Me.CtaOrden.Items.Count = 0 Then
                    For i As Integer = 0 To Ctaor.Tables(0).Rows.Count - 1
                        Me.CtaOrden.Items.Add(Trim(Ctaor.Tables(0).Rows(i)("Clave")))
                    Next
                Else
                    Me.CtaOrden.Items.Clear()
                    For i As Integer = 0 To Ctaor.Tables(0).Rows.Count - 1
                        Me.CtaOrden.Items.Add(Trim(Ctaor.Tables(0).Rows(i)("Clave")))
                    Next
                End If
            End If


            Cargar_bancos("Transf")
            Cargar_bancos("Cheq")
            Me.TablaImportar.RowCount = ds.Tables(0).Rows.Count

            Dato = ds
        Else
            Try
                If Dato.Tables(0).Rows.Count > 0 Then
                    Dato.Clear()
                    Me.TablaImportar.Rows.Clear()
                End If
            Catch ex As Exception

            End Try

            RadMessageBox.SetThemeName("MaterialBlueGrey")
            RadMessageBox.Show("No hay registros para procesar", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
        End If
    End Sub
    Private Sub Buscar_xml_Complemento(ByVal Id_Empresa As Integer, ByVal periodo As String)
        Dim sql As String = "SELECT Id_Xml_Complemento, Verificado_Asoc, Estado_SAT, Version, Tipo, Fecha_Emision, "
        sql &= " Serie, Folio, UUID, RFC_Emisor, Nombre_Emisor, RFC_Receptor, Nombre_Receptor, UsoCFDI, "
        sql &= " FechaPago, Metodos_de_Pago.Descripcion, Moneda, Monto, UUIDRel, "
        sql &= "  Num_Operacion, Cuenta_Destino, Cuenta_Origen, RfcEmisorCtaDestino, RfcEmisorCtaOrigen, "
        sql &= "  NomBancoOrdExtranjero, TipoCadPago, CadPago, Conceptos, Archivo_XML, Total, Consecutivo_Carga, "
        sql &= "  Id_Empresa, Carga_Procesada, Id_Poliza ,Letra_Sat,	Nombre_cuenta,	Xml_Complemento.Clave,	Anio_Contable,	Mes_Contable,	Imp_Efectivo,	Cuenta_Efectivo,
	              Imp_Transf,	Banco_Origen,	Cuenta_Origen,	Banco_Destino,	Fecha_Transaccion,	Imp_Cheque,
	              Nom_Banco_Ch,	Cuenta_Origen_Ch,	No_Cheque,	Fecha_Ch,	Cuenta_Bancos,	Provision_Acreedor,	Provision_Proveedor,
	              Diferencia,	Tipo_Poliza,	Imp_Grabado,	Imp_Exento,	IVA_real,	Prc_Pago_Acumulado,	Total_Real,	Utilidad_Cambiaria,
	              Perdida_Cambiaria,	Imp_Devolucion,	Cuenta_Devolucion ,Numpol,	RIRS,	RIVA"
        sql &= " FROM   Xml_Complemento INNER JOIN Metodos_de_Pago ON Metodos_de_Pago.clave = Xml_Complemento.FormaDePago where Emitidas= " & Eventos.Bool2(True) & " and Id_Empresa =" & Id_Empresa & " and Id_Poliza IS NULL AND  (Carga_Procesada =0	OR Carga_Procesada IS NULL)  " & periodo & ""
        Dim ds As DataSet = Eventos.Obtener_DS(sql)
        If ds.Tables(0).Rows.Count > 0 Then
            Dim a As Integer = Me.TablaImportar.RowCount - 1
            Me.TablaImportar.RowCount = Me.TablaImportar.Rows.Count + ds.Tables(0).Rows.Count

            Me.Barra.Maximum = ds.Tables(0).Rows.Count - 1
            Me.Barra.Minimum = 0
            Me.Barra.Value1 = 0
            For j As Integer = 0 To ds.Tables(0).Rows.Count - 1
                Dim Fila As DataGridViewRow = Me.TablaImportar.Rows(j)
                Me.TablaImportar.Item(0, j).Value = False
                Me.TablaImportar.Item(Id_Xml.Index, j).Value = ds.Tables(0).Rows(j)("Id_Xml_Complemento")
                Me.TablaImportar.Item(Tip.Index, j).Value = ds.Tables(0).Rows(j)("Tipo")
                Me.TablaImportar.Item(Fecha_Emi.Index, j).Value = ds.Tables(0).Rows(j)("Fecha_Emision")
                Me.TablaImportar.Item(UUI.Index, j).Value = ds.Tables(0).Rows(j)("UUID")
                Me.TablaImportar.Item(UCFDI.Index, j).Value = ds.Tables(0).Rows(j)("UsoCFDI")
                Me.TablaImportar.Item(RFCE.Index, j).Value = ds.Tables(0).Rows(j)("RFC_Emisor")
                Me.TablaImportar.Item(NomEmisor.Index, j).Value = ds.Tables(0).Rows(j)("Nombre_Emisor")
                Me.TablaImportar.Item(Conc.Index, j).Value = ds.Tables(0).Rows(j)("Conceptos")
                Me.TablaImportar.Item(MPago.Index, j).Value = ds.Tables(0).Rows(j)("Descripcion")


                Me.TablaImportar.Item(Tot.Index, j).Value = ds.Tables(0).Rows(j)("Monto")



                Me.TablaImportar.Item(LetraS.Index, j).Value = ds.Tables(0).Rows(j)("Letra_Sat")
                Me.TablaImportar.Item(NCuenta.Index, j).Value = ds.Tables(0).Rows(j)("Nombre_cuenta")
                Try
                    If Trim(ds.Tables(0).Rows(j)("Clave")) <> "" Then
                        Fila.Cells(ContabilizacionC.Index).Value = Me.ContabilizacionC.Items(Obtener_index(Trim(ds.Tables(0).Rows(j)("Clave"))))
                        '     Me.TablaImportar.Item(ContabilizacionC.INDEX, j).Value = Me.ContabilizacionC.Items(Obtener_index(ds.Tables(0).Rows(j)("Clave")))
                    End If

                Catch ex As Exception

                End Try
                ' cargar bancos

                Me.TablaImportar.Item(anio.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Anio_Contable")) = True, Now.Year, ds.Tables(0).Rows(j)("Anio_Contable"))
                Me.TablaImportar.Item(Mes.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Mes_Contable")) = True, Now.Month, ds.Tables(0).Rows(j)("Mes_Contable"))
                Me.TablaImportar.Item(ImpEf.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Efectivo")) = True, 0, ds.Tables(0).Rows(j)("Imp_Efectivo"))
                Me.TablaImportar.Item(CuentasEfectivo.Index, j).Value = ds.Tables(0).Rows(j)("Cuenta_Efectivo")
                Me.TablaImportar.Item(ImpT.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Transf")) = True, 0, ds.Tables(0).Rows(j)("Imp_Transf"))
                Me.TablaImportar.Item(BancoOrigen.Index, j).Value = ds.Tables(0).Rows(j)("Banco_Origen")
                Me.TablaImportar.Item(CuentaO.Index, j).Value = ds.Tables(0).Rows(j)("Cuenta_Origen")
                Me.TablaImportar.Item(Bancodestino.Index, j).Value = ds.Tables(0).Rows(j)("Banco_Destino")
                Me.TablaImportar.Item(Fechat.Index, j).Value = ds.Tables(0).Rows(j)("Fecha_Transaccion")
                Me.TablaImportar.Item(ImpC.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Cheque")) = True, 0, ds.Tables(0).Rows(j)("Imp_Cheque"))
                Me.TablaImportar.Item(BancosCheques.Index, j).Value = ds.Tables(0).Rows(j)("Nom_Banco_Ch")
                Me.TablaImportar.Item(CuentaC.Index, j).Value = ds.Tables(0).Rows(j)("Cuenta_Origen_Ch")
                Me.TablaImportar.Item(NoCheque.Index, j).Value = ds.Tables(0).Rows(j)("No_Cheque")
                Me.TablaImportar.Item(FechaC.Index, j).Value = ds.Tables(0).Rows(j)("Fecha_Ch")
                Me.TablaImportar.Item(CuentaBancos.Index, j).Value = ds.Tables(0).Rows(j)("Cuenta_Bancos")
                Me.TablaImportar.Item(ProvA.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Provision_Acreedor")) = True, 0, ds.Tables(0).Rows(j)("Provision_Acreedor"))
                Me.TablaImportar.Item(ProvP.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Provision_Proveedor")) = True, 0, ds.Tables(0).Rows(j)("Provision_Proveedor"))
                Me.TablaImportar.Item(Dif.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Diferencia")) = True, 0, ds.Tables(0).Rows(j)("Diferencia"))

                Try
                    If Trim(ds.Tables(0).Rows(j)("Tipo_Poliza")) <> "" Then
                        Fila.Cells(TipoPoliza.Index).Value = Me.TipoPoliza.Items(Obtener_index2(Trim(ds.Tables(0).Rows(j)("Tipo_Poliza"))))
                        ' Me.TablaImportar.Item(tipopoliza.INDEX, j).Value = Me.TipoPoliza.Items(Obtener_index(ds.Tables(0).Rows(j)("Tipo_Poliza")))
                    End If

                Catch ex As Exception

                End Try
                '   Me.TablaImportar.Item(tipopoliza.INDEX, j).Value = ds.Tables(0).Rows(j)("Tipo_Poliza")
                Me.TablaImportar.Item(ImpG.Index, j).Value = ds.Tables(0).Rows(j)("Imp_Grabado")
                Me.TablaImportar.Item(ImpEx.Index, j).Value = ds.Tables(0).Rows(j)("Imp_Exento")
                Me.TablaImportar.Item(IVAR.Index, j).Value = ds.Tables(0).Rows(j)("IVA_real")
                Me.TablaImportar.Item(PagoA.Index, j).Value = ds.Tables(0).Rows(j)("Prc_Pago_Acumulado")
                Me.TablaImportar.Item(TReal.Index, j).Value = ds.Tables(0).Rows(j)("Total_Real")
                Me.TablaImportar.Item(Mone.Index, j).Value = ds.Tables(0).Rows(j)("Moneda")
                Me.TablaImportar.Item(UCambaria.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Utilidad_Cambiaria")) = True, 0, ds.Tables(0).Rows(j)("Utilidad_Cambiaria"))
                Me.TablaImportar.Item(PCambiaria.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Perdida_Cambiaria")) = True, 0, ds.Tables(0).Rows(j)("Perdida_Cambiaria"))
                Me.TablaImportar.Item(ImpD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Devolucion")) = True, 0, ds.Tables(0).Rows(j)("Imp_Devolucion"))
                Me.TablaImportar.Item(CuntaDev.Index, j).Value = ds.Tables(0).Rows(j)("Cuenta_Devolucion")

                Me.TablaImportar.Item(NumPol.Index, j).Value = ds.Tables(0).Rows(j)("numpol")
                Me.TablaImportar.Item(ImpD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("RIRS")) = True, 0, ds.Tables(0).Rows(j)("RIRS"))
                Me.TablaImportar.Item(ImpD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("RIVA")) = True, 0, ds.Tables(0).Rows(j)("RIVA"))

                If Me.Barra.Value1 = Me.Barra.Maximum Then
                    Me.Barra.Minimum = 0
                    Me.Cursor = Cursors.Arrow
                    RadMessageBox.SetThemeName("MaterialBlueGrey")
                    RadMessageBox.Show("Pagos Cargados ...", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
                    Me.Barra.Value1 = 0
                Else
                    Me.Barra.Value1 += 1
                End If
            Next
        Else
            RadMessageBox.SetThemeName("MaterialBlueGrey")
            RadMessageBox.Show("No hay registros de pagos para procesar", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
        End If
    End Sub

    Private Sub Liberar_Proceso(ByVal i As Integer)
        Dim contador As Integer = 0
        Dim cantidad As Decimal = IIf(Me.TablaImportar.Item(ImpProvis.Index, i).Value.ToString = "", 0, Me.TablaImportar.Item(ImpProvis.Index, i).Value)
        cantidad = cantidad + Me.TablaImportar.Item(UCambaria.Index, i).Value
        cantidad = cantidad - Me.TablaImportar.Item(PCambiaria.Index, i).Value
        'Calcula la diferencia en el registro

        Dim Retencion As Decimal = 0
        Retencion = Me.TablaImportar.Item(RISR.Index, i).Value + Me.TablaImportar.Item(RIVA.Index, i).Value
        Me.TablaImportar.Item(Dif.Index, i).Value = Math.Round(Calcula_diferencia(Me.TablaImportar.Item(TReal.Index, i).Value - Retencion, Me.TablaImportar.Item(ImpEf.Index, i).Value, Me.TablaImportar.Item(ImpC.Index, i).Value, (Me.TablaImportar.Item(ImpT.Index, i).Value + Me.TablaImportar.Item(ImpT2.Index, i).Value), Me.TablaImportar.Item(Ajus.Index, i).Value, Me.TablaImportar.Item(Anti.Index, i).Value, cantidad), 2)
        If Me.TablaImportar.Item(Dif.Index, i).Value <> 0 Then
            Me.TablaImportar.Item(Dif.Index, i).Style.BackColor = Color.Red
        Else
            Me.TablaImportar.Item(Dif.Index, i).Style.BackColor = Color.Green
        End If

        If Trim(UCase(Me.lblce.Text)) = "TRUE" Then ' Bloquera filas de Contabilidad electronica
            ' If Me.TablaImportar.Item(Dif.Index, i).Value > 0 Or Me.TablaImportar.Item(Ser.Index, i).Value = Nothing Or Me.TablaImportar.Item(TipoPoliza.Index, i).Value = Nothing Or IIf(IsDBNull(Me.TablaImportar.Item(NCuenta.Index, i).Value) = True, "", Me.TablaImportar.Item(NCuenta.Index, i).Value) = "" Or IIf(IsDBNull(Me.TablaImportar.Item(NumPol.Index, i).Value) = True, "", Me.TablaImportar.Item(NumPol.Index, i).Value) = "" Then
            If Me.TablaImportar.Item(Dif.Index, i).Value > 0 Or Me.TablaImportar.Item(Ser.Index, i).Value = Nothing Or Me.TablaImportar.Item(TipoPoliza.Index, i).Value = Nothing Or IIf(IsDBNull(Me.TablaImportar.Item(NumPol.Index, i).Value) = True, "", Me.TablaImportar.Item(NumPol.Index, i).Value.ToString) = "" Then
                Me.TablaImportar.Item(Aplic.Index, i).Value = False
            Else
                Try

                    If Me.TablaImportar.Item(ImpT.Index, i).Value > 0 And Me.TablaImportar.Item(ImpC.Index, i).Value = 0 Then ' Bloqueo transferencia
                        If Me.TablaImportar.Item(BancoOrigen.Index, i).Value = Nothing Or Me.TablaImportar.Item(Bancodestino.Index, i).Value = Nothing Or Me.TablaImportar.Item(CuentaO.Index, i).Value = Nothing Or Me.TablaImportar.Item(CtaBD.Index, i).Value = Nothing Or Me.TablaImportar.Item(Fechat.Index, i).Value = Nothing Then
                            Me.TablaImportar.Item(Aplic.Index, i).Value = False
                        Else
                            Me.TablaImportar.Item(Aplic.Index, i).Value = True
                        End If
                        ' transferencias1
                        If Me.TablaImportar.Item(ImpT2.Index, i).Value > 0 Then

                            If Me.TablaImportar.Item(BankOT2.Index, i).Value = Nothing Or Me.TablaImportar.Item(CtaOT2.Index, i).Value = Nothing Or Me.TablaImportar.Item(BankDT2.Index, i).Value = Nothing Or Me.TablaImportar.Item(CtaDT2.Index, i).Value = Nothing Or Me.TablaImportar.Item(FT2.Index, i).Value = Nothing Or Me.TablaImportar.Item(CtaT2.Index, i).Value = Nothing Then
                                Me.TablaImportar.Item(Aplic.Index, i).Value = False
                            Else
                                Me.TablaImportar.Item(Aplic.Index, i).Value = True
                            End If
                        End If



                    ElseIf Me.TablaImportar.Item(ImpC.Index, i).Value > 0 And Me.TablaImportar.Item(ImpT.Index, i).Value = 0 Then ' Bloqueo cheques
                        If Me.TablaImportar.Item(BancosCheques.Index, i).Value = Nothing Or Me.TablaImportar.Item(CuentaC.Index, i).Value = Nothing Or Me.TablaImportar.Item(NoCheque.Index, i).Value = Nothing Or Me.TablaImportar.Item(FechaC.Index, i).Value = Nothing Then
                            Me.TablaImportar.Item(Aplic.Index, i).Value = False
                        Else
                            Me.TablaImportar.Item(Aplic.Index, i).Value = True
                        End If
                    ElseIf Me.TablaImportar.Item(ImpC.Index, i).Value > 0 And Me.TablaImportar.Item(ImpT.Index, i).Value > 0 Then ' AMbos
                        If Me.TablaImportar.Item(BancoOrigen.Index, i).Value = Nothing Or Me.TablaImportar.Item(Bancodestino.Index, i).Value = Nothing Or Me.TablaImportar.Item(CuentaO.Index, i).Value = Nothing Or Me.TablaImportar.Item(CtaBD.Index, i).Value = Nothing Or Me.TablaImportar.Item(Fechat.Index, i).Value = Nothing Then
                            Me.TablaImportar.Item(Aplic.Index, i).Value = False
                        Else
                            Me.TablaImportar.Item(Aplic.Index, i).Value = True
                        End If
                        ' transferencias1
                        If Me.TablaImportar.Item(ImpT2.Index, i).Value > 0 Then

                            If Me.TablaImportar.Item(BankOT2.Index, i).Value = Nothing Or Me.TablaImportar.Item(CtaOT2.Index, i).Value = Nothing Or Me.TablaImportar.Item(BankDT2.Index, i).Value = Nothing Or Me.TablaImportar.Item(CtaDT2.Index, i).Value = Nothing Or Me.TablaImportar.Item(FT2.Index, i).Value = Nothing Or Me.TablaImportar.Item(CtaT2.Index, i).Value = Nothing Then
                                Me.TablaImportar.Item(Aplic.Index, i).Value = False
                            Else
                                Me.TablaImportar.Item(Aplic.Index, i).Value = True
                            End If
                        End If

                        If Me.TablaImportar.Item(BancosCheques.Index, i).Value = Nothing Or Me.TablaImportar.Item(CuentaC.Index, i).Value = Nothing Or Me.TablaImportar.Item(NoCheque.Index, i).Value = Nothing Or Me.TablaImportar.Item(FechaC.Index, i).Value = Nothing Then
                            Me.TablaImportar.Item(Aplic.Index, i).Value = False
                        Else
                            Me.TablaImportar.Item(Aplic.Index, i).Value = True
                        End If
                    Else
                        Me.TablaImportar.Item(Aplic.Index, i).Value = True
                    End If
                    If Me.TablaImportar.Item(Ajus.Index, i).Value <> 0 Then ' Bloqueo Ajuste
                        If IIf(IsDBNull(Me.TablaImportar.Item(CtaAjustes.Index, i).Value) = True, "", Me.TablaImportar.Item(CtaAjustes.Index, i).Value) = "" Then
                            Me.TablaImportar.Item(Aplic.Index, i).Value = False
                        Else
                            Me.TablaImportar.Item(Aplic.Index, i).Value = True
                        End If
                    End If

                    If Me.TablaImportar.Item(Anti.Index, i).Value <> 0 Then ' Bloqueo Anticipo
                        If IIf(IsDBNull(Me.TablaImportar.Item(CtaAnti.Index, i).Value) = True, "", Me.TablaImportar.Item(CtaAnti.Index, i).Value) = "" Then
                            Me.TablaImportar.Item(Aplic.Index, i).Value = False
                        Else
                            Me.TablaImportar.Item(Aplic.Index, i).Value = True
                        End If
                    End If
                Catch ex As Exception
                    Me.TablaImportar.Item(Aplic.Index, i).Value = False
                End Try

            End If
        Else
            'sin contabilidad electronica
            If Me.TablaImportar.Item(Dif.Index, i).Value > 0 Or Me.TablaImportar.Item(Ser.Index, i).Value = Nothing Or Me.TablaImportar.Item(TipoPoliza.Index, i).Value = Nothing Or IIf(IsDBNull(Me.TablaImportar.Item(NumPol.Index, i).Value) = True, "", Me.TablaImportar.Item(NumPol.Index, i).Value.ToString()) = "" Then
                Me.TablaImportar.Item(Aplic.Index, i).Value = False
            Else
                Me.TablaImportar.Item(Aplic.Index, i).Value = True
            End If
            Try
                If Me.TablaImportar.Item(Ajus.Index, i).Value <> 0 Then ' Bloqueo Ajuste
                    If IIf(IsDBNull(Me.TablaImportar.Item(CtaAjustes.Index, i).Value) = True, "", Me.TablaImportar.Item(CtaAjustes.Index, i).Value) = "" Then
                        Me.TablaImportar.Item(Aplic.Index, i).Value = False
                    Else
                        Me.TablaImportar.Item(Aplic.Index, i).Value = True
                    End If
                End If

                If Me.TablaImportar.Item(Anti.Index, i).Value <> 0 Then ' Bloqueo Anticipo
                    If IIf(IsDBNull(Me.TablaImportar.Item(CtaAnti.Index, i).Value) = True, "", Me.TablaImportar.Item(CtaAnti.Index, i).Value) = "" Then
                        Me.TablaImportar.Item(Aplic.Index, i).Value = False
                    Else
                        Me.TablaImportar.Item(Aplic.Index, i).Value = True
                    End If
                End If
            Catch ex As Exception

            End Try

        End If

        For s As Integer = 0 To Me.TablaImportar.Rows.Count - 1
            If Me.TablaImportar.Item(0, s).Value = True Then
                contador = contador + 1
            End If
        Next
        If contador > 0 Then
            Me.Cmd_Procesar.Enabled = True
        End If
    End Sub

    Private Function Calcula_diferencia(ByVal total As Decimal, ByVal monto_Efectivo As Decimal, ByVal monto_cheque As Decimal, ByVal monto_Transferencia As Decimal, ByVal ajuste As Decimal, ByVal Anticipo As Decimal, ByVal Provision As Decimal
                                   )
        Dim Diferencia As Decimal = 0
        Diferencia = total - (monto_Efectivo + monto_cheque + monto_Transferencia + ajuste + Anticipo + Provision)
        Return Diferencia
    End Function
    Private Sub ChkIvisible_CheckedChanged(sender As Object, e As EventArgs) Handles ChkIvisible.CheckedChanged
        For Each Columna As DataGridViewColumn In TablaImportar.Columns
            If Columna.Selected = True Then
                Columna.Visible = False
            End If
        Next
    End Sub
    Private Function Verifica_catalogo_cliente(ByVal cliente As Integer) ' se verifica el Catalogo de cuentas

        Dim hacer As Boolean
        Dim sql As String = " Select * From catalogo_de_cuentas where Id_Empresa = " & cliente & ""
        Dim ds As DataSet = Eventos.Obtener_DS(sql)
        If ds.Tables(0).Rows.Count > 0 Then
            hacer = True
        Else
            hacer = False
        End If
        Return hacer
    End Function

    Private Sub TablaImportar_CellMouseDoubleClick(sender As Object, e As DataGridViewCellMouseEventArgs) Handles TablaImportar.CellMouseDoubleClick
        'Condicionar el tipo de poliza a los valores de la tabla
        'Control_de_Polizas.Id_Empresa = Me.lstCliente.SelectItem
        'Control_de_Polizas.concepto = Me.TablaImportar.Item(7, Me.TablaImportar.CurrentRow.Index).Value
        'Control_de_Polizas.id_tipo = Me.TablaImportar.Item(bancoorigen.INDEX, Me.TablaImportar.CurrentRow.Index).Value
        'Control_de_Polizas.Nuevo = True
        'Eventos.abrir_form(Control_de_Polizas)
    End Sub
    Private Function Obtener_index(ByVal valor As String)

        Dim Indice As Integer = -1
        For i As Integer = 0 To Me.ContabilizacionC.Items.Count - 1
            If valor = Trim(Me.ContabilizacionC.Items(i)) Then
                Indice = i
                Exit For
            End If
        Next
        Return Indice

    End Function
    Private Function Obtener_ID(ByVal valor As String, ByVal Col As DataGridViewComboBoxColumn)
        Dim Indice As Integer = -1
        For i As Integer = 0 To Col.Items.Count - 1
            If valor = Trim(Col.Items(i)) Then
                Indice = i
                Exit For
            End If
        Next
        Return Indice
    End Function
    Private Function Obtener_index2(ByVal valor As String)

        Dim Indice As Integer = -1
        For i As Integer = 0 To Me.TipoPoliza.Items.Count - 1
            If valor = Trim(Me.TipoPoliza.Items(i)) Then
                Indice = i
                Exit For
            End If
        Next
        Return Indice

    End Function
    Private Function Obtener_indexSer(ByVal valor As String)

        Dim Indice As Integer = -1
        For i As Integer = 0 To Me.Ser.Items.Count - 1
            If valor = Trim(Me.Ser.Items(i)) Then
                Indice = i
                Exit For
            End If
        Next
        Return Indice

    End Function
    Private Function Obtener_indexSerD(ByVal valor As String)

        Dim Indice As Integer = -1
        For i As Integer = 0 To Me.SerD.Items.Count - 1
            If valor = Trim(Me.SerD.Items(i)) Then
                Indice = i
                Exit For
            End If
        Next
        Return Indice

    End Function
    Private Function Obtener_indexSerC(ByVal valor As String)

        Dim Indice As Integer = -1
        For i As Integer = 0 To Me.SerC.Items.Count - 1
            If valor = Trim(Me.SerC.Items(i)) Then
                Indice = i
                Exit For
            End If
        Next
        Return Indice

    End Function
    Private Function Obtener_indexB(ByVal valor As String)

        Dim Indice As Integer = -1
        For i As Integer = 0 To Me.Bancodestino.Items.Count - 1
            If valor = Trim(Me.Bancodestino.Items(i)) Then
                Indice = i
                Exit For
            End If
        Next
        Return Indice

    End Function
    Private Function Obtener_indexBancoOrigenT2(ByVal valor As String)

        Dim Indice As Integer = -1
        For i As Integer = 0 To Me.BankOT2.Items.Count - 1
            If valor = Trim(Me.BankOT2.Items(i)) Then
                Indice = i
                Exit For
            End If
        Next
        Return Indice

    End Function
    Private Function Obtener_indexBT(ByVal valor As String)

        Dim Indice As Integer = 1000
        For i As Integer = 0 To Me.Bancodestino.Items.Count - 1

            Dim largo As Integer = Len(Trim(Me.Bancodestino.Items(i)))
            Dim posicion As Integer = InStr(1, Trim(Me.Bancodestino.Items(i)), "-", CompareMethod.Binary)
            Dim Al As String = Trim(Me.Bancodestino.Items(i)).Substring(posicion, largo - posicion)

            If Al = valor Then
                Indice = i
                Exit For
            End If
        Next
        Return Indice

    End Function
    Private Function Obtener_indexbN(ByVal valor As String)

        Dim Indice As Integer = -1
        For i As Integer = 0 To Me.BancoDE.Items.Count - 1
            If valor = Trim(Me.BancoDE.Items(i)) Then
                Indice = i
                Exit For
            End If
        Next
        Return Indice

    End Function
    Private Function Obtener_indexCtaOrden(ByVal valor As String)

        Dim Indice As Integer = -1
        For i As Integer = 0 To Me.CtaOrden.Items.Count - 1
            If valor = Trim(Me.CtaOrden.Items(i)) Then
                Indice = i
                Exit For
            End If
        Next
        Return Indice

    End Function

    Private Function Obtener_Index(ByVal valor As String, ByVal Col As DataGridViewComboBoxColumn)
        Dim Indice As Integer = -1
        For i As Integer = 0 To Col.Items.Count - 1
            If valor = Trim(Col.Items(i)) Then
                Indice = i
                Exit For
            End If
        Next
        Return Indice
    End Function

    Private Function Obtener_indexCtaOrdenC(ByVal valor As String)

        Dim Indice As Integer = -1
        For i As Integer = 0 To Me.CtaOrdenC.Items.Count - 1
            If valor = Trim(Me.CtaOrdenC.Items(i)) Then
                Indice = i
                Exit For
            End If
        Next
        Return Indice

    End Function
    Private Sub CmdActulizar_Click(sender As Object, e As EventArgs)
        Dim contab As DataSet = Eventos.Obtener_DS(" Select Clave from Letras_Contabilidad ")
        If contab.Tables(0).Rows.Count > 0 Then
            If Me.ContabilizacionC.Items.Count = 0 Then

                For i As Integer = 0 To contab.Tables(0).Rows.Count - 1
                    Me.ContabilizacionC.Items.Add(Trim(contab.Tables(0).Rows(i)("Clave")))
                Next
            Else
                Try
                    Me.ContabilizacionC.Items.Clear()
                Catch ex As Exception

                End Try

                For i As Integer = 0 To contab.Tables(0).Rows.Count - 1
                    Me.ContabilizacionC.Items.Add(Trim(contab.Tables(0).Rows(i)("Clave")))
                Next
            End If
        End If

    End Sub
    Private Sub TablaImportar_CellClick(sender As Object, e As DataGridViewCellEventArgs) Handles TablaImportar.CellClick

        Dim columna As Integer = Me.TablaImportar.CurrentCell.ColumnIndex
        Dim Nombre As String
        Nombre = Me.TablaImportar.Columns.Item(Me.TablaImportar.CurrentCell.ColumnIndex).Name.ToString
        Me.LstTexto.Cargar(" Select '','' ")

        Select Case Nombre
            Case "ContabilizacionC"
                Me.LstTexto.Cargar(" Select 'I' as Clave ,'I' as Cla  union select 'IPC' AS Clave ,'IPC' as Cla  ")
                Me.LstTexto.SelectText = ""
            Case "CuentasEfectivo"
                Me.LstTexto.Cargar(" Select Id_cat_cuentas, rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1010' and Nivel2 > 0 and Nivel3 > 0 ")
                Me.LstTexto.SelectText = ""
            Case "CuentaBancos"
                Me.LstTexto.Cargar(" Select Id_cat_cuentas, rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1020'and Nivel2 > 0 and Nivel3 > 0  ")
                Me.LstTexto.SelectText = ""
            Case "BancoDE"
                Me.LstTexto.Cargar("SELECT rtrim(Bancos.Clave) +'-'+ Bancos_Clientes.Alias AS Alias ,  rtrim(Bancos.Clave) +'-'+ Bancos_Clientes.Alias AS Ali FROM Bancos_Clientes INNER JOIN Bancos ON Bancos_Clientes.Id_Banco =Bancos.Id_Banco  where Id_Empresa = " & Me.lstCliente.SelectItem & " and alias like '%Chec%' ")
                Me.LstTexto.SelectText = ""
            Case "BancoOrigen"
                'Me.LstTexto.cargar(" SELECT DISTINCT Bancos.clave, CONVERT(NVARCHAR, Bancos_RFC.Id_Banco, 103) + '-' + Bancos.Nombre AS Banco   FROM     Bancos INNER JOIN     Bancos_RFC ON Bancos.Id_Banco = Bancos_RFC.Id_Banco WHERE  (Bancos_RFC.Id_Empresa  = " & Me.lstCliente.SelectItem & ")")
                'Me.LstTexto.SelectText = ""

            Case "Bancodestino"
                Me.LstTexto.Cargar("SELECT rtrim(Bancos.Clave) +'-'+ Bancos_Clientes.Alias AS Alias ,  rtrim(Bancos.Clave) +'-'+ Bancos_Clientes.Alias AS Ali  FROM Bancos_Clientes INNER JOIN Bancos ON Bancos_Clientes.Id_Banco =Bancos.Id_Banco  where Id_Empresa = " & Me.lstCliente.SelectItem & " and alias like '%Transf%' ")
                Me.LstTexto.SelectText = ""
            Case "TipoPoliza"
                Me.LstTexto.Cargar("  Select convert(NVARCHAR,Clave,103)  +' - ' + Nombre as Clave, convert(NVARCHAR,Clave,103)  +' - ' + Nombre as Clave  from Tipos_Poliza_Sat INNER JOIN Tipo_Poliza ON Tipo_Poliza.Id_Tipo_poliza = Tipos_Poliza_Sat.Id_Tipo_poliza  where Id_Empresa= " & Me.lstCliente.SelectItem & "     ")
                Me.LstTexto.SelectText = ""
            Case "CtaAjustes"
                Me.LstTexto.Cargar("Select  Id_cat_cuentas,  rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " ")
                Me.LstTexto.SelectText = ""
            Case "CtaAnti"
                'Me.LstTexto.cargar("Select Id_cat_cuentas,  rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1070' and Nivel2 > 0 and Nivel3 > 0 ")
                'Me.LstTexto.SelectText = ""
        End Select
    End Sub
    Private Sub LstTexto_Enters() Handles LstTexto.Enters
        Try

            If Me.TablaImportar.Rows.Count > 0 Then
                For Each Fila As DataGridViewRow In TablaImportar.Rows
                    If Fila.Cells(ContabilizacionC.Index).Selected = True Then

                        Try
                            If Me.LstTexto.SelectText = "" Then
                                Fila.Cells(ContabilizacionC.Index).Value = ""
                            Else
                                If Obtener_index(Me.LstTexto.SelectText) < 0 Then
                                    Fila.Cells(ContabilizacionC.Index).Value = ""
                                Else
                                    Dim s As String = Me.ContabilizacionC.Items(1)
                                    Fila.Cells(ContabilizacionC.Index).Value = Me.ContabilizacionC.Items(Obtener_index(Me.LstTexto.SelectText))
                                End If
                            End If


                        Catch ex As Exception

                        End Try
                    ElseIf Fila.Cells(Bancodestino.Index).Selected = True Then



                        Try
                            If Me.LstTexto.SelectText = "" Then
                                Fila.Cells(Bancodestino.Index).Value = ""

                            Else
                                If Obtener_indexB(Me.LstTexto.SelectText) = 0 Then

                                    Fila.Cells(Bancodestino.Index).Value = Me.Bancodestino.Items(Obtener_indexB(Me.LstTexto.SelectText))

                                Else

                                    Fila.Cells(Bancodestino.Index).Value = Me.Bancodestino.Items(Obtener_indexB(Me.LstTexto.SelectText))
                                End If
                            End If

                        Catch ex As Exception

                        End Try

                    ElseIf Fila.Cells(BancoOrigen.Index).Selected = True Then
                        If Me.LstTexto.SelectText = "" Then
                            Fila.Cells(BancoOrigen.Index).Value = ""
                        End If
                    ElseIf Fila.Cells(TipoPoliza.Index).Selected = True Then
                        Try

                            If Me.LstTexto.SelectText = "" Then
                                Fila.Cells(TipoPoliza.Index).Value = ""
                            Else
                                Try
                                    If Obtener_index2(Me.LstTexto.SelectText) < 0 Then
                                        Fila.Cells(TipoPoliza.Index).Value = ""
                                    Else
                                        Dim s As String = Me.TipoPoliza.Items(1)
                                        Fila.Cells(TipoPoliza.Index).Value = Me.TipoPoliza.Items(Obtener_index2(Me.LstTexto.SelectText))
                                    End If

                                Catch ex As Exception

                                End Try
                            End If

                        Catch ex As Exception

                        End Try

                    Else
                        ' For I As Integer = 0 To Me.TablaImportar.Rows.Count - 1
                        For j As Integer = 0 To Me.TablaImportar.Columns.Count - 1
                            If Me.TablaImportar.Item(j, Fila.Index).Selected = True And (j <> ContabilizacionC.Index And j <> BancoOrigen.Index And j <> TipoPoliza.Index) Then
                                Me.TablaImportar.Item(j, Fila.Index).Value = Me.LstTexto.SelectText
                            ElseIf Me.TablaImportar.Item(j, Fila.Index).Selected = True And (j = ContabilizacionC.Index And j = BancoOrigen.Index And j = TipoPoliza.Index) Then
                                Me.TablaImportar.Item(j, Fila.Index).Value = ""
                            End If
                        Next

                        ' Next
                    End If
                    Liberar_Proceso(Fila.Index)
                Next
            End If
        Catch ex As Exception

        End Try
    End Sub
    Private Sub ToolStripMenuItem1_Click(sender As Object, e As EventArgs) Handles ToolStripMenuItem1.Click
        ' If Me.TablaImportar.Rows.Count > 0 Then
        If Me.TCEmitidas.SelectedIndex = 0 Then
            'Verificar la columna del click secundario
            If Me.TablaImportar.CurrentCell.ColumnIndex = Me.NCuenta.Index Then 'Cuentas del Cargo

                Dim ds As DataSet = Eventos.Obtener_DS("select Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta,Rtrim(Descripcion) as Des from catalogo_de_cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and  clave= '" & Trim(Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value) & "' and nivel3 >0  and rfc= '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "' order by cta")
                Dim actividad(,) As String
                ReDim actividad(2, ds.Tables(0).Rows.Count + 1)

                For i As Integer = 0 To ds.Tables(0).Rows.Count - 1
                    Dim cadena As String = ds.Tables(0).Rows(i)("Cuenta")
                    Dim posi As Integer = InStr(1, cadena, "-", CompareMethod.Binary)
                    Dim cuantos As Integer = Len(cadena) - Len(cadena.Substring(0, posi))
                    Dim consecutivo As String = cadena.Substring(posi, cuantos)
                    Dim Sql As String = " select Rtrim(Descripcion) as Cuenta from catalogo_de_cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and  Nivel1= '" & consecutivo.ToString.Substring(0, 4) & "' and nivel2= '" & consecutivo.ToString.Substring(4, 4) & "'  and nivel3 ='" & consecutivo.ToString.Substring(8, 4) & "'  and nivel4= '0000'"
                    Dim ds2 As DataSet = Eventos.Obtener_DS(Sql)
                    If Trim(ds.Tables(0).Rows(0)("DES")) = Trim(ds2.Tables(0).Rows(0)("Cuenta")) Then
                        actividad(0, i) = ds.Tables(0).Rows(0)("Cuenta")
                    Else
                        actividad(0, i) = ds2.Tables(0).Rows(0)("Cuenta") & " " & ds.Tables(0).Rows(i)(0)
                    End If

                    '  actividad(0, i) = ds2.Tables(0).Rows(0)("Cuenta") & " " & ds.Tables(0).Rows(i)(0)
                    Debug.Print(ds.Tables(0).Rows(i)(0))
                    actividad(1, i) = "0"
                Next
                With My.Forms.DialogUnaSeleccion
                    .limpiar()
                    .Titulo = Eventos.titulo_app
                    .Texto = "Selecciona la Cuenta:"
                    .MinSeleccion = 1
                    .MaxSeleccion = 1
                    .elementos = actividad
                    .ShowDialog()
                    actividad = .elementos
                    If .DialogResult = Windows.Forms.DialogResult.Cancel Then
                        Exit Sub
                    End If
                End With

                Dim descrip As String = ""
                For i As Integer = 0 To actividad.GetLength(1)
                    If actividad(1, i) = "1" Then
                        descrip = actividad(0, i)
                        Exit For
                    End If
                Next
                Me.TablaImportar.Item(NCuenta.Index, Me.TablaImportar.CurrentRow.Index).Value = descrip
            ElseIf Me.TablaImportar.CurrentCell.ColumnIndex = CuentasEfectivo.Index Then 'Cuentas del Efectivo

                Dim ds As DataSet = Eventos.Obtener_DS("Select rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta, cuenta as cta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1010' and Nivel2 > 0 and Nivel3 > 0 order by cta ")
                Dim actividad(,) As String
                ReDim actividad(2, ds.Tables(0).Rows.Count + 1)

                For i As Integer = 0 To ds.Tables(0).Rows.Count - 1

                    actividad(0, i) = ds.Tables(0).Rows(i)(0)
                    Debug.Print(ds.Tables(0).Rows(i)(0))
                    actividad(1, i) = "0"
                Next
                With My.Forms.DialogUnaSeleccion
                    .limpiar()
                    .Titulo = Eventos.titulo_app
                    .Texto = "Selecciona la Cuenta para el Efectivo:"
                    .MinSeleccion = 1
                    .MaxSeleccion = 1
                    .elementos = actividad
                    .ShowDialog()
                    actividad = .elementos
                    If .DialogResult = Windows.Forms.DialogResult.Cancel Then
                        Exit Sub
                    End If
                End With
                Dim descrip As String = ""
                For i As Integer = 0 To actividad.GetLength(1)
                    If actividad(1, i) = "1" Then
                        descrip = actividad(0, i)
                        Exit For
                    End If
                Next
                Me.TablaImportar.Item(CuentasEfectivo.Index, Me.TablaImportar.CurrentRow.Index).Value = descrip
            ElseIf Me.TablaImportar.CurrentCell.ColumnIndex = CtaAnti.Index Then 'Cuentas del Anticipos
                Dim ds As DataSet
                If Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value <> Nothing Then
                    If Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value = "C" Or Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value = "CPP" Then
                        ds = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1200' and Nivel2 > 0   ORDER BY cta")

                    ElseIf Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value = "GG" Or Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value = "GGPP" Then
                        ds = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1210' and Nivel2 > 0   ORDER BY cta")

                    End If
                End If



                '  ds = Eventos.Obtener_DS("Select rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta, cuenta as cta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1070' and Nivel2 > 0 and Nivel3 > 0 order by cta")
                Dim actividad(,) As String
                ReDim actividad(2, ds.Tables(0).Rows.Count + 1)

                For i As Integer = 0 To ds.Tables(0).Rows.Count - 1

                    actividad(0, i) = ds.Tables(0).Rows(i)(0)
                    Debug.Print(ds.Tables(0).Rows(i)(0))
                    actividad(1, i) = "0"
                Next
                With My.Forms.DialogUnaSeleccion
                    .limpiar()
                    .Titulo = Eventos.titulo_app
                    .Texto = "Selecciona la Cuenta para el Anticipos:"
                    .MinSeleccion = 1
                    .MaxSeleccion = 1
                    .elementos = actividad
                    .ShowDialog()
                    actividad = .elementos
                    If .DialogResult = Windows.Forms.DialogResult.Cancel Then
                        Exit Sub
                    End If
                End With
                Dim descrip As String = ""
                For i As Integer = 0 To actividad.GetLength(1)
                    If actividad(1, i) = "1" Then
                        descrip = actividad(0, i)
                        Exit For
                    End If
                Next
                Me.TablaImportar.Item(CtaAnti.Index, Me.TablaImportar.CurrentRow.Index).Value = descrip
            ElseIf Me.TablaImportar.CurrentCell.ColumnIndex = CtaAjustes.Index Then 'Cuentas del Ajuste



                Dim ds As DataSet = Eventos.Obtener_DS("Select rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta, cuenta as cta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " order by cta")
                Dim actividad(,) As String
                ReDim actividad(2, ds.Tables(0).Rows.Count + 1)

                For i As Integer = 0 To ds.Tables(0).Rows.Count - 1

                    actividad(0, i) = ds.Tables(0).Rows(i)(0)
                    Debug.Print(ds.Tables(0).Rows(i)(0))
                    actividad(1, i) = "0"
                Next
                With My.Forms.DialogUnaSeleccion
                    .limpiar()
                    .Titulo = Eventos.titulo_app
                    .Texto = "Selecciona la Cuenta para el Ajuste:"
                    .MinSeleccion = 1
                    .MaxSeleccion = 1
                    .elementos = actividad
                    .ShowDialog()
                    actividad = .elementos
                    If .DialogResult = Windows.Forms.DialogResult.Cancel Then
                        Exit Sub
                    End If
                End With
                Dim descrip As String = ""
                For i As Integer = 0 To actividad.GetLength(1)
                    If actividad(1, i) = "1" Then
                        descrip = actividad(0, i)
                        Exit For
                    End If
                Next
                Me.TablaImportar.Item(CtaAjustes.Index, Me.TablaImportar.CurrentRow.Index).Value = descrip
            End If
        ElseIf Me.TCEmitidas.SelectedIndex = 1 Then
            If Me.TablaD.CurrentCell.ColumnIndex = Me.NomCuentaD.Index Then 'Cuentas del Cargo
                Dim ds As DataSet = Eventos.Obtener_DS("select Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta,Rtrim(Descripcion) as des from catalogo_de_cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and clave= '" & Trim(Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value) & "' and nivel3 >0  and rfc= '" & Me.TablaD.Item(RFCED.Index, Me.TablaD.CurrentRow.Index).Value & "' order by cta")
                Dim actividad(,) As String
                ReDim actividad(2, ds.Tables(0).Rows.Count + 1)

                For i As Integer = 0 To ds.Tables(0).Rows.Count - 1
                    Dim cadena As String = ds.Tables(0).Rows(i)("Cuenta")
                    Dim posi As Integer = InStr(1, cadena, "-", CompareMethod.Binary)
                    Dim cuantos As Integer = Len(cadena) - Len(cadena.Substring(0, posi))
                    Dim consecutivo As String = cadena.Substring(posi, cuantos)
                    Dim Sql As String = " select Rtrim(Descripcion) as Cuenta from catalogo_de_cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and Nivel1= '" & consecutivo.ToString.Substring(0, 4) & "' and nivel2= '" & consecutivo.ToString.Substring(4, 4) & "'  and nivel3 ='" & consecutivo.ToString.Substring(8, 4) & "'  and nivel4= '0000'"
                    Dim ds2 As DataSet = Eventos.Obtener_DS(Sql)

                    If Trim(ds.Tables(0).Rows(0)("DES")) = Trim(ds2.Tables(0).Rows(0)("Cuenta")) Then
                        actividad(0, i) = ds.Tables(0).Rows(0)("Cuenta")
                    Else
                        actividad(0, i) = ds2.Tables(0).Rows(0)("Cuenta") & " " & ds.Tables(0).Rows(i)(0)
                    End If
                    '  actividad(0, i) = ds2.Tables(0).Rows(0)("Cuenta") & " " & ds.Tables(0).Rows(i)(0)
                    Debug.Print(ds.Tables(0).Rows(i)(0))
                    actividad(1, i) = "0"
                Next
                With My.Forms.DialogUnaSeleccion
                    .limpiar()
                    .Titulo = Eventos.titulo_app
                    .Texto = "Selecciona la Cuenta:"
                    .MinSeleccion = 1
                    .MaxSeleccion = 1
                    .elementos = actividad
                    .ShowDialog()
                    actividad = .elementos
                    If .DialogResult = Windows.Forms.DialogResult.Cancel Then
                        Exit Sub
                    End If
                End With

                Dim descrip As String = ""
                For i As Integer = 0 To actividad.GetLength(1)
                    If actividad(1, i) = "1" Then
                        descrip = actividad(0, i)
                        Exit For
                    End If
                Next
                Me.TablaD.Item(NomCuentaD.Index, Me.TablaD.CurrentRow.Index).Value = descrip

            ElseIf Me.TablaD.CurrentCell.ColumnIndex = CtaEfD.Index Then 'Cuentas del Efectivo

                Dim ds As DataSet = Eventos.Obtener_DS("Select rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta, cuenta as cta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1010' and Nivel2 > 0 and Nivel3 > 0 order by cta ")
                Dim actividad(,) As String
                ReDim actividad(2, ds.Tables(0).Rows.Count + 1)

                For i As Integer = 0 To ds.Tables(0).Rows.Count - 1

                    actividad(0, i) = ds.Tables(0).Rows(i)(0)
                    Debug.Print(ds.Tables(0).Rows(i)(0))
                    actividad(1, i) = "0"
                Next
                With My.Forms.DialogUnaSeleccion
                    .limpiar()
                    .Titulo = Eventos.titulo_app
                    .Texto = "Selecciona la Cuenta para el Efectivo:"
                    .MinSeleccion = 1
                    .MaxSeleccion = 1
                    .elementos = actividad
                    .ShowDialog()
                    actividad = .elementos
                    If .DialogResult = Windows.Forms.DialogResult.Cancel Then
                        Exit Sub
                    End If
                End With
                Dim descrip As String = ""
                For i As Integer = 0 To actividad.GetLength(1)
                    If actividad(1, i) = "1" Then
                        descrip = actividad(0, i)
                        Exit For
                    End If
                Next
                Me.TablaD.Item(CtaEfD.Index, Me.TablaD.CurrentRow.Index).Value = descrip

            ElseIf Me.TablaD.CurrentCell.ColumnIndex = CtaAntiD.Index Then 'Cuentas del Anticipos

                Dim ds As DataSet = Eventos.Obtener_DS("Select rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta, cuenta as cta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1070' and Nivel2 > 0 and Nivel3 > 0 order by cta")
                Dim actividad(,) As String
                ReDim actividad(2, ds.Tables(0).Rows.Count + 1)

                For i As Integer = 0 To ds.Tables(0).Rows.Count - 1

                    actividad(0, i) = ds.Tables(0).Rows(i)(0)
                    Debug.Print(ds.Tables(0).Rows(i)(0))
                    actividad(1, i) = "0"
                Next
                With My.Forms.DialogUnaSeleccion
                    .limpiar()
                    .Titulo = Eventos.titulo_app
                    .Texto = "Selecciona la Cuenta para el Anticipos:"
                    .MinSeleccion = 1
                    .MaxSeleccion = 1
                    .elementos = actividad
                    .ShowDialog()
                    actividad = .elementos
                    If .DialogResult = Windows.Forms.DialogResult.Cancel Then
                        Exit Sub
                    End If
                End With
                Dim descrip As String = ""
                For i As Integer = 0 To actividad.GetLength(1)
                    If actividad(1, i) = "1" Then
                        descrip = actividad(0, i)
                        Exit For
                    End If
                Next
                Me.TablaD.Item(CtaAntiD.Index, Me.TablaD.CurrentRow.Index).Value = descrip

            ElseIf Me.TablaD.CurrentCell.ColumnIndex = CtaAD.Index Then 'Cuentas del Ajuste

                Dim ds As DataSet = Eventos.Obtener_DS("Select rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta, cuenta as cta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " order by cta")
                Dim actividad(,) As String
                ReDim actividad(2, ds.Tables(0).Rows.Count + 1)

                For i As Integer = 0 To ds.Tables(0).Rows.Count - 1

                    actividad(0, i) = ds.Tables(0).Rows(i)(0)
                    Debug.Print(ds.Tables(0).Rows(i)(0))
                    actividad(1, i) = "0"
                Next
                With My.Forms.DialogUnaSeleccion
                    .limpiar()
                    .Titulo = Eventos.titulo_app
                    .Texto = "Selecciona la Cuenta para el Ajuste:"
                    .MinSeleccion = 1
                    .MaxSeleccion = 1
                    .elementos = actividad
                    .ShowDialog()
                    actividad = .elementos
                    If .DialogResult = Windows.Forms.DialogResult.Cancel Then
                        Exit Sub
                    End If
                End With
                Dim descrip As String = ""
                For i As Integer = 0 To actividad.GetLength(1)
                    If actividad(1, i) = "1" Then
                        descrip = actividad(0, i)
                        Exit For
                    End If
                Next
                Me.TablaD.Item(CtaAD.Index, Me.TablaD.CurrentRow.Index).Value = descrip
            End If
        ElseIf Me.TCEmitidas.SelectedIndex = 2 Then
            If Me.TablaC.CurrentCell.ColumnIndex = Me.NomCuentaD.Index Then 'Cuentas del Cargo
                Dim ds As DataSet = Eventos.Obtener_DS("select Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta,  Rtrim(Descripcion) as des from catalogo_de_cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and clave= '" & Trim(Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value) & "' and nivel3 >0  and rfc= '" & Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value & "' order by cta")
                Dim actividad(,) As String
                ReDim actividad(2, ds.Tables(0).Rows.Count + 1)

                For i As Integer = 0 To ds.Tables(0).Rows.Count - 1
                    Dim cadena As String = ds.Tables(0).Rows(i)("Cuenta")
                    Dim posi As Integer = InStr(1, cadena, "-", CompareMethod.Binary)
                    Dim cuantos As Integer = Len(cadena) - Len(cadena.Substring(0, posi))
                    Dim consecutivo As String = cadena.Substring(posi, cuantos)
                    Dim Sql As String = " select Rtrim(Descripcion) as Cuenta from catalogo_de_cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and  Nivel1= '" & consecutivo.ToString.Substring(0, 4) & "' and nivel2= '" & consecutivo.ToString.Substring(4, 4) & "'  and nivel3 ='" & consecutivo.ToString.Substring(8, 4) & "'  and nivel4= '0000'"
                    Dim ds2 As DataSet = Eventos.Obtener_DS(Sql)

                    If Trim(ds.Tables(0).Rows(0)("DES")) = Trim(ds2.Tables(0).Rows(0)("Cuenta")) Then
                        actividad(0, i) = ds.Tables(0).Rows(0)("Cuenta")
                    Else
                        actividad(0, i) = ds2.Tables(0).Rows(0)("Cuenta") & " " & ds.Tables(0).Rows(i)(0)
                    End If

                    Debug.Print(ds.Tables(0).Rows(i)(0))
                    actividad(1, i) = "0"
                Next
                With My.Forms.DialogUnaSeleccion
                    .limpiar()
                    .Titulo = Eventos.titulo_app
                    .Texto = "Selecciona la Cuenta:"
                    .MinSeleccion = 1
                    .MaxSeleccion = 1
                    .elementos = actividad
                    .ShowDialog()
                    actividad = .elementos
                    If .DialogResult = Windows.Forms.DialogResult.Cancel Then
                        Exit Sub
                    End If
                End With

                Dim descrip As String = ""
                For i As Integer = 0 To actividad.GetLength(1)
                    If actividad(1, i) = "1" Then
                        descrip = actividad(0, i)
                        Exit For
                    End If
                Next
                Me.TablaC.Item(NomCtaComplemento.Index, Me.TablaC.CurrentRow.Index).Value = descrip

            ElseIf Me.TablaC.CurrentCell.ColumnIndex = CtaEfComplemento.Index Then 'Cuentas del Efectivo

                Dim ds As DataSet = Eventos.Obtener_DS("Select rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta, cuenta as cta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1010' and Nivel2 > 0 and Nivel3 > 0 order by cta ")
                Dim actividad(,) As String
                ReDim actividad(2, ds.Tables(0).Rows.Count + 1)

                For i As Integer = 0 To ds.Tables(0).Rows.Count - 1

                    actividad(0, i) = ds.Tables(0).Rows(i)(0)
                    Debug.Print(ds.Tables(0).Rows(i)(0))
                    actividad(1, i) = "0"
                Next
                With My.Forms.DialogUnaSeleccion
                    .limpiar()
                    .Titulo = Eventos.titulo_app
                    .Texto = "Selecciona la Cuenta para el Efectivo:"
                    .MinSeleccion = 1
                    .MaxSeleccion = 1
                    .elementos = actividad
                    .ShowDialog()
                    actividad = .elementos
                    If .DialogResult = Windows.Forms.DialogResult.Cancel Then
                        Exit Sub
                    End If
                End With
                Dim descrip As String = ""
                For i As Integer = 0 To actividad.GetLength(1)
                    If actividad(1, i) = "1" Then
                        descrip = actividad(0, i)
                        Exit For
                    End If
                Next
                Me.TablaC.Item(CtaEfComplemento.Index, Me.TablaC.CurrentRow.Index).Value = descrip

            ElseIf Me.TablaC.CurrentCell.ColumnIndex = CtaAntiComplemento.Index Then 'Cuentas del Anticipos
                Dim ds As DataSet
                If Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value <> Nothing Then
                    If Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value = "C" Or Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value = "CPP" Then
                        ds = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1200' and Nivel2 > 0   ORDER BY cta")
                    ElseIf Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value = "GG" Or Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value = "GGPP" Then
                        ds = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1210' and Nivel2 > 0   ORDER BY cta")
                    End If
                End If


                ' ds = Eventos.Obtener_DS("Select rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta, cuenta as cta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1070' and Nivel2 > 0 and Nivel3 > 0 order by cta")




                Dim actividad(,) As String
                ReDim actividad(2, ds.Tables(0).Rows.Count + 1)

                For i As Integer = 0 To ds.Tables(0).Rows.Count - 1

                    actividad(0, i) = ds.Tables(0).Rows(i)(0)
                    Debug.Print(ds.Tables(0).Rows(i)(0))
                    actividad(1, i) = "0"
                Next
                With My.Forms.DialogUnaSeleccion
                    .limpiar()
                    .Titulo = Eventos.titulo_app
                    .Texto = "Selecciona la Cuenta para el Anticipos:"
                    .MinSeleccion = 1
                    .MaxSeleccion = 1
                    .elementos = actividad
                    .ShowDialog()
                    actividad = .elementos
                    If .DialogResult = Windows.Forms.DialogResult.Cancel Then
                        Exit Sub
                    End If
                End With
                Dim descrip As String = ""
                For i As Integer = 0 To actividad.GetLength(1)
                    If actividad(1, i) = "1" Then
                        descrip = actividad(0, i)
                        Exit For
                    End If
                Next
                Me.TablaC.Item(CtaAntiComplemento.Index, Me.TablaC.CurrentRow.Index).Value = descrip

            ElseIf Me.TablaC.CurrentCell.ColumnIndex = CtaAjusComplemento.Index Then 'Cuentas del Ajuste

                Dim ds As DataSet = Eventos.Obtener_DS("Select rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta, cuenta as cta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " order by cta")
                Dim actividad(,) As String
                ReDim actividad(2, ds.Tables(0).Rows.Count + 1)

                For i As Integer = 0 To ds.Tables(0).Rows.Count - 1

                    actividad(0, i) = ds.Tables(0).Rows(i)(0)
                    Debug.Print(ds.Tables(0).Rows(i)(0))
                    actividad(1, i) = "0"
                Next
                With My.Forms.DialogUnaSeleccion
                    .limpiar()
                    .Titulo = Eventos.titulo_app
                    .Texto = "Selecciona la Cuenta para el Ajuste:"
                    .MinSeleccion = 1
                    .MaxSeleccion = 1
                    .elementos = actividad
                    .ShowDialog()
                    actividad = .elementos
                    If .DialogResult = Windows.Forms.DialogResult.Cancel Then
                        Exit Sub
                    End If
                End With
                Dim descrip As String = ""
                For i As Integer = 0 To actividad.GetLength(1)
                    If actividad(1, i) = "1" Then
                        descrip = actividad(0, i)
                        Exit For
                    End If
                Next
                Me.TablaC.Item(CtaAjusComplemento.Index, Me.TablaC.CurrentRow.Index).Value = descrip
            End If
        End If

    End Sub
    Private Sub TablaImportar_CellEndEdit(sender As Object, e As DataGridViewCellEventArgs) Handles TablaImportar.CellEndEdit
        Liberar_Proceso(Me.TablaImportar.CurrentRow.Index)


        'CALCULAR CUENTA DE EFECTIVO
        If Me.TablaImportar.Item(ImpEf.Index, Me.TablaImportar.CurrentRow.Index).Value > 0 Then
            'If Candado_Importe_Efectivo(Me.TablaImportar.CurrentRow.Index) = True Then ' se verifica candado
            '    ' IMPORTE DE EFECTIVO Antiguo Codigo

            Me.TablaImportar.Item(CuentasEfectivo.Index, Me.TablaImportar.CurrentRow.Index).Value = Cuenta_Efectivo()
            Me.TablaImportar.Columns(CuentasEfectivo.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells

        Else
            Me.TablaImportar.Item(CuentasEfectivo.Index, Me.TablaImportar.CurrentRow.Index).Value = ""
        End If

        'CALCULAR CUENTA DE Ajustes
        If Me.TablaImportar.Item(Ajus.Index, Me.TablaImportar.CurrentRow.Index).Value <> 0 Then

            Me.TablaImportar.Item(CtaAjustes.Index, Me.TablaImportar.CurrentRow.Index).Value = Cuenta_Efectivo()
            Me.TablaImportar.Columns(CtaAjustes.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells

        Else
            Me.TablaImportar.Item(CtaAjustes.Index, Me.TablaImportar.CurrentRow.Index).Value = ""
        End If
        'CALCULAR CUENTA DE anticipos
        If Me.TablaImportar.Item(Anti.Index, Me.TablaImportar.CurrentRow.Index).Value > 0 Then

            Me.TablaImportar.Item(CtaAnti.Index, Me.TablaImportar.CurrentRow.Index).Value = Cuenta_Anticipo()
            Me.TablaImportar.Columns(CtaAnti.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
        Else
            Me.TablaImportar.Item(CtaAnti.Index, Me.TablaImportar.CurrentRow.Index).Value = ""
        End If



        ' Importe de Transferencia
        If Me.TablaImportar.Item(ImpT.Index, Me.TablaImportar.CurrentRow.Index).Value > 0 Then
            ' BUSCAR BANCOS EN AUTOMATICO DEL DESTINO
            If Trim(Me.TablaImportar.Item(Bancodestino.Index, Me.TablaImportar.CurrentRow.Index).Value) <> Nothing Then
                If Trim(Me.TablaImportar.Item(CtaBD.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" Or Trim(Me.TablaImportar.Item(CtaBD.Index, Me.TablaImportar.CurrentRow.Index).Value) <> Nothing Then
                Else
                    Dim posi As Integer = InStr(1, Me.TablaImportar.Item(Bancodestino.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
                    Dim cuantos As Integer = Len(Me.TablaImportar.Item(Bancodestino.Index, Me.TablaImportar.CurrentRow.Index).Value) - Len(Me.TablaImportar.Item(Bancodestino.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, posi))
                    Dim Al As String = Me.TablaImportar.Item(Bancodestino.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(posi, cuantos)
                    Me.TablaImportar.Item(CtaBD.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes", "No_Cuenta", " Id_Empresa =" & Me.lstCliente.SelectItem & " and Alias = '" & Trim(Al) & "'", True)

                    Me.TablaImportar.Item(CuentaBancos.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes INNER JOIN Catalogo_de_Cuentas ON Catalogo_de_Cuentas.Id_cat_Cuentas = Bancos_Clientes.Id_cat_Cuentas", "Catalogo_de_Cuentas.Cuenta", " Bancos_Clientes.Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos_Clientes.Alias = '" & Trim(Al) & "'", True)

                End If

            End If

            If Trim(Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value) <> Nothing Then
                Try
                    If Trim(Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" And Trim(Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "0" Then
                        Dim largo As Integer = Len(Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value)
                        Dim cadena As String = Trim(Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value.ToString.Substring(largo - 3, 3))
                        largo = Len(Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value)
                        Dim Al As String = Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(largo - 3, 3)
                        If cadena <> Al Then
                            largo = InStr(1, Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
                            Al = Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, largo - 1)
                            Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos.Clave = '" & Trim(Al) & "' and  RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "'", True)
                        End If
                    Else
                        Dim posi As Integer = InStr(1, Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
                        Dim Al As String = Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, posi - 1)
                        Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos.Clave = '" & Trim(Al) & "' and  RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "'", True)
                    End If
                Catch ex As Exception

                End Try
            Else
                Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value = Banco_destino(Me.lstCliente.SelectItem, Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value)
                Try
                    If Trim(Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" And Trim(Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "0" Then
                        Dim largo As Integer = Len(Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value)
                        Dim cadena As String = Trim(Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value.ToString.Substring(largo - 3, 3))
                        largo = Len(Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value)
                        Dim Al As String = Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(largo - 3, 3)
                        If cadena <> Al Then
                            largo = InStr(1, Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
                            Al = Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, largo - 1)
                            Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos.Clave = '" & Trim(Al) & "' and  RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "'", True)
                        End If
                    Else
                        Dim posi As Integer = InStr(1, Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
                        Dim Al As String = Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, posi - 1)
                        Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos.Clave = '" & Trim(Al) & "' and  RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "'", True)
                    End If
                Catch ex As Exception

                End Try
            End If


            If Trim(UCase(Me.lblce.Text)) = "FALSE" Then
                Me.TablaImportar.Columns(Fechat.Index).Visible = True
                Me.TablaImportar.Columns(BancoOrigen.Index).Visible = False
                Me.TablaImportar.Columns(CuentaO.Index).Visible = False
                Me.TablaImportar.Columns(Bancodestino.Index).Visible = False
                Me.TablaImportar.Columns(CtaBD.Index).Visible = False
            End If


            If Me.TablaImportar.Item(ImpT2.Index, Me.TablaImportar.CurrentRow.Index).Value > 0 Then
                If Trim(Me.TablaImportar.Item(BankOT2.Index, Me.TablaImportar.CurrentRow.Index).Value) <> Nothing Then
                    If Trim(Me.TablaImportar.Item(CtaOT2.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" Then
                    Else
                        Dim posi As Integer = InStr(1, Me.TablaImportar.Item(BankOT2.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
                        Dim cuantos As Integer = Len(Me.TablaImportar.Item(BankOT2.Index, Me.TablaImportar.CurrentRow.Index).Value) - Len(Me.TablaImportar.Item(BankOT2.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, posi))
                        Dim Al As String = Me.TablaImportar.Item(BankOT2.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(posi, cuantos)
                        Me.TablaImportar.Item(CtaOT2.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes", "No_Cuenta", " Id_Empresa =" & Me.lstCliente.SelectItem & " and Alias = '" & Trim(Al) & "'", True)
                        Me.TablaImportar.Item(CtaT2.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes INNER JOIN Catalogo_de_Cuentas ON Catalogo_de_Cuentas.Id_cat_Cuentas = Bancos_Clientes.Id_cat_Cuentas", "Catalogo_de_Cuentas.Cuenta", " Bancos_Clientes.Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos_Clientes.Alias = '" & Trim(Al) & "'", True)
                    End If

                End If

                If Trim(Me.TablaImportar.Item(BankDT2.Index, Me.TablaImportar.CurrentRow.Index).Value) <> Nothing Then
                    Try
                        If Trim(Me.TablaImportar.Item(CtaDT2.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" And Trim(Me.TablaImportar.Item(CtaDT2.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "0" Then
                            Dim largo As Integer = Len(Me.TablaImportar.Item(BankDT2.Index, Me.TablaImportar.CurrentRow.Index).Value)
                            Dim cadena As String = Trim(Me.TablaImportar.Item(BankDT2.Index, Me.TablaImportar.CurrentRow.Index).Value.ToString.Substring(largo - 3, 3))
                            largo = Len(Me.TablaImportar.Item(CtaDT2.Index, Me.TablaImportar.CurrentRow.Index).Value)
                            Dim Al As String = Me.TablaImportar.Item(CtaDT2.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(largo - 3, 3)
                            If cadena <> Al Then
                                largo = InStr(1, Me.TablaImportar.Item(BankDT2.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
                                Al = Me.TablaImportar.Item(BankDT2.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, largo - 1)
                                Me.TablaImportar.Item(CtaDT2.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC", "Clabe", " Id_Empresa =" & Me.lstCliente.SelectItem & " and id_banco = '" & Trim(Al) & "' and  RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "'", True)
                            End If
                        Else
                            Dim posi As Integer = InStr(1, Me.TablaImportar.Item(BankDT2.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
                            Dim Al As String = Me.TablaImportar.Item(BankDT2.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, posi - 1)
                            Me.TablaImportar.Item(CtaDT2.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC", "Clabe", " Id_Empresa =" & Me.lstCliente.SelectItem & " and id_banco = '" & Trim(Al) & "' and  RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "'", True)
                        End If
                    Catch ex As Exception

                    End Try
                Else
                    Me.TablaImportar.Item(BankDT2.Index, Me.TablaImportar.CurrentRow.Index).Value = Banco_destino(Me.lstCliente.SelectItem, Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value)
                    Try
                        If Trim(Me.TablaImportar.Item(CtaDT2.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" And Trim(Me.TablaImportar.Item(CtaDT2.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "0" Then
                            Dim largo As Integer = Len(Me.TablaImportar.Item(BankDT2.Index, Me.TablaImportar.CurrentRow.Index).Value)
                            Dim cadena As String = Trim(Me.TablaImportar.Item(BankDT2.Index, Me.TablaImportar.CurrentRow.Index).Value.ToString.Substring(largo - 3, 3))
                            largo = Len(Me.TablaImportar.Item(CtaDT2.Index, Me.TablaImportar.CurrentRow.Index).Value)
                            Dim Al As String = Me.TablaImportar.Item(CtaDT2.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(largo - 3, 3)
                            If cadena <> Al Then
                                largo = InStr(1, Me.TablaImportar.Item(BankDT2.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
                                Al = Me.TablaImportar.Item(BankDT2.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, largo - 1)
                                Me.TablaImportar.Item(CtaDT2.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC", "Clabe", " Id_Empresa =" & Me.lstCliente.SelectItem & " and id_banco = '" & Trim(Al) & "' and  RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "'", True)
                            End If
                        Else
                            Dim posi As Integer = InStr(1, Me.TablaImportar.Item(BankDT2.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
                            Dim Al As String = Me.TablaImportar.Item(BankDT2.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, posi - 1)
                            Me.TablaImportar.Item(CtaDT2.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC", "Clabe", " Id_Empresa =" & Me.lstCliente.SelectItem & " and id_banco = '" & Trim(Al) & "' and  RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "'", True)
                        End If
                    Catch ex As Exception

                    End Try
                End If

                If Trim(UCase(Me.lblce.Text)) = "FALSE" Then
                    Me.TablaImportar.Columns(FT2.Index).Visible = True
                    Me.TablaImportar.Columns(BankOT2.Index).Visible = False
                    Me.TablaImportar.Columns(CtaOT2.Index).Visible = False
                    Me.TablaImportar.Columns(BankDT2.Index).Visible = False
                    Me.TablaImportar.Columns(CtaDT2.Index).Visible = False
                End If
            End If

        End If
        'Importe cheque
        If Me.TablaImportar.Item(ImpC.Index, Me.TablaImportar.CurrentRow.Index).Value > 0 Then
            'Cheques
            'Cargar bancos destino para ingresos de Cheques
            Dim posi As Integer = 0
            Dim Al As String = ""
            If Trim(Me.TablaImportar.Item(BancoDE.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" Then
                If Trim(Me.TablaImportar.Item(CtaDestinoChe.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" Then


                Else
                    posi = InStr(1, Me.TablaImportar.Item(BancoDE.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
                    Dim cuantos As Integer = Len(Me.TablaImportar.Item(BancoDE.Index, Me.TablaImportar.CurrentRow.Index).Value) - Len(Me.TablaImportar.Item(BancoDE.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, posi))
                    Al = Me.TablaImportar.Item(BancoDE.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(posi, cuantos)
                    Me.TablaImportar.Item(CtaDestinoChe.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes", "No_Cuenta", " Id_Empresa =" & Me.lstCliente.SelectItem & " and Alias = '" & Trim(Al) & "'", True)
                    Me.TablaImportar.Item(CtaCheque.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes INNER JOIN Catalogo_de_Cuentas ON Catalogo_de_Cuentas.Id_cat_Cuentas = Bancos_Clientes.Id_cat_Cuentas", "Catalogo_de_Cuentas.Cuenta", " Bancos_Clientes.Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos_Clientes.Alias = '" & Trim(Al) & "'", True)
                End If
            Else

            End If
            'Cargar bancos Origen para ingresos de Cheques
            If Trim(Me.TablaImportar.Item(BancosCheques.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" Then
                If Trim(Me.TablaImportar.Item(CuentaC.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" Then
                    Dim largo As Integer = Len(Me.TablaImportar.Item(BancosCheques.Index, Me.TablaImportar.CurrentRow.Index).Value)
                    Dim cadena As String = Trim(Me.TablaImportar.Item(BancosCheques.Index, Me.TablaImportar.CurrentRow.Index).Value.ToString.Substring(largo - 3, 3))
                    largo = Len(Me.TablaImportar.Item(CuentaC.Index, Me.TablaImportar.CurrentRow.Index).Value)
                    Al = Me.TablaImportar.Item(CuentaC.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(largo - 3, 3)
                    If cadena <> Al Then
                        posi = InStr(1, Me.TablaImportar.Item(BancosCheques.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
                        Al = Trim(Me.TablaImportar.Item(BancosCheques.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, posi - 1))
                        Me.TablaImportar.Item(CuentaC.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos.Clave = " & Trim(Al) & " and  RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "' and Bancos_RFC.clabe like '%" & cadena & "%'", True)
                    End If
                Else
                    posi = InStr(1, Me.TablaImportar.Item(BancosCheques.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
                    Al = Trim(Me.TablaImportar.Item(BancosCheques.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, posi - 1))
                    Me.TablaImportar.Item(CuentaC.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos.Clave = " & Trim(Al) & " and  RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "'", True)
                End If
            Else
                Me.TablaImportar.Item(BancosCheques.Index, Me.TablaImportar.CurrentRow.Index).Value = Banco_OrigenChe(Me.lstCliente.SelectItem, Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value)
                Me.TablaImportar.Item(CuentaC.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & "  and  RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "'", True)
            End If
            'Se Muestran Columnas de Contabilidad Electronica
            If Trim(UCase(Me.lblce.Text)) = "FALSE" Then
                Me.TablaImportar.Columns(BancosCheques.Index).Visible = False
                Me.TablaImportar.Columns(CuentaC.Index).Visible = False
                Me.TablaImportar.Columns(NoCheque.Index).Visible = False
                Me.TablaImportar.Columns(FechaC.Index).Visible = True

            End If

        End If


        If Me.TablaImportar.Item(ImpProvis.Index, Me.TablaImportar.CurrentRow.Index).Value > 0 Then
            'If Trim(Me.TablaImportar.Item(CtaProv.Index, Me.TablaImportar.CurrentRow.Index).Value) <> Nothing Then
            'Else
            '    Me.TablaImportar.Item(CtaProv.Index, Me.TablaImportar.CurrentRow.Index).Value = Buscacuenta_Provision()
            'End If
        Else
            Me.TablaImportar.Item(CtaProv.Index, Me.TablaImportar.CurrentRow.Index).Value = ""
        End If

        'candados
        Candados(Me.TablaImportar.CurrentRow.Index)

    End Sub
    Private Function Buscacuenta_Provision()
        Dim cta As String = ""
        Dim leyenda As String = ""
        Dim dsconta As DataSet
        Dim columna As Integer = Me.TablaImportar.CurrentCell.ColumnIndex
        dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas WHERE Nivel1 >0 AND (Nivel2 >0 AND Nivel2 not in ('0009','0006') ) AND Clave = 'IPC' and Id_Empresa = " & Me.lstCliente.SelectItem & " and rfc = '" & Trim(Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value) & "' ORDER BY cta")
        If dsconta.Tables(0).Rows.Count > 0 Then
            cta = dsconta.Tables(0).Rows(0)(0)
        Else
            Try
                dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas WHERE Nivel1 >0 AND (Nivel2 >0 AND Nivel2 not in ('0009','0006') ) AND Clave = 'IPC' and Id_Empresa = " & Me.lstCliente.SelectItem & "  ORDER BY cta")
                leyenda = "IPC"
                Dim cuenta As String = ""
                Dim act(,) As String
                ReDim act(2, dsconta.Tables(0).Rows.Count + 1)
                For s As Integer = 0 To dsconta.Tables(0).Rows.Count - 1
                    act(0, s) = dsconta.Tables(0).Rows(s)(0)
                    Debug.Print(dsconta.Tables(0).Rows(s)(0))
                    act(1, s) = "0"
                Next
                With My.Forms.DialogUnaSeleccion
                    .limpiar()
                    .Titulo = Eventos.titulo_app
                    .Texto = "Selecciona la Cuenta Madre para " & leyenda & ":"
                    .MinSeleccion = 1
                    .MaxSeleccion = 1
                    .elementos = act
                    .ShowDialog()
                    act = .elementos
                    If .DialogResult = Windows.Forms.DialogResult.Cancel Then
                        cta = ""
                    End If
                End With

                Dim Letra As String = ""
                For s As Integer = 0 To act.GetLength(1)
                    If act(1, s) = "1" Then
                        Letra = act(0, s)
                        Exit For
                    End If
                Next
                Dim cadena As String = Trim(Letra)
                Dim posi As Integer = InStr(1, cadena, "-", CompareMethod.Binary)
                Dim cuantos As Integer = Len(cadena) - Len(cadena.Substring(0, posi))
                Letra = cadena.Substring(posi, cuantos)
                If Verifica_existencia(Letra.ToString.Substring(0, 4), Letra.ToString.Substring(4, 4), "IPC", Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value) = True Then
                    cuenta = Val(ObtenerValorDB("Catalogo_de_cuentas", "CASE WHEN max (Nivel3 ) + 1 IS NULL THEN 1 WHEN max (Nivel3 ) + 1 IS NOT NULL THEN   max (Nivel3 ) + 1 END AS C ", "  Nivel1 =" & Letra.ToString.Substring(0, 4) & "  AND Nivel2 =" & Letra.ToString.Substring(4, 4) & " and Id_Empresa = " & Me.lstCliente.SelectItem & " ", True))
                    cuenta = Format(cuenta).PadLeft(4, "0")
                    Crear_cuenta(Letra.ToString.Substring(0, 4), Letra.ToString.Substring(4, 4), cuenta,
                                             "0000", Letra.Substring(0, 8) & cuenta & "0000", Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & " " & Me.TablaImportar.Item(NomEmisor.Index, Me.TablaImportar.CurrentRow.Index).Value,
                                            Me.lstCliente.SelectItem, "IPC", Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value)
                Else
                    RadMessageBox.SetThemeName("MaterialBlueGrey")
                    RadMessageBox.Show("La cuenta ya existe ...", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Exclamation)
                End If
            Catch ex As Exception
                cta = ""
                Me.TablaImportar.Item(ImpProvis.Index, Me.TablaImportar.CurrentRow.Index).Value = 0
            End Try
        End If
        Return cta
    End Function
    Private Sub Cargar_bancos(ByVal bancos As String)
        Dim sql As String = " SELECT rtrim(Bancos.Clave) +'-'+ Bancos_Clientes.Alias AS Alias FROM Bancos_Clientes INNER JOIN Bancos ON Bancos_Clientes.Id_Banco =Bancos.Id_Banco  where Id_Empresa = " & Me.lstCliente.SelectItem & " and alias like '%" & bancos & "%'"
        Dim ds As DataSet = Eventos.Obtener_DS(sql)
        If ds.Tables(0).Rows.Count > 0 Then
            If bancos = "Cheq" Then
                'Cheque
                If Me.BancoDE.Items.Count = 0 Then
                    For i As Integer = 0 To ds.Tables(0).Rows.Count - 1
                        Me.BancoDE.Items.Add(ds.Tables(0).Rows(i)("Alias"))
                    Next
                Else
                    Try
                        Me.BancoDE.Items.Clear()
                    Catch ex As Exception

                    End Try

                    For i As Integer = 0 To ds.Tables(0).Rows.Count - 1
                        Me.BancoDE.Items.Add(ds.Tables(0).Rows(i)("Alias"))
                    Next
                End If
            Else
                'Transferencia
                'Origen
                If Me.Bancodestino.Items.Count = 0 Then
                    For i As Integer = 0 To ds.Tables(0).Rows.Count - 1
                        Me.Bancodestino.Items.Add(ds.Tables(0).Rows(i)("Alias"))

                    Next
                Else
                    Try
                        Me.Bancodestino.Items.Clear()
                    Catch ex As Exception

                    End Try


                    For i As Integer = 0 To ds.Tables(0).Rows.Count - 1
                        Me.Bancodestino.Items.Add(ds.Tables(0).Rows(i)("Alias"))

                    Next
                End If
                If Me.BankOT2.Items.Count = 0 Then
                    For i As Integer = 0 To ds.Tables(0).Rows.Count - 1
                        Me.BankOT2.Items.Add(ds.Tables(0).Rows(i)("Alias"))

                    Next
                Else
                    Try
                        Me.BankOT2.Items.Clear()
                    Catch ex As Exception

                    End Try


                    For i As Integer = 0 To ds.Tables(0).Rows.Count - 1
                        Me.BankOT2.Items.Add(ds.Tables(0).Rows(i)("Alias"))

                    Next
                End If
            End If
        End If

    End Sub
    Private Function Banco_OrigenChe(ByVal Cliente As Integer, ByVal Rfc As String)
        Dim banco As String = ""
        Dim sql2 As String = " SELECT DISTINCT CONVERT(NVARCHAR, Bancos.clave, 103) + '-' + Bancos.Nombre AS Banco ,clabe  FROM     Bancos INNER JOIN     Bancos_RFC ON Bancos.Id_Banco = Bancos_RFC.Id_Banco  WHERE emitidas=1 and (Bancos_RFC.Id_Empresa  = " & Cliente & ") and RFC = '" & Rfc & "' and Favorito=1"
        Dim ds2 As DataSet = Eventos.Obtener_DS(sql2)

        If ds2.Tables(0).Rows.Count > 0 Then
            Dim largo As Integer = Len(ds2.Tables(0).Rows(0)("Clabe"))
            Try
                banco = Trim(ds2.Tables(0).Rows(0)("Banco")) & " " & Trim(ds2.Tables(0).Rows(0)("Clabe").ToString.Substring(largo - 3, 3))
            Catch ex As Exception

            End Try
        Else
            banco = ""
        End If

        Return banco
    End Function
    Private Function Banco_destino(ByVal Cliente As Integer, ByVal Rfc As String)
        Dim banco As String = ""
        Dim sql2 As String = " SELECT DISTINCT CONVERT(NVARCHAR, Bancos.clave, 103) + '-' + Bancos.Nombre AS Banco ,clabe  FROM     Bancos INNER JOIN     Bancos_RFC ON Bancos.Id_Banco = Bancos_RFC.Id_Banco  WHERE emitidas=1 and (Bancos_RFC.Id_Empresa  = " & Cliente & ") and RFC = '" & Rfc & "' and Favorito=1"
        Dim ds2 As DataSet = Eventos.Obtener_DS(sql2)

        If ds2.Tables(0).Rows.Count > 0 Then
            Dim largo As Integer = Len(ds2.Tables(0).Rows(0)("Clabe"))
            Try
                banco = Trim(ds2.Tables(0).Rows(0)("Banco")) & " " & Trim(ds2.Tables(0).Rows(0)("Clabe").ToString.Substring(largo - 3, 3))
            Catch ex As Exception

            End Try
        Else
            banco = ""
        End If

        Return banco
    End Function
    Private Function Calcula_Moneda(ByVal fecha As String)
        Dim importe As Decimal = 0
        Dim ds As DataSet = Eventos.Obtener_DS(" Select Costo_Pesos FROM Tipos_de_Cambio WHERE Fecha_Aplicacion = " & Eventos.Sql_hoy(fecha) & "")
        If ds.Tables(0).Rows.Count > 0 Then
            importe = ds.Tables(0).Rows(0)("Costo_Pesos")
        Else
            importe = 0
        End If
        Return importe
    End Function
    Private Function Cuenta_cargos(ByVal rfc As String, ByVal letra As String)
        Dim cuenta As String
        Dim sql As String = " select Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, Rtrim(Descripcion) as DES from catalogo_de_cuentas where  clave= '" & Trim(letra) & "'  and nivel3 >0  and rfc= '" & rfc & "' and Id_Empresa = " & Me.lstCliente.SelectItem & ""
        Dim ds As DataSet = Eventos.Obtener_DS(sql)
        If ds.Tables(0).Rows.Count > 0 Then
            Dim cadena As String = ds.Tables(0).Rows(0)("Cuenta")
            Dim posi As Integer = InStr(1, cadena, "-", CompareMethod.Binary)
            Dim cuantos As Integer = Len(cadena) - Len(cadena.Substring(0, posi))
            Dim consecutivo As String = cadena.Substring(posi, cuantos)

            sql = " select Rtrim(Descripcion) as Cuenta from catalogo_de_cuentas where  Nivel1= '" & consecutivo.ToString.Substring(0, 4) & "' and nivel2= '" & consecutivo.ToString.Substring(4, 4) & "'  and nivel3 ='" & consecutivo.ToString.Substring(8, 4) & "'  and nivel4= '0000'  and Id_Empresa = " & Me.lstCliente.SelectItem & ""

            Dim ds2 As DataSet = Eventos.Obtener_DS(sql)
            If Trim(ds.Tables(0).Rows(0)("DES")) = Trim(ds2.Tables(0).Rows(0)("Cuenta")) Then
                cuenta = ds.Tables(0).Rows(0)("Cuenta")
            Else
                cuenta = ds2.Tables(0).Rows(0)("Cuenta") & " " & ds.Tables(0).Rows(0)("Cuenta")
            End If

        Else
            cuenta = ""
        End If
        Return cuenta
    End Function
    Private Function Cuenta_Efectivo()
        Dim cuenta As String
        Dim sql As String = " Select rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1010' and Nivel2 > 0 and Nivel3 > 1 "
        Dim ds As DataSet = Eventos.Obtener_DS(sql)
        If ds.Tables(0).Rows.Count > 0 Then
            cuenta = ds.Tables(0).Rows(0)("Cuenta")
        Else
            cuenta = ""
        End If
        Return cuenta
    End Function

    Private Function Cuenta_Anticipo()
        Dim cuenta As String
        Dim ds As DataSet
        If Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value <> Nothing Then
            If Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value = "C" Or Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value = "CPP" Then
                ds = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1200' and Nivel2 > 0   ORDER BY cta")
            ElseIf Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value = "GG" Or Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value = "GGPP" Then
                ds = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1210' and Nivel2 > 0   ORDER BY cta")
            End If
        End If

        'Dim sql As String = " Select rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1070' and Nivel2 > 0 and Nivel3 > 0 "
        'Dim ds As DataSet = Eventos.Obtener_DS(sql)
        If ds.Tables(0).Rows.Count > 0 Then
            cuenta = ds.Tables(0).Rows(0)("Cuenta")
        Else
            cuenta = ""
        End If
        Return cuenta
    End Function

    Private Function Cuenta_dev()
        Dim cuenta As String
        Dim sql As String = " Select rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1010' and Nivel2 > 0 and Nivel3 > 0 "
        Dim ds As DataSet = Eventos.Obtener_DS(sql)
        If ds.Tables(0).Rows.Count > 0 Then
            cuenta = ds.Tables(0).Rows(0)("Cuenta")
        Else
            cuenta = ""
        End If
        Return cuenta
    End Function
    Private Function Candado_Importe_Efectivo(ByVal i As Integer)
        Dim hacer As Boolean
        If Me.TablaImportar.Item(ImpEf.Index, i).Value > 2000 Then

            hacer = False
        Else
            hacer = True
        End If
        Return hacer
    End Function
    Private Sub Cargar_valores_contables()
        If Me.TablaImportar.Rows.Count >= 1 Then
            Dim frm As New BarraProcesovb
            frm.Show()
            frm.Text = "Calculando Importes Gravados, Exentos e IVA's por favor espere..."
            frm.Barra.Minimum = 0
            frm.Barra.Maximum = Me.TablaImportar.Rows.Count
            For i As Integer = 0 To Me.TablaImportar.Rows.Count - 1
                If Trim(Me.TablaImportar.Item(Tot.Index, i).Value) <> "P" Then
                    If Trim(Me.TablaImportar.Item(Mone.Index, i).Value.ToString) <> "USD" Then
                        If Me.TablaImportar.Item(Tot.Index, i).Value > 0 And Me.TablaImportar.Item(Tot.Index, i).Value <> Nothing Then
                            'importe gravado
                            Me.TablaImportar.Item(ImpG.Index, i).Value = Math.Round(IIf(IsDBNull(Me.TablaImportar.Item(CIVA.Index, i).Value) = True, 0, Me.TablaImportar.Item(CIVA.Index, i).Value / 0.16), 2)
                            'importe exento
                            Me.TablaImportar.Item(ImpEx.Index, i).Value = Math.Round(IIf(IsDBNull(Me.TablaImportar.Item(Subtotal.Index, i).Value) = True, 0, Me.TablaImportar.Item(Subtotal.Index, i).Value - Me.TablaImportar.Item(ImpG.Index, i).Value), 2)
                            'Iva_real
                            Me.TablaImportar.Item(IVAR.Index, i).Value = Math.Round(IIf(IsDBNull(Me.TablaImportar.Item(ImpG.Index, i).Value) = True, 0, Me.TablaImportar.Item(ImpG.Index, i).Value * 0.16), 2)
                            'calcula el % Pago Acumulado
                            If Me.TablaImportar.Item(ImpEx.Index, i).Value < 1 Then
                                Me.TablaImportar.Item(ImpG.Index, i).Value = Me.TablaImportar.Item(ImpG.Index, i).Value + Me.TablaImportar.Item(ImpEx.Index, i).Value
                                Me.TablaImportar.Item(ImpEx.Index, i).Value = 0
                            End If
                            'Total real
                            Me.TablaImportar.Item(TReal.Index, i).Value = Me.TablaImportar.Item(ImpG.Index, i).Value + Me.TablaImportar.Item(ImpEx.Index, i).Value + Me.TablaImportar.Item(IVAR.Index, i).Value
                        End If
                    Else
                        ' calcular en dolares
                        If Me.TablaImportar.Item(Tot.Index, i).Value > 0 And Me.TablaImportar.Item(Tot.Index, i).Value <> Nothing Then

                            If Calcula_Moneda(Me.TablaImportar.Item(Fecha_Emi.Index, i).Value.ToString.Substring(0, 10)) = 0 Then
                                Me.TablaImportar.Rows(i).DefaultCellStyle.BackColor = Color.Red
                            End If
                            'importe gravado
                            Me.TablaImportar.Item(ImpG.Index, i).Value = Math.Round(IIf(IsDBNull(Me.TablaImportar.Item(CIVA.Index, i).Value) = True, 0, (Me.TablaImportar.Item(CIVA.Index, i).Value * Calcula_Moneda(Me.TablaImportar.Item(Fecha_Emi.Index, i).Value.ToString.Substring(0, 10))) / 0.16), 2)
                            'importe exento
                            Me.TablaImportar.Item(ImpEx.Index, i).Value = Math.Round(IIf(IsDBNull(Me.TablaImportar.Item(Subtotal.Index, i).Value) = True, 0, (Me.TablaImportar.Item(Subtotal.Index, i).Value * Calcula_Moneda(Me.TablaImportar.Item(Fecha_Emi.Index, i).Value.ToString.Substring(0, 10))) - Me.TablaImportar.Item(ImpG.Index, i).Value), 2)
                            'Iva_real
                            Me.TablaImportar.Item(IVAR.Index, i).Value = Math.Round(IIf(IsDBNull(Me.TablaImportar.Item(ImpG.Index, i).Value) = True, 0, Me.TablaImportar.Item(ImpG.Index, i).Value * 0.16), 2)
                            'calcula el % Pago Acumulado
                            'Total real
                            If Me.TablaImportar.Item(ImpEx.Index, i).Value < 1 Then
                                Me.TablaImportar.Item(ImpG.Index, i).Value = Me.TablaImportar.Item(ImpG.Index, i).Value + Me.TablaImportar.Item(ImpEx.Index, i).Value
                                Me.TablaImportar.Item(ImpEx.Index, i).Value = 0
                            End If
                            Me.TablaImportar.Item(TReal.Index, i).Value = Me.TablaImportar.Item(ImpG.Index, i).Value + Me.TablaImportar.Item(ImpEx.Index, i).Value + Me.TablaImportar.Item(IVAR.Index, i).Value
                        End If

                    End If
                End If
                frm.Barra.Value = i
            Next
            frm.Close()
        End If
    End Sub
    'Eventos control de las polizas
    Private Sub Codificar_polizas(ByVal posicion As Integer)
        Dim poliza_Sistema As String = ""
        '  If Me.TablaImportar.Item(Psistema.Index, posicion).Value <> "" Then ' quitar linea despues del desbloqueo
        poliza_Sistema = Calcula_poliza(posicion)
        '  End If

        'Calcular consecutivo poliza
        Dim posi As Integer = InStr(1, poliza_Sistema, "-", CompareMethod.Binary)
        Dim cuantos As Integer = Len(poliza_Sistema) - Len(poliza_Sistema.Substring(0, posi))
        Dim consecutivo As Integer = Val(poliza_Sistema.Substring(posi, cuantos))
        'Crear poliza
        'Checar dia de la Poliza poner if
        Dim dia As String = ""
        If Me.TablaImportar.Item(ImpT.Index, posicion).Value > 0 Then
            dia = Me.TablaImportar.Item(Fechat.Index, posicion).Value.ToString.Substring(0, 2)
        ElseIf Me.TablaImportar.Item(ImpEf.Index, posicion).Value > 0 Then
            dia = Me.TablaImportar.Item(Fecha_Emi.Index, posicion).Value.ToString.Substring(0, 2)
        ElseIf Me.TablaImportar.Item(ImpC.Index, posicion).Value > 0 Then
            dia = Me.TablaImportar.Item(FechaC.Index, posicion).Value.ToString.Substring(0, 2)
        Else
            dia = Me.TablaImportar.Item(Fecha_Emi.Index, posicion).Value.ToString.Substring(0, 2)
        End If

        ' CREAR iF para calcular el dia
        If Creapoliza(poliza_Sistema, Me.TablaImportar.Item(anio.Index, posicion).Value, Me.TablaImportar.Item(Mes.Index, posicion).Value, dia,
                   consecutivo, Checa_tipo(Me.TablaImportar.Item(TipoPoliza.Index, posicion).Value, Me.lstCliente.SelectItem),
                   Me.TablaImportar.Item(Fecha_Emi.Index, posicion).Value, Leyenda(Trim(Me.TablaImportar.Item(ContabilizacionC.Index, posicion).Value)) & " " & Trim(Me.TablaImportar.Item(UUI.Index, posicion).Value), "Carga", Me.TablaImportar.Item(NumPol.Index, posicion).Value, Me.TablaImportar.Item(Id_Xml.Index, posicion).Value, False) = True Then



            If Buscafactura(Me.TablaImportar.Item(UUI.Index, posicion).Value, "C") = True Then
                'Se inserta la Factura
                Inserta_Comprobante_Fiscal(poliza_Sistema, Me.TablaImportar.Item(anio.Index, posicion).Value, Me.TablaImportar.Item(Mes.Index, posicion).Value,
                             Me.TablaImportar.Item(RFCE.Index, posicion).Value, Me.TablaImportar.Item(Fecha_Emi.Index, posicion).Value,
                               Me.TablaImportar.Item(UUI.Index, posicion).Value, "Factura " & Trim(Me.TablaImportar.Item(RFCE.Index, posicion).Value) & " C", Me.TablaImportar.Item(TReal.Index, posicion).Value)
            Else
                'Se Edita la Factura
                Edita_Factura(Me.TablaImportar.Item(UUI.Index, posicion).Value, "C", poliza_Sistema)
            End If


            If Me.TablaImportar.Item(ImpEf.Index, posicion).Value > 0 Then
                ' Insertar registro contabiidad electronica efectivo
                Inserta_Comprobante_Fiscal_Efectivo(poliza_Sistema, Me.TablaImportar.Item(anio.Index, posicion).Value, Me.TablaImportar.Item(Mes.Index, posicion).Value,
                                Me.TablaImportar.Item(RFCE.Index, posicion).Value, Me.TablaImportar.Item(TipoPoliza.Index, posicion).Value.ToString.Substring(0, 3), Me.TablaImportar.Item(Fecha_Emi.Index, posicion).Value,
                              "", "", "", "", Me.TablaImportar.Item(ImpEf.Index, posicion).Value)
            End If
            If Trim(UCase(Me.lblce.Text)) = "TRUE" Then ' SE INSERTA CONTABILIDAD ELECTRONICA

                If Me.TablaImportar.Item(ImpT.Index, posicion).Value > 0 Then
                    ' Insertar registro contabiidad electronica Transferencia
                    Dim cadena As String = Me.TablaImportar.Item(BancoOrigen.Index, posicion).Value
                    Dim posil As Integer = InStr(1, cadena, "-", CompareMethod.Binary)
                    Dim BO As String = cadena.Substring(0, posil - 1)

                    cadena = Me.TablaImportar.Item(Bancodestino.Index, posicion).Value
                    posil = InStr(1, cadena, "-", CompareMethod.Binary)
                    Dim Bd As String = cadena.Substring(0, posil - 1)

                    Inserta_Comprobante_Fiscal_Transf(poliza_Sistema, Me.TablaImportar.Item(anio.Index, posicion).Value, Me.TablaImportar.Item(Mes.Index, posicion).Value,
                                    Me.TablaImportar.Item(RFCE.Index, posicion).Value, Me.TablaImportar.Item(TipoPoliza.Index, posicion).Value.ToString.Substring(0, 3), Me.TablaImportar.Item(Fechat.Index, posicion).Value,
                                  "", BO, Me.TablaImportar.Item(CuentaO.Index, posicion).Value, Me.TablaImportar.Item(UUI.Index, posicion).Value, Me.TablaImportar.Item(ImpT.Index, posicion).Value, Bd, Me.TablaImportar.Item(CtaBD.Index, posicion).Value)
                End If
                ' insertar 10 Transf
                If Me.TablaImportar.Item(ImpT2.Index, posicion).Value > 0 Then
                    ' Insertar registro contabiidad electronica Transferencia
                    Dim cadena As String = Me.TablaImportar.Item(BankOT2.Index, posicion).Value
                    Dim posil As Integer = InStr(1, cadena, "-", CompareMethod.Binary)
                    Dim BO As String = cadena.Substring(0, posil - 1)

                    cadena = Me.TablaImportar.Item(BankDT2.Index, posicion).Value
                    posil = InStr(1, cadena, "-", CompareMethod.Binary)
                    Dim Bd As String = cadena.Substring(0, posil - 1)

                    Inserta_Comprobante_Fiscal_Transf(poliza_Sistema, Me.TablaImportar.Item(anio.Index, posicion).Value, Me.TablaImportar.Item(Mes.Index, posicion).Value,
                                    Me.TablaImportar.Item(RFCE.Index, posicion).Value, Me.TablaImportar.Item(TipoPoliza.Index, posicion).Value.ToString.Substring(0, 3), Me.TablaImportar.Item(FT2.Index, posicion).Value,
                                  "", BO, Me.TablaImportar.Item(CtaOT2.Index, posicion).Value, Me.TablaImportar.Item(UUI.Index, posicion).Value, Me.TablaImportar.Item(ImpT2.Index, posicion).Value, Bd, Me.TablaImportar.Item(CtaDT2.Index, posicion).Value)
                End If

                If Me.TablaImportar.Item(ImpC.Index, posicion).Value > 0 Then
                    ' Insertar registro contabiidad electronica Cheque
                    Dim cadena As String = Me.TablaImportar.Item(BancosCheques.Index, posicion).Value
                    Dim posil As Integer = InStr(1, cadena, "-", CompareMethod.Binary)
                    Dim BO As String = cadena.Substring(0, posil - 1)

                    Inserta_Comprobante_Fiscal_Cheque(poliza_Sistema, Me.TablaImportar.Item(anio.Index, posicion).Value, Me.TablaImportar.Item(Mes.Index, posicion).Value,
                                    Me.TablaImportar.Item(RFCE.Index, posicion).Value, Me.TablaImportar.Item(TipoPoliza.Index, posicion).Value.ToString.Substring(0, 3), Me.TablaImportar.Item(FechaC.Index, posicion).Value,
                                  Me.TablaImportar.Item(NoCheque.Index, posicion).Value, BO, Me.TablaImportar.Item(CuentaC.Index, posicion).Value, Me.TablaImportar.Item(UUI.Index, posicion).Value, Me.TablaImportar.Item(ImpC.Index, posicion).Value)
                End If
            End If

            'Verificara el sistema las polizas automatizadas
            Crear_detalle(posicion, poliza_Sistema)
        End If
    End Sub
    Private Function Buscafactura(ByVal Folio_Fiscal As String, ByVal detaclle As String)
        Dim hacer As Boolean
        Dim sql As String = "select * from Facturas where Folio_Fiscal = '" & Folio_Fiscal & "' and Detalle_Comp_Electronico ='" & detaclle & "'"
        Dim ds As DataSet = Eventos.Obtener_DS(sql)
        If ds.Tables(0).Rows.Count > 0 Then
            hacer = False
        Else
            hacer = True
        End If
        Return hacer
    End Function
    Private Function Creapoliza(ByVal id_poliza As String, ByVal anio As Integer, ByVal mes As String, ByVal dia As String,
                         ByVal consecutivo As Integer, ByVal tipo As Integer, ByVal fecha As String,
                         ByVal concepto As String, ByVal movimiento As String, ByVal num_pol As Integer, ByVal registro As Integer, Optional ByVal comple As Boolean = False)
        Dim hacer As Boolean
        Dim sql As String = ""
        sql &= "         INSERT INTO dbo.Polizas"
        sql &= "("
        sql &= " 	Id_Poliza,      "
        sql &= "     ID_anio,        "
        sql &= "     ID_mes,        "
        sql &= "     ID_dia,        "
        sql &= "     consecutivo,    "
        sql &= "     Num_Pol,    "
        sql &= "     Id_Tipo_Pol_Sat,"
        sql &= "     Fecha,          "
        sql &= "     Concepto,      "
        sql &= "     Id_Empresa,     "
        sql &= "     No_Mov,        "
        sql &= "     Fecha_captura,  "
        sql &= "     Movto,         "
        sql &= "     Usuario,Aplicar_Poliza"
        sql &= " 	)               "
        sql &= " VALUES              "
        sql &= " 	(               "
        sql &= " 	'" & id_poliza & "'," '@id_poliza,         
        sql &= " 	" & anio & "," '@id_anio,           
        sql &= " 	'" & mes & "'," '@id_mes,     
        sql &= " 	'" & dia & "'," '@id_dia,     
        sql &= " 	" & consecutivo & "," '@consecutivo,   
        sql &= " 	" & num_pol & "," '@num_pol,  
        sql &= " 	" & tipo & "," '@id_tipo_poliza, 
        sql &= " 	" & Eventos.Sql_hoy(fecha) & "," '@fecha,             
        sql &= " 	'" & concepto & "'," '@concepto,          
        sql &= " 	" & Me.lstCliente.SelectItem & "," '@Id_Empresa,        
        sql &= " 	'" & movimiento & "'," '@no_mov,            
        sql &= " 	" & Eventos.Sql_hoy("" & dia & "/" & mes & "/" & anio & "") & "," '@fecha_captura,     
        sql &= " 	'A'," '@movto,             
        sql &= "  '" & Eventos.Usuario(Inicio.LblUsuario.Text) & "', 1" '@usuario            
        sql &= " 	) "

        If Eventos.Comando_sql(sql) > 0 Then
            hacer = True
            Eventos.Insertar_usuariol("InsertarPolizCp", sql)
            If comple = True Then
                Actualiza_RegistroC(id_poliza, registro)
                Dim iD As String = "SELECT Xml_Sat.Id_Registro_Xml  FROM Xml_Sat WHERE Id_Empresa = " & Me.lstCliente.SelectItem & " AND UUID = (SELECT IdDocumento FROM Xml_Complemento WHERE Id_Xml_Complemento = " & registro & ")"
                Dim DS As DataSet = Eventos.Obtener_DS(iD)
                If DS.Tables(0).Rows.Count > 0 Then
                    Eventos.Actualiza_Factura(DS.Tables(0).Rows(0)(0))
                End If
            Else
                Actualiza_Registro(id_poliza, registro)
            End If
        Else
            hacer = False
        End If
        Return hacer
    End Function
    Private Sub Crea_detalle_poliza(ByVal id_poliza As String, ByVal item As Integer, ByVal cargo As Decimal,
                                       ByVal Abono As Decimal, ByVal cuenta As String, ByVal cheque As String)
        Dim sql As String = ""
        sql &= "         INSERT INTO dbo.Detalle_Polizas"
        sql &= "(   "
        sql &= " Id_Poliza,      "
        sql &= " ID_item,       "
        sql &= " Cargo,          "
        sql &= " Abono,         "
        sql &= " Fecha_captura,  "
        sql &= " Movto,"
        sql &= " Cuenta, "
        sql &= " No_cheque  "
        sql &= " ) "
        sql &= " VALUES "
        sql &= "( "
        sql &= " '" & id_poliza & "'	," '@id_poliza,     
        sql &= "" & item & "," '@id_item,       
        sql &= "" & cargo & "," '@cargo,         
        sql &= "" & Abono & "," '@abono,         
        sql &= "" & Eventos.Sql_hoy() & "," '@fecha_captura, 
        sql &= " 'A'	," '@movto,         
        sql &= " " & cuenta & "	," '@cuenta,        
        sql &= " '" & cheque & "'" '@no_cheque      
        sql &= " 	)"
        If Eventos.Comando_sql(sql) > 0 Then
            Eventos.Insertar_usuariol("InsertarPolizD", sql)
        End If
    End Sub
    Private Sub Inserta_Comprobante_Fiscal_Cheque(ByVal id_poliza As String, ByVal anio As Integer, ByVal mes As String,
                           ByVal Rfc_Emisor As String, ByVal tipo As String, ByVal fecha As String,
                           ByVal No_cheque As String, ByVal no_banco As String, ByVal cuenta_origen As String, ByVal Referencia As String, ByVal Importe As Decimal)
        Dim sql As String = "  INSERT INTO dbo.Conta_E_Sistema
	(
    anio,    mes,    tipo,      RFC_Ce,
    No_Cheque,    No_Banco,    Cuenta_Origen,    Fecha_Mov,    Importe,
    Id_Poliza,    Tipo_CE	) VALUES	("

        sql &= " '" & anio & "',	" '@id_anio,                   
        sql &= " '" & mes & "'," '@id_mes,     
        sql &= " '" & tipo & "'," '@tipo    

        sql &= " '" & Rfc_Emisor & "'," '@rfc_ce,                
        sql &= " '" & No_cheque & "'," '@no_cheque,  
        sql &= " '" & no_banco & "'," '@no_banco,  
        sql &= " '" & cuenta_origen & "'," '@cuenta_origen,  
        sql &= " " & Eventos.Sql_hoy(fecha) & "," '@fecha_mov,    
        sql &= " " & Importe & "	," '@importe,                    
        sql &= " '" & id_poliza & "', " '@id_poliza,  
        sql &= " 'H' " '@tipo_ce, 
        sql &= " )"
        If Eventos.Comando_sql(sql) > 0 Then
            Eventos.Insertar_usuariol("InsertarCeH", sql)
        End If
    End Sub
    Private Sub Inserta_Comprobante_Fiscal_Efectivo(ByVal id_poliza As String, ByVal anio As Integer, ByVal mes As String,
                           ByVal Rfc_Emisor As String, ByVal tipo As String, ByVal fecha As String,
                           ByVal No_cheque As String, ByVal no_banco As String, ByVal cuenta_origen As String, ByVal Referencia As String, ByVal Importe As Decimal)
        Dim sql As String = "  INSERT INTO dbo.Conta_E_Sistema
	(     anio,    mes,    tipo,       RFC_Ce,
    No_Cheque,    No_Banco,    Cuenta_Origen,    Fecha_Mov,    Importe,
    Id_Poliza,    Tipo_CE	) VALUES	("

        sql &= " '" & anio & "',	" '@id_anio,                   
        sql &= " '" & mes & "'," '@id_mes,     
        sql &= " '" & tipo & "'," '@tipo    

        sql &= " '" & Rfc_Emisor & "'," '@rfc_ce,                
        sql &= " '" & No_cheque & "'," '@no_cheque,  
        sql &= " '" & no_banco & "'," '@no_banco,  
        sql &= " '" & cuenta_origen & "'," '@cuenta_origen,  
        sql &= " " & Eventos.Sql_hoy(fecha) & "," '@fecha_mov,    
        sql &= " " & Importe & "	," '@importe,                    
        sql &= " '" & id_poliza & "', " '@id_poliza,  
        sql &= " 'P' " '@tipo_ce, 
        sql &= " )"
        If Eventos.Comando_sql(sql) > 0 Then
            Eventos.Insertar_usuariol("InsertarCeE", sql)
        End If
    End Sub
    Private Sub Inserta_Comprobante_Fiscal_Transf(ByVal id_poliza As String, ByVal anio As Integer, ByVal mes As String,
                           ByVal Rfc_Emisor As String, ByVal tipo As String, ByVal fecha As String,
                           ByVal No_cheque As String, ByVal no_banco As String, ByVal cuenta_origen As String, ByVal Referencia As String, ByVal Importe As Decimal, ByVal bancoD As String, ByVal cuentaD As String)
        Dim sql As String = "  INSERT INTO dbo.Conta_E_Sistema
	(
    anio,    mes,    tipo,       RFC_Ce,
    No_Cheque,    No_Banco,    Cuenta_Origen,    Fecha_Mov,    Importe,
    Id_Poliza,    Tipo_CE,Banco_Destino,Cuenta_Destino	) VALUES	("

        sql &= " '" & anio & "',	" '@id_anio,                   
        sql &= " '" & mes & "'," '@id_mes,     
        sql &= " '" & tipo & "'," '@tipo    

        sql &= " '" & Rfc_Emisor & "'," '@rfc_ce,                
        sql &= " '" & No_cheque & "'," '@no_cheque,  
        sql &= " '" & no_banco & "'," '@no_banco,  
        sql &= " '" & cuenta_origen & "'," '@cuenta_origen,  
        sql &= " " & Eventos.Sql_hoy(fecha) & "," '@fecha_mov,    
        sql &= " " & Importe & "	," '@importe,                    
        sql &= " '" & id_poliza & "', " '@id_poliza,  
        sql &= " 'T','" & Trim(bancoD) & "', '" & Trim(cuentaD.Replace("/", "")) & "' " '@tipo_ce, 
        sql &= " )"
        If Eventos.Comando_sql(sql) > 0 Then
            Eventos.Insertar_usuariol("InsertarCeT", sql)
        End If
    End Sub
    Private Sub Inserta_Comprobante_Fiscal(ByVal id_poliza As String, ByVal anio As Integer, ByVal mes As String,
                           ByVal Rfc_Emisor As String, ByVal fecha As String,
                           ByVal Folio_Fiscal As String, ByVal Referencia As String, ByVal Importe As Decimal)
        Dim sql As String = "INSERT INTO dbo.Facturas"
        sql &= " 	(                   "
        sql &= " 	ID_anio,                    "
        sql &= " 	ID_mes,                     "
        sql &= " 	Id_Poliza,                  "
        sql &= " 	RFC_Emisor,                 "
        sql &= " 	Folio_Fiscal,               "
        sql &= " 	Referencia,                 "
        sql &= " 	Importe,                "
        sql &= " 	Fecha_Comprobante,          "
        sql &= " 	Detalle_Comp_Electronico,Id_Empresa"
        sql &= "    )                         "
        sql &= " VALUES "
        sql &= "(                             "
        sql &= " '" & anio & "',	" '@id_anio,                   
        sql &= " '" & mes & "'," '@id_mes,                    
        sql &= " '" & id_poliza & "'," '@id_poliza,                 
        sql &= " '" & Rfc_Emisor & "'," '@rfc_emisor,                
        sql &= " '" & Folio_Fiscal & "'," '@folio_fiscal,              
        sql &= " '" & Referencia & "'," '@referencia,                
        sql &= " " & Importe & "	," '@importe,                   
        sql &= " " & Eventos.Sql_hoy(fecha) & "," '@fecha_comprobante,         
        sql &= " 'C'," & Me.lstCliente.SelectItem & "" '@detalle_comp_electronico   
        sql &= " )"
        If Eventos.Comando_sql(sql) > 0 Then
            Eventos.Insertar_usuariol("InsertarFacturas", sql)

        End If
    End Sub
    Private Sub Edita_Factura(ByVal Folio_Fiscal As String, ByVal detaclle As String, ByVal Poliza As String)
        Dim sql As String = " UPDATE dbo.Facturas
                        SET Id_Poliza = '" & Poliza & "'
                        WHERE Folio_Fiscal = '" & Folio_Fiscal & "' and Detalle_Comp_Electronico ='" & detaclle & "' "
        If Eventos.Comando_sql(sql) > 0 Then
            Eventos.Insertar_usuariol("EditaFacturas", sql)

        End If
    End Sub
    Private Function Calcula_poliza(ByVal i As Integer)
        Dim mess As String = IIf(Len(Me.TablaImportar.Item(Mes.Index, i).Value) = 1, "0" & Me.TablaImportar.Item(Mes.Index, i).Value, Me.TablaImportar.Item(Mes.Index, i).Value)
        Dim poliza As String = Eventos.Num_polizaS(Me.lstCliente.SelectItem, Checa_tipo(Me.TablaImportar.Item(TipoPoliza.Index, i).Value, Me.lstCliente.SelectItem), Me.TablaImportar.Item(anio.Index, i).Value, mess, Busca_tipificar(Me.TablaImportar.Item(TipoPoliza.Index, i).Value))
        Me.TablaImportar.Item(Psistema.Index, i).Value = poliza
        Return poliza
    End Function
    Private Function Calcula_polizaD(ByVal i As Integer)
        Dim mess As String = IIf(Len(Me.TablaD.Item(MesCD.Index, i).Value) = 1, "0" & Me.TablaD.Item(MesCD.Index, i).Value, Me.TablaD.Item(MesCD.Index, i).Value)
        Dim poliza As String = Eventos.Num_polizaS(Me.lstCliente.SelectItem, Checa_tipo(Me.TablaD.Item(TipPolD.Index, i).Value, Me.lstCliente.SelectItem), Me.TablaD.Item(AnioCD.Index, i).Value, mess, Busca_tipificar(Me.TablaD.Item(TipPolD.Index, i).Value))
        Me.TablaD.Item(PolSD.Index, i).Value = poliza
        Return poliza
    End Function
    Private Function Calcula_polizaC(ByVal i As Integer)
        Dim mess As String = IIf(Len(Me.TablaC.Item(MesComplemento.Index, i).Value) = 1, "0" & Me.TablaC.Item(MesComplemento.Index, i).Value, Me.TablaC.Item(MesComplemento.Index, i).Value)
        Dim poliza As String = Eventos.Num_polizaS(Me.lstCliente.SelectItem, Checa_tipo(Me.TablaC.Item(TipPolComplemento.Index, i).Value, Me.lstCliente.SelectItem), Me.TablaC.Item(AnioComplemento.Index, i).Value, mess, Busca_tipificar(Me.TablaC.Item(TipPolComplemento.Index, i).Value))
        Me.TablaC.Item(PolSD.Index, i).Value = poliza
        Return poliza
    End Function
    Private Function Checa_tipo(ByVal tipo As String, ByVal cliente As Integer)
        Dim clave As String = ""
        Dim sql As String = "SELECT Id_Tipo_Pol_Sat FROM Tipos_Poliza_Sat WHERE Id_Empresa= " & cliente & " AND clave = '" & tipo.Substring(0, 3) & "'"
        Dim ds As DataSet = Eventos.Obtener_DS(sql)
        If ds.Tables(0).Rows.Count > 0 Then
            clave = ds.Tables(0).Rows(0)("Id_Tipo_Pol_Sat")
        Else
            clave = 0
        End If
        Return clave
    End Function
    Private Function Busca_tipificar(ByVal tipos As String)
        Dim tipo As String = ""
        Dim sql As String = " SELECT Id_Tipo_Pol_Sat FROM Tipos_Poliza_Sat WHERE Id_Empresa= " & Me.lstCliente.SelectItem & " AND clave = '" & tipos.Substring(0, 3) & "' "
        Dim ds As DataSet = Eventos.Obtener_DS(sql)
        If ds.Tables(0).Rows.Count > 0 Then
            tipo = ds.Tables(0).Rows(0)(0)
        Else
            tipo = "N/A"
        End If
        Return tipo
    End Function

    Private Sub Guardar_Carga()
        If Me.TablaImportar.Rows.Count >= 1 Then
            For i As Integer = 0 To Me.TablaImportar.Rows.Count - 1
                Dim tabla As String = ""
                If Me.TablaImportar.Item(2, i).Value = "P" Then
                    tabla = "Xml_Complemento"
                Else
                    tabla = "Xml_Sat"
                End If
                Guardar_XML(IIf(IsDBNull(Me.TablaImportar.Item(LetraS.Index, i).Value), "", Me.TablaImportar.Item(LetraS.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(NCuenta.Index, i).Value), "", Me.TablaImportar.Item(NCuenta.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(ContabilizacionC.Index, i).Value), "", Me.TablaImportar.Item(ContabilizacionC.Index, i).Value),
                           Me.TablaImportar.Item(anio.Index, i).Value, Me.TablaImportar.Item(Mes.Index, i).Value, Me.TablaImportar.Item(ImpEf.Index, i).Value, IIf(IsDBNull(Me.TablaImportar.Item(CuentasEfectivo.Index, i).Value), "", Me.TablaImportar.Item(CuentasEfectivo.Index, i).Value),
                           Me.TablaImportar.Item(ImpT.Index, i).Value, IIf(IsDBNull(Me.TablaImportar.Item(BancoOrigen.Index, i).Value), "", Me.TablaImportar.Item(BancoOrigen.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(CuentaO.Index, i).Value), "", Me.TablaImportar.Item(CuentaO.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(Bancodestino.Index, i).Value), "", Me.TablaImportar.Item(Bancodestino.Index, i).Value),
                           IIf(IsDBNull(Me.TablaImportar.Item(Fechat.Index, i).Value), "", Me.TablaImportar.Item(Fechat.Index, i).Value), Me.TablaImportar.Item(ImpC.Index, i).Value, IIf(IsDBNull(Me.TablaImportar.Item(BancosCheques.Index, i).Value), "", Me.TablaImportar.Item(BancosCheques.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(CuentaC.Index, i).Value), "", Me.TablaImportar.Item(CuentaC.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(NoCheque.Index, i).Value), "", Me.TablaImportar.Item(NoCheque.Index, i).Value),
                          IIf(IsDBNull(Me.TablaImportar.Item(FechaC.Index, i).Value), "", Me.TablaImportar.Item(FechaC.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(CuentaBancos.Index, i).Value), "", Me.TablaImportar.Item(CuentaBancos.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(ProvA.Index, i).Value), 0, Me.TablaImportar.Item(ProvA.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(ProvP.Index, i).Value), 0, Me.TablaImportar.Item(ProvP.Index, i).Value),
                           IIf(IsDBNull(Me.TablaImportar.Item(Dif.Index, i).Value), 0, Me.TablaImportar.Item(Dif.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(TipoPoliza.Index, i).Value), "", Me.TablaImportar.Item(TipoPoliza.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(ImpG.Index, i).Value), 0, Me.TablaImportar.Item(ImpG.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(ImpEx.Index, i).Value), 0, Me.TablaImportar.Item(ImpEx.Index, i).Value),
                          IIf(IsDBNull(Me.TablaImportar.Item(IVAR.Index, i).Value), 0, Me.TablaImportar.Item(IVAR.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(PagoA.Index, i).Value), 0, Me.TablaImportar.Item(PagoA.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(TReal.Index, i).Value), 0, Me.TablaImportar.Item(TReal.Index, i).Value), Me.TablaImportar.Item(UCambaria.Index, i).Value, IIf(IsDBNull(Me.TablaImportar.Item(PCambiaria.Index, i).Value), 0, Me.TablaImportar.Item(PCambiaria.Index, i).Value),
                           Me.TablaImportar.Item(ImpD.Index, i).Value, IIf(IsDBNull(Me.TablaImportar.Item(CuntaDev.Index, i).Value), "", Me.TablaImportar.Item(CuntaDev.Index, i).Value), Me.TablaImportar.Item(Id_Xml.Index, i).Value, IIf(IsDBNull(Me.TablaImportar.Item(NumPol.Index, i).Value), "", Me.TablaImportar.Item(NumPol.Index, i).Value),
                           Me.TablaImportar.Item(RISR.Index, i).Value, Me.TablaImportar.Item(RIVA.Index, i).Value, tabla, IIf(IsDBNull(Me.TablaImportar.Item(CtaBD.Index, i).Value), "", Me.TablaImportar.Item(CtaBD.Index, i).Value),
                           IIf(IsDBNull(Me.TablaImportar.Item(Ajus.Index, i).Value), 0, Me.TablaImportar.Item(Ajus.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(CtaAjustes.Index, i).Value), "", Me.TablaImportar.Item(CtaAjustes.Index, i).Value),
                           IIf(IsDBNull(Me.TablaImportar.Item(Anti.Index, i).Value), 0, Me.TablaImportar.Item(Anti.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(CtaAnti.Index, i).Value), "", Me.TablaImportar.Item(CtaAnti.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(ImpProvis.Index, i).Value), 0, Me.TablaImportar.Item(ImpProvis.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(CtaOrden.Index, i).Value), "", Me.TablaImportar.Item(CtaOrden.Index, i).Value),
                                IIf(IsDBNull(Me.TablaImportar.Item(ImpT2.Index, i).Value), 0, Me.TablaImportar.Item(ImpT2.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(BankOT2.Index, i).Value), "", Me.TablaImportar.Item(BankOT2.Index, i).Value),
                    IIf(IsDBNull(Me.TablaImportar.Item(CtaOT2.Index, i).Value), "", Me.TablaImportar.Item(CtaOT2.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(BankDT2.Index, i).Value), "", Me.TablaImportar.Item(BankDT2.Index, i).Value),
                    IIf(IsDBNull(Me.TablaImportar.Item(CtaDT2.Index, i).Value), "", Me.TablaImportar.Item(CtaDT2.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(FT2.Index, i).Value), "", Me.TablaImportar.Item(FT2.Index, i).Value),
                    IIf(IsDBNull(Me.TablaImportar.Item(CtaT2.Index, i).Value), "", Me.TablaImportar.Item(CtaT2.Index, i).Value), IIf(IsDBNull(Me.TablaImportar.Item(CtaProv.Index, i).Value), "", Me.TablaImportar.Item(CtaProv.Index, i).Value),
                    IIf(IsDBNull(Me.TablaImportar.Item(Ser.Index, i).Value), "", Me.TablaImportar.Item(Ser.Index, i).Value),
IIf(IsDBNull(Me.TablaImportar.Item(BancoDE.Index, i).Value), "", Me.TablaImportar.Item(BancoDE.Index, i).Value),
IIf(IsDBNull(Me.TablaImportar.Item(CtaDestinoChe.Index, i).Value), "", Me.TablaImportar.Item(CtaDestinoChe.Index, i).Value),
IIf(IsDBNull(Me.TablaImportar.Item(CtaCheque.Index, i).Value), "", Me.TablaImportar.Item(CtaCheque.Index, i).Value))


            Next
            RadMessageBox.Show("Proceso Guardado Completado ...", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
        End If
    End Sub
    Private Sub Guardar_XML(ByVal Letra_Sat As String, ByVal Nombre_cuenta As String, ByVal Clave As String,
                            ByVal Anio_Contable As String, ByVal Mes_Contable As String, ByVal Imp_Efectivo As Decimal, ByVal Cuenta_Efectivo As String,
                            ByVal Imp_Transf As Decimal, ByVal Banco_Origen As String, ByVal Cuenta_Origen As String, ByVal Banco_Destino As String,
                            ByVal Fecha_Transaccion As String, ByVal Imp_Cheque As Decimal, ByVal Nom_Banco_Ch As String, ByVal Cuenta_Origen_Ch As String, ByVal No_Cheque As String,
                            ByVal Fecha_Ch As String, ByVal Cuenta_Bancos As String, ByVal Provision_Acreedor As Decimal, ByVal Provision_Proveedor As Decimal,
                            ByVal Diferencia As Decimal, ByVal Tipo_Poliza As String, ByVal Imp_Grabado As Decimal, ByVal Imp_Exento As Decimal,
                            ByVal IVA_real As Decimal, ByVal Prc_Pago_Acumulado As Decimal, ByVal Total_Real As Decimal, ByVal Utilidad_Cambiaria As Decimal, ByVal Perdida_Cambiaria As Decimal,
                            ByVal Imp_Devolucion As Decimal, ByVal Cuenta_Devolucion As String, ByVal Id_Registro_Xml As Integer, ByVal numpol As String, ByVal risr As Decimal, ByVal riva As Decimal,
                            ByVal Tabla As String, ByVal ctadestino As String, ByVal ajus As Decimal, ByVal ctaajus As String, ByVal anti As Decimal, ByVal ctaanti As String, ByVal ImpProvis As Decimal,
                            ByVal Cta_Orden As String, ByVal Imp_Transf1 As Decimal, ByVal Banco_Origen1 As String, ByVal Cuenta_Origen1 As String, ByVal Banco_Destino1 As String,
                            ByVal Cuenta_Destino1 As String, ByVal Fecha_Transaccion1 As String, ByVal Cuenta_Bancos1 As String, ByVal provi As String, ByVal ser As String,
                            ByVal Banco_Dest_Cheque As String, ByVal Cuenta_Dest_Cheque As String, ByVal Cuenta_Cheques As String)
        Dim sql As String = "UPDATE dbo." & Tabla & "
                SET 		Letra_Sat = '" & Letra_Sat & "',
                	Nombre_cuenta = '" & Nombre_cuenta & "',
                	Clave = '" & Clave & "',
                	Anio_Contable = '" & Anio_Contable & "',
                	Mes_Contable = '" & Mes_Contable & "',
                	Imp_Efectivo = " & Imp_Efectivo & ",
                	Cuenta_Efectivo = '" & Cuenta_Efectivo & "',
                	Imp_Transf = " & Imp_Transf & ",
                	Banco_Origen = '" & Banco_Origen & "',
                	Cuenta_Origen = '" & Cuenta_Origen & "',
                	Banco_Destino = '" & Banco_Destino & "',
                	Fecha_Transaccion = " & Eventos.Sql_hoy(Fecha_Transaccion) & ",
                	Imp_Cheque =" & Imp_Cheque & ",
                	Nom_Banco_Ch = '" & Nom_Banco_Ch & "',
                	Cuenta_Origen_Ch = '" & Cuenta_Origen_Ch & "',
                	No_Cheque = '" & No_Cheque & "',
                	Fecha_Ch = " & Eventos.Sql_hoy(Fecha_Ch) & ",
                	Cuenta_Bancos = '" & Cuenta_Bancos & "',
                	Provision_Acreedor = " & Provision_Acreedor & ",
                	Provision_Proveedor = " & Provision_Proveedor & ",
                	Diferencia = " & Diferencia & ",
                	Tipo_Poliza = '" & Tipo_Poliza & "',
                	Imp_Grabado =  " & Imp_Grabado & ",
                	Imp_Exento =  " & Imp_Exento & ",
                	IVA_real =  " & IVA_real & ",
                	Prc_Pago_Acumulado =  " & Prc_Pago_Acumulado & ",
                	Total_Real =  " & Total_Real & ",
                	Utilidad_Cambiaria =  " & Utilidad_Cambiaria & ",
                	Perdida_Cambiaria =  " & Perdida_Cambiaria & ",
                	Imp_Devolucion =  " & Imp_Devolucion & ",
                	Cuenta_Devolucion = '" & Cuenta_Devolucion & "', 
                    Numpol= '" & Trim(numpol) & "', 
                    RIRS= " & risr & ", 
                    RIVA= " & riva & ", 
                    Cuenta_Destino= '" & ctadestino & "',
                    Ajuste= " & ajus & ", 
                    Anticipos= " & anti & ",  
                    Cta_Ajuste= '" & ctaajus & "', 
                    Cta_Anticipos= '" & ctaanti & "',
                    Imp_Provision= " & ImpProvis & ",
                    Cta_Orden= '" & Cta_Orden & "',
                    Imp_Transf1 = " & Imp_Transf1 & " ,       
                    Banco_Origen1 = '" & Banco_Origen1 & "',	 
                    Cuenta_Origen1 = '" & Cuenta_Origen1 & "',	 
                    Banco_Destino1 = '" & Banco_Destino1 & "',
                    Cuenta_Destino1 = '" & Cuenta_Destino1 & "'	,	 
                    Fecha_Transaccion1 = '" & Fecha_Transaccion1 & "',	 
                    Cuenta_Bancos1  = '" & Cta_Orden & "',Cta_Provision='" & provi & "' ,Ser='" & ser & "',
                    Banco_Dest_Cheque = '" & Banco_Dest_Cheque & "',	 
                    Cuenta_Dest_Cheque  = '" & Cuenta_Dest_Cheque & "', Cuenta_Cheques='" & Cuenta_Cheques & "'
                WHERE Id_Registro_Xml = " & Id_Registro_Xml & ""
        If Eventos.Comando_sql(sql) > 0 Then
            Eventos.Insertar_usuariol("GuardaXMLC", sql)
        End If
    End Sub
    Private Sub CmdGuardar_Click(sender As Object, e As EventArgs) Handles CmdGuardar.Click
        Guardar_Carga()
    End Sub

    Private Sub CrearCuentaCargoToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles CrearCuentaCargoToolStripMenuItem.Click
        'Crear Cuenta en catalogo del cliente para el Cargo
        If Me.TCEmitidas.SelectedIndex = 0 Then
            Dim leyenda As String = ""
            Dim dsconta As DataSet
            Dim columna As Integer = Me.TablaImportar.CurrentCell.ColumnIndex
            Dim Nombre As String
            Nombre = Me.TablaImportar.Columns.Item(Me.TablaImportar.CurrentCell.ColumnIndex).Name.ToString
            Me.LstTexto.Cargar(" Select '','' ")
            Dim consulta As String = "SELECT 'Serie/ '+  Rtrim(Series.Serie) + ' '+  Rtrim(Catalogo_de_Cuentas.Descripcion) + '-'+ convert(nvarchar,Catalogo_de_Cuentas.cuenta,103) as Cuenta, " +
                                "Catalogo_de_Cuentas.cuenta As cta FROM Catalogo_de_Cuentas  INNER JOIN Series On Series.Cuenta = Catalogo_de_Cuentas.Cuenta " +
                                "WHERE Nivel1 In('4010','4015') AND Nivel2 >0 AND Nivel3 = '0000'and Catalogo_de_Cuentas.Id_Empresa =  " & Me.lstCliente.SelectItem & " AND Clave in( 'I','IPC') " +
                                " ORDER BY cta"
            Select Case Nombre ' Cambiar Consulta por series

                Case "ContabilizacionC"

                    dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas WHERE Nivel1 >0 AND Nivel2 >0 AND Nivel3 = '0000' AND Clave = '" & Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value & "' and Id_Empresa = " & Me.lstCliente.SelectItem & " ORDER BY cta")
                    '  dsconta = Eventos.Obtener_DS(consulta)
                    leyenda = Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value
                Case "NCuenta"
                    dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas WHERE Nivel1 >0 AND Nivel2 >0 AND Nivel3 = '0000' AND Clave = '" & Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value & "' and Id_Empresa = " & Me.lstCliente.SelectItem & " ORDER BY cta")
                    'dsconta = Eventos.Obtener_DS(consulta)
                    leyenda = Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value
                Case "CuentasEfectivo"
                    dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1010' and Nivel2 > 0 ORDER BY cta")
                    leyenda = " Efectivo"
                Case "CuentaBancos"
                    dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1020' and Nivel2 > 0 ORDER BY cta")
                    leyenda = " Bancos"
                Case "CtaAjustes"
                    dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & "   ORDER BY cta")
                    leyenda = " Ajustes"
                Case "CtaAnti"
                    If Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value <> Nothing Then
                        If Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value = "C" Or Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value = "CPP" Then
                            dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1200' and Nivel2 > 0   ORDER BY cta")
                            leyenda = " Anticipos Proveedores"
                        ElseIf Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value = "GG" Or Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value = "GGPP" Then
                            dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1210' and Nivel2 > 0   ORDER BY cta")
                            leyenda = " Anticipos Acreedores"
                        End If
                    End If

            End Select
            Dim cuenta As String = ""
            Dim act(,) As String
            ReDim act(2, dsconta.Tables(0).Rows.Count + 1)
            For s As Integer = 0 To dsconta.Tables(0).Rows.Count - 1
                act(0, s) = dsconta.Tables(0).Rows(s)(0)
                Debug.Print(dsconta.Tables(0).Rows(s)(0))
                act(1, s) = "0"
            Next
            With My.Forms.DialogUnaSeleccion
                .limpiar()
                .Titulo = Eventos.titulo_app
                .Texto = "Selecciona la Cuenta Madre para " & leyenda & ":"
                .MinSeleccion = 1
                .MaxSeleccion = 1
                .elementos = act
                .ShowDialog()
                act = .elementos
                If .DialogResult = Windows.Forms.DialogResult.Cancel Then
                    Exit Sub
                End If
            End With

            Dim Letra As String = ""
            For s As Integer = 0 To act.GetLength(1)
                If act(1, s) = "1" Then
                    Letra = act(0, s)
                    Exit For
                End If
            Next
            Dim cadena As String = Trim(Letra)
            Dim posi As Integer = InStr(1, cadena, "-", CompareMethod.Binary)
            Dim cuantos As Integer = Len(cadena) - Len(cadena.Substring(0, posi))
            Letra = cadena.Substring(posi, cuantos)

            '    ' Se crea cuenta de tercer nivel
            If Verifica_existencia(Letra.ToString.Substring(0, 4), Letra.ToString.Substring(4, 4), Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value, Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value) = True Then
                cuenta = Val(ObtenerValorDB("Catalogo_de_cuentas", "CASE WHEN max (Nivel3 ) + 1 IS NULL THEN 1 WHEN max (Nivel3 ) + 1 IS NOT NULL THEN   max (Nivel3 ) + 1 END AS C ", "  Nivel1 =" & Letra.ToString.Substring(0, 4) & "  AND Nivel2 =" & Letra.ToString.Substring(4, 4) & " and Id_Empresa = " & Me.lstCliente.SelectItem & " ", True))
                cuenta = Format(cuenta).PadLeft(4, "0")
                Crear_cuenta(Letra.ToString.Substring(0, 4), Letra.ToString.Substring(4, 4), cuenta,
                                         "0000", Letra.Substring(0, 8) & cuenta & "0000", Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & " " & Me.TablaImportar.Item(NomEmisor.Index, Me.TablaImportar.CurrentRow.Index).Value,
                                        Me.lstCliente.SelectItem, Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value, Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value)
            Else
                RadMessageBox.SetThemeName("MaterialBlueGrey")
                RadMessageBox.Show("La cuenta ya existe ...", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Exclamation)
            End If

            'End If
            Me.TablaImportar_CellEndEdit(Me.TablaImportar, Nothing)
        ElseIf Me.TCEmitidas.SelectedIndex = 1 Then
            Dim leyenda As String = ""
            Dim dsconta As DataSet
            Dim columna As Integer = Me.TablaD.CurrentCell.ColumnIndex
            Dim Nombre As String
            Nombre = Me.TablaD.Columns.Item(Me.TablaD.CurrentCell.ColumnIndex).Name.ToString
            Me.LstTexto.Cargar(" Select '','' ")
            Dim consulta As String = "SELECT 'Serie/ '+  Rtrim(Series.Serie) + ' '+  Rtrim(Catalogo_de_Cuentas.Descripcion) + '-'+ convert(nvarchar,Catalogo_de_Cuentas.cuenta,103) as Cuenta, " +
                                "Catalogo_de_Cuentas.cuenta As cta FROM Catalogo_de_Cuentas  INNER JOIN Series On Series.Cuenta = Catalogo_de_Cuentas.Cuenta " +
                                "WHERE Nivel1 In('4010','4015') AND Nivel2 >0 AND Nivel3 = '0000'and Catalogo_de_Cuentas.Id_Empresa =  " & Me.lstCliente.SelectItem & " AND Clave in( 'I','IPC') " +
                                " ORDER BY cta"
            Select Case Nombre
                Case "LetraCd"
                    ' dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas WHERE Nivel1 >0 AND Nivel2 >0 AND Nivel3 = '0000' AND Clave = '" & Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value & "' and Id_Empresa = " & Me.lstCliente.SelectItem & " ORDER BY cta")
                    leyenda = Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value
                    dsconta = Eventos.Obtener_DS(consulta)
                Case "NomCuentaD"
                    ' dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas WHERE Nivel1 >0 AND Nivel2 >0 AND Nivel3 = '0000' AND Clave = '" & Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value & "' and Id_Empresa = " & Me.lstCliente.SelectItem & " ORDER BY cta")
                    dsconta = Eventos.Obtener_DS(consulta)
                    leyenda = Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value
                Case "CtaEfD"
                    dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1010' and Nivel2 > 0  ORDER BY cta")
                    leyenda = " Efectivo"
                Case "CtaBancosD"
                    dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1020' and Nivel2 > 0 ORDER BY cta")
                    leyenda = " Bancos"
                Case "CtaAD"
                    dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & "   ORDER BY cta")
                    leyenda = " Ajustes"
                Case "CtaAntiD"
                    dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1070' and Nivel2 > 0   ORDER BY cta")
                    leyenda = " Anticipos"
            End Select
            Dim cuenta As String = ""
            Dim act(,) As String
            ReDim act(2, dsconta.Tables(0).Rows.Count + 1)
            For s As Integer = 0 To dsconta.Tables(0).Rows.Count - 1
                act(0, s) = dsconta.Tables(0).Rows(s)(0)
                Debug.Print(dsconta.Tables(0).Rows(s)(0))
                act(1, s) = "0"
            Next
            With My.Forms.DialogUnaSeleccion
                .limpiar()
                .Titulo = Eventos.titulo_app
                .Texto = "Selecciona la Cuenta Madre para " & leyenda & ":"
                .MinSeleccion = 1
                .MaxSeleccion = 1
                .elementos = act
                .ShowDialog()
                act = .elementos
                If .DialogResult = Windows.Forms.DialogResult.Cancel Then
                    Exit Sub
                End If
            End With

            Dim Letra As String = ""
            For s As Integer = 0 To act.GetLength(1)
                If act(1, s) = "1" Then
                    Letra = act(0, s)
                    Exit For
                End If
            Next
            Dim cadena As String = Trim(Letra)
            Dim posi As Integer = InStr(1, cadena, "-", CompareMethod.Binary)
            Dim cuantos As Integer = Len(cadena) - Len(cadena.Substring(0, posi))
            Letra = cadena.Substring(posi, cuantos)
            Dim ds As DataSet = Eventos.Obtener_DS("Select Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta from Catalogo_de_cuentas where nivel1 = '" & Letra.ToString.Substring(0, 4) & "' and Nivel2 = '" & Letra.ToString.Substring(4, 4) & "' and nivel3 > 0 and Nivel4 = '0000' and Id_Empresa = " & Me.lstCliente.SelectItem & " order by cta")
            If ds.Tables(0).Rows.Count > 0 Then
                Dim actv(,) As String
                ReDim actv(2, ds.Tables(0).Rows.Count + 1)
                For s As Integer = 0 To ds.Tables(0).Rows.Count - 1
                    actv(0, s) = ds.Tables(0).Rows(s)(0)
                    Debug.Print(ds.Tables(0).Rows(s)(0))
                    actv(1, s) = "0"
                Next
                With My.Forms.DialogUnaSeleccion
                    .limpiar()
                    .Titulo = Eventos.titulo_app
                    .Texto = "Selecciona la Sub Cuenta de " & cadena & ":"
                    .MinSeleccion = 1
                    .MaxSeleccion = 1
                    .elementos = actv
                    .ShowDialog()
                    actv = .elementos
                    If .DialogResult = Windows.Forms.DialogResult.Cancel Then
                        Exit Sub
                    End If
                End With

                Dim Sub_cuenta As String = ""
                For s As Integer = 0 To actv.GetLength(1)
                    If actv(1, s) = "1" Then
                        Sub_cuenta = actv(0, s)
                        Exit For
                    End If
                Next
                ' Se crea cuenta de cuarto nivel
                cadena = Trim(Sub_cuenta)
                posi = InStr(1, cadena, "-", CompareMethod.Binary)
                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
                Sub_cuenta = cadena.Substring(posi, cuantos)

                If Verifica_existencia(Sub_cuenta.ToString.Substring(0, 4), Sub_cuenta.ToString.Substring(4, 4), Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value, Me.TablaD.Item(RFCED.Index, Me.TablaD.CurrentRow.Index).Value) = True Then
                    cuenta = Val(ObtenerValorDB("Catalogo_de_cuentas", "CASE WHEN max (Nivel4 ) + 1 IS NULL THEN 1 WHEN max (Nivel4 ) + 1 IS NOT NULL THEN   max (Nivel4 ) + 1 END AS C ", "  Nivel1 =" & Sub_cuenta.ToString.Substring(0, 4) & "  AND Nivel2 =" & Sub_cuenta.ToString.Substring(4, 4) & " AND Nivel3=" & Sub_cuenta.ToString.Substring(8, 4) & " AND Nivel4 >=" & Sub_cuenta.ToString.Substring(12, 4) & " and Id_Empresa = " & Me.lstCliente.SelectItem & "", True))
                    cuenta = Format(cuenta).PadLeft(4, "0")
                    Crear_cuenta(Sub_cuenta.ToString.Substring(0, 4), Sub_cuenta.ToString.Substring(4, 4), Sub_cuenta.ToString.Substring(8, 4),
                                           cuenta, Sub_cuenta.Substring(0, 12) & cuenta, Me.TablaD.Item(RFCED.Index, Me.TablaD.CurrentRow.Index).Value & " " & Me.TablaD.Item(NomEd.Index, Me.TablaD.CurrentRow.Index).Value,
                                           Me.lstCliente.SelectItem, Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value, Me.TablaD.Item(RFCED.Index, Me.TablaD.CurrentRow.Index).Value)
                Else
                    RadMessageBox.SetThemeName("MaterialBlueGrey")
                    RadMessageBox.Show("La cuenta ya existe ...", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Exclamation)
                End If

            Else
                ' Se crea cuenta de tercer nivel
                If Verifica_existencia(Letra.ToString.Substring(0, 4), Letra.ToString.Substring(4, 4), Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value, Me.TablaD.Item(RFCED.Index, Me.TablaD.CurrentRow.Index).Value) = True Then
                    cuenta = Val(ObtenerValorDB("Catalogo_de_cuentas", "CASE WHEN max (Nivel3 ) + 1 IS NULL THEN 1 WHEN max (Nivel3 ) + 1 IS NOT NULL THEN   max (Nivel3 ) + 1 END AS C ", "  Nivel1 =" & Letra.ToString.Substring(0, 4) & "  AND Nivel2 =" & Letra.ToString.Substring(4, 4) & " and Id_Empresa = " & Me.lstCliente.SelectItem & " ", True))
                    cuenta = Format(cuenta).PadLeft(4, "0")
                    Crear_cuenta(Letra.ToString.Substring(0, 4), Letra.ToString.Substring(4, 4), cuenta,
                                       "0000", Letra.Substring(0, 8) & cuenta & "0000", Me.TablaD.Item(RFCED.Index, Me.TablaD.CurrentRow.Index).Value & " " & Me.TablaD.Item(NomEd.Index, Me.TablaD.CurrentRow.Index).Value,
                                       Me.lstCliente.SelectItem, Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value, Me.TablaD.Item(RFCED.Index, Me.TablaD.CurrentRow.Index).Value)
                Else
                    RadMessageBox.SetThemeName("MaterialBlueGrey")
                    RadMessageBox.Show("La cuenta ya existe ...", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Exclamation)
                End If

            End If
        ElseIf Me.TCEmitidas.SelectedIndex = 2 Then
            Dim leyenda As String = ""
            Dim dsconta As DataSet
            Dim columna As Integer = Me.TablaC.CurrentCell.ColumnIndex
            Dim Nombre As String
            Nombre = Me.TablaC.Columns.Item(Me.TablaC.CurrentCell.ColumnIndex).Name.ToString
            Me.LstTexto.Cargar(" Select '','' ")

            Dim consulta As String = "SELECT 'Serie/ '+  Rtrim(Series.Serie) + ' '+  Rtrim(Catalogo_de_Cuentas.Descripcion) + '-'+ convert(nvarchar,Catalogo_de_Cuentas.cuenta,103) as Cuenta, " +
                                "Catalogo_de_Cuentas.cuenta As cta FROM Catalogo_de_Cuentas  INNER JOIN Series On Series.Cuenta = Catalogo_de_Cuentas.Cuenta " +
                                "WHERE Nivel1 In('4010','4015') AND Nivel2 >0 AND Nivel3 = '0000'and Catalogo_de_Cuentas.Id_Empresa =  " & Me.lstCliente.SelectItem & " AND Clave in( 'I','IPC') " +
                                " ORDER BY cta"
            Select Case Nombre
                Case "LetraContabilidadComplemento"
                    ' dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas WHERE Nivel1 >0 AND Nivel2 >0 AND Nivel3 = '0000' AND Clave = '" & Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value & "' and Id_Empresa = " & Me.lstCliente.SelectItem & " ORDER BY cta")
                    dsconta = Eventos.Obtener_DS(consulta)
                    leyenda = Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value
                Case "NomCtaComplemento"
                    ' dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas WHERE Nivel1 >0 AND Nivel2 >0 AND Nivel3 = '0000' AND Clave = '" & Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value & "' and Id_Empresa = " & Me.lstCliente.SelectItem & "  ORDER BY cta")
                    dsconta = Eventos.Obtener_DS(consulta)
                    leyenda = Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value
                Case "CtaEfComplemento"
                    dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1010' and Nivel2 > 0 ORDER BY cta")
                    leyenda = " Efectivo"
                Case "CtaBancosComplemento"
                    dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1020' and Nivel2 > 0 ORDER BY cta")
                    leyenda = " Bancos"
                Case "CtaAjusComplemento"
                    dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & "   ORDER BY cta")
                    leyenda = " Ajustes"
                Case "CtaAntiComplemento"

                    If Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value <> Nothing Then
                        If Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value = "C" Or Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value = "CPP" Then
                            dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1200' and Nivel2 > 0   ORDER BY cta")
                            leyenda = " Anticipos Proveedores"
                        ElseIf Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value = "GG" Or Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value = "GGPP" Then
                            dsconta = Eventos.Obtener_DS("SELECT  Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta FROM Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1210' and Nivel2 > 0   ORDER BY cta")
                            leyenda = " Anticipos Acreedores"
                        End If
                    End If
            End Select
            Dim cuenta As String = ""
            Dim act(,) As String
            ReDim act(2, dsconta.Tables(0).Rows.Count + 1)
            For s As Integer = 0 To dsconta.Tables(0).Rows.Count - 1
                act(0, s) = dsconta.Tables(0).Rows(s)(0)
                Debug.Print(dsconta.Tables(0).Rows(s)(0))
                act(1, s) = "0"
            Next
            With My.Forms.DialogUnaSeleccion
                .limpiar()
                .Titulo = Eventos.titulo_app
                .Texto = "Selecciona la Cuenta Madre para " & leyenda & ":"
                .MinSeleccion = 1
                .MaxSeleccion = 1
                .elementos = act
                .ShowDialog()
                act = .elementos
                If .DialogResult = Windows.Forms.DialogResult.Cancel Then
                    Exit Sub
                End If
            End With

            Dim Letra As String = ""
            For s As Integer = 0 To act.GetLength(1)
                If act(1, s) = "1" Then
                    Letra = act(0, s)
                    Exit For
                End If
            Next
            Dim cadena As String = Trim(Letra)
            Dim posi As Integer = InStr(1, cadena, "-", CompareMethod.Binary)
            Dim cuantos As Integer = Len(cadena) - Len(cadena.Substring(0, posi))
            Letra = cadena.Substring(posi, cuantos)
            Dim ds As DataSet = Eventos.Obtener_DS("Select Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta, cuenta as cta from Catalogo_de_cuentas where nivel1 = '" & Letra.ToString.Substring(0, 4) & "' and Nivel2 = '" & Letra.ToString.Substring(4, 4) & "' and nivel3 > 0 and Nivel4 = '0000' and Id_Empresa = " & Me.lstCliente.SelectItem & " order by cta")
            If ds.Tables(0).Rows.Count > 0 Then
                Dim actv(,) As String
                ReDim actv(2, ds.Tables(0).Rows.Count + 1)
                For s As Integer = 0 To ds.Tables(0).Rows.Count - 1
                    actv(0, s) = ds.Tables(0).Rows(s)(0)
                    Debug.Print(ds.Tables(0).Rows(s)(0))
                    actv(1, s) = "0"
                Next
                With My.Forms.DialogUnaSeleccion
                    .limpiar()
                    .Titulo = Eventos.titulo_app
                    .Texto = "Selecciona la Sub Cuenta de " & cadena & ":"
                    .MinSeleccion = 1
                    .MaxSeleccion = 1
                    .elementos = actv
                    .ShowDialog()
                    actv = .elementos
                    If .DialogResult = Windows.Forms.DialogResult.Cancel Then
                        Exit Sub
                    End If
                End With

                Dim Sub_cuenta As String = ""
                For s As Integer = 0 To actv.GetLength(1)
                    If actv(1, s) = "1" Then
                        Sub_cuenta = actv(0, s)
                        Exit For
                    End If
                Next
                ' Se crea cuenta de cuarto nivel
                cadena = Trim(Sub_cuenta)
                posi = InStr(1, cadena, "-", CompareMethod.Binary)
                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
                Sub_cuenta = cadena.Substring(posi, cuantos)

                If Verifica_existencia(Sub_cuenta.ToString.Substring(0, 4), Sub_cuenta.ToString.Substring(4, 4), Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value, Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value) = True Then
                    cuenta = Val(ObtenerValorDB("Catalogo_de_cuentas", "CASE WHEN max (Nivel4 ) + 1 IS NULL THEN 1 WHEN max (Nivel4 ) + 1 IS NOT NULL THEN   max (Nivel4 ) + 1 END AS C ", "  Nivel1 =" & Sub_cuenta.ToString.Substring(0, 4) & "  AND Nivel2 =" & Sub_cuenta.ToString.Substring(4, 4) & " AND Nivel3=" & Sub_cuenta.ToString.Substring(8, 4) & " AND Nivel4 >=" & Sub_cuenta.ToString.Substring(12, 4) & " and Id_Empresa = " & Me.lstCliente.SelectItem & "", True))
                    cuenta = Format(cuenta).PadLeft(4, "0")
                    Crear_cuenta(Sub_cuenta.ToString.Substring(0, 4), Sub_cuenta.ToString.Substring(4, 4), Sub_cuenta.ToString.Substring(8, 4),
                                           cuenta, Sub_cuenta.Substring(0, 12) & cuenta, Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value & " " & Me.TablaC.Item(NEmComplemento.Index, Me.TablaC.CurrentRow.Index).Value,
                                           Me.lstCliente.SelectItem, Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value, Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value)
                Else
                    RadMessageBox.SetThemeName("MaterialBlueGrey")
                    RadMessageBox.Show("La cuenta ya existe ...", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Exclamation)
                End If

            Else
                ' Se crea cuenta de tercer nivel
                If Verifica_existencia(Letra.ToString.Substring(0, 4), Letra.ToString.Substring(4, 4), Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value, Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value) = True Then
                    cuenta = Val(ObtenerValorDB("Catalogo_de_cuentas", "CASE WHEN max (Nivel3 ) + 1 IS NULL THEN 1 WHEN max (Nivel3 ) + 1 IS NOT NULL THEN   max (Nivel3 ) + 1 END AS C ", "  Nivel1 =" & Letra.ToString.Substring(0, 4) & "  AND Nivel2 =" & Letra.ToString.Substring(4, 4) & " and Id_Empresa = " & Me.lstCliente.SelectItem & "", True))
                    cuenta = Format(cuenta).PadLeft(4, "0")
                    Crear_cuenta(Letra.ToString.Substring(0, 4), Letra.ToString.Substring(4, 4), cuenta,
                                       "0000", Letra.Substring(0, 8) & cuenta & "0000", Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value & " " & Me.TablaC.Item(NEmComplemento.Index, Me.TablaC.CurrentRow.Index).Value,
                                       Me.lstCliente.SelectItem, Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value, Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value)
                Else
                    RadMessageBox.SetThemeName("MaterialBlueGrey")
                    RadMessageBox.Show("La cuenta ya existe ...", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Exclamation)
                End If

            End If
        End If

    End Sub
    Private Sub Crear_cuenta(ByVal nivel1 As String, ByVal nivel2 As String, ByVal nivel3 As String,
                             ByVal nivel4 As String, ByVal cuenta As String, ByVal descripcion As String, ByVal cliente As Integer, ByVal letra As String, ByVal RFC As String)
        Dim ds As DataSet = Eventos.Obtener_DS("Select Naturaleza,Clasificacion,Balanza,Cta_ceros,Cta_Cargo_Cero,Cta_Abono_Cero from Catalogo_de_Cuentas where nivel1 ='" & cuenta.ToString.Substring(0, 4) & "' and Id_Empresa = " & cliente & "  ")

        If ds.Tables(0).Rows.Count > 0 Then
            Dim sql As String = ""
            sql = "INSERT INTO dbo.Catalogo_de_Cuentas "
            sql &= "("
            sql &= "Nivel1, "
            sql &= "Nivel2,"
            sql &= "Nivel3,"
            sql &= "Nivel4,"
            sql &= "Cuenta,"
            sql &= "Descripcion,"
            sql &= "Naturaleza,"
            sql &= "Clasificacion,"
            sql &= "Codigo_Agrupador,"
            If RFC <> "" Then
                sql &= "RFC,"
            Else
                sql &= "RFC,"
            End If
            sql &= "Id_Empresa,clave, "
            sql &= "Balanza,"
            sql &= "Cta_ceros,  "
            sql &= "Cta_Cargo_Cero,"
            sql &= "Cta_Abono_Cero  "

            sql &= "	)  "
            sql &= "VALUES  "
            sql &= "	(  "
            sql &= "	'" & nivel1 & "'," '@nivel1
            sql &= "	'" & nivel2 & "'," '@nivel2
            sql &= "	'" & nivel3 & "'," '@nivel3
            sql &= "	'" & nivel4 & "'," '@nivel4
            sql &= "	'" & cuenta & "'," '@cuenta
            If Len(descripcion) >= 50 Then
                sql &= "	'" & descripcion.Substring(0, 48) & "'," '@descripcion
            Else
                sql &= "	'" & descripcion & "'," '@descripcion
            End If
            sql &= "	'" & Trim(ds.Tables(0).Rows(0)("Naturaleza")) & "'," '@naturaleza
            sql &= "	'" & Trim(ds.Tables(0).Rows(0)("Clasificacion")) & "'," '@clasificacion
            Dim su As String = ""
            If (nivel4 <> "0000" Or nivel3 <> "0000") And nivel2 <> "0000" Then
                su = nivel3.Substring(2, 2)
            End If
            sql &= "	'" & nivel1.ToString.Substring(0, 3) & su & "'," '@codigo_agrupador
            If RFC = "" Then
                sql &= "	NULL," '@RFC
            Else
                sql &= "	'" & RFC & "'," '@RFC
            End If
            sql &= "	" & cliente & " , '" & Trim(letra) & "'," '@Id_Empresa    

            sql &= "	" & Eventos.Bool2(Trim(ds.Tables(0).Rows(0)("Balanza"))) & "," '@Balanza
            sql &= "	" & Eventos.Bool2(Trim(ds.Tables(0).Rows(0)("Cta_ceros"))) & "," '@Cta_ceros
            sql &= "	" & Eventos.Bool2(Trim(ds.Tables(0).Rows(0)("Cta_Cargo_Cero"))) & "," '@Balanza
            sql &= "	" & Eventos.Bool2(Trim(ds.Tables(0).Rows(0)("Cta_Abono_Cero"))) & "" '@Cta_ceros
            sql &= "  )"
            ' Ingresar codigo para importar catalogos
            If Eventos.Comando_sql(sql) > 0 Then
                Eventos.Insertar_usuariol("Crear_CtaCarga", sql)
            End If
        Else

        End If
    End Sub
    Private Function Verifica_existencia(ByVal Nivel1 As String, ByVal Nivel2 As String, ByVal clave As String, ByVal rfc As String)
        Dim hacer As Boolean
        Dim sql As String = " Select cuenta from catalogo_De_cuentas where nivel1= '" & Nivel1 & "' and nivel2 = '" & Nivel2 & "' and clave = '" & clave & "' and rfc = '" & rfc & "' AND Id_Empresa =" & Me.lstCliente.SelectItem & ""
        Dim ds As DataSet = Eventos.Obtener_DS(sql)
        If ds.Tables(0).Rows.Count > 0 Then
            hacer = False
        Else
            hacer = True
        End If
        Return hacer
    End Function
    Private Function Verifica_existenciaN3(ByVal Nivel1 As String, ByVal Nivel2 As String, ByVal Nivel3 As String, ByVal clave As String, ByVal rfc As String)
        Dim hacer As Boolean
        Dim sql As String = " Select cuenta from catalogo_De_cuentas where nivel1= '" & Nivel1 & "' and nivel2 = '" & Nivel2 & "' and nivel3 = '" & Nivel3 & "'  and clave = '" & clave & "' and rfc = '" & rfc & "' AND Id_Empresa =" & Me.lstCliente.SelectItem & ""
        Dim ds As DataSet = Eventos.Obtener_DS(sql)
        If ds.Tables(0).Rows.Count > 0 Then
            hacer = False
        Else
            hacer = True
        End If
        Return hacer
    End Function
    Private Sub Crear_detalle(ByVal p As Integer, ByVal pol As String)
        Dim Item As Integer = 1
        Dim PorcenProv, ImpGprov, ImpEprov, ImpIvaPr As Decimal
        PorcenProv = Me.TablaImportar.Item(ImpProvis.Index, p).Value / (Me.TablaImportar.Item(TReal.Index, p).Value - (Me.TablaImportar.Item(RIVA.Index, p).Value + Me.TablaImportar.Item(RISR.Index, p).Value))
        If PorcenProv = 1 Then
            ImpGprov = 0
            ImpEprov = 0
            ImpIvaPr = 0
        Else
            ImpGprov = Me.TablaImportar.Item(ImpG.Index, p).Value * PorcenProv
            ImpEprov = Me.TablaImportar.Item(ImpEx.Index, p).Value * PorcenProv
            ImpIvaPr = Me.TablaImportar.Item(IVAR.Index, p).Value * PorcenProv
        End If

        If Trim(Me.TablaImportar.Item(ContabilizacionC.Index, p).Value) = "I" Then ' Compras 


            Dim cadena As String = ""
            Dim posi As Integer = 0
            Dim cuantos As Integer = 0
            Dim Cuenta_Cargo As String = ""
            Dim Cuenta2 As String = ""




            ' Cargos a las cuentas de Efectivo Transf o Cheques
            If Me.TablaImportar.Item(ImpEf.Index, p).Value > 0 And Me.TablaImportar.Item(ImpT.Index, p).Value > 0 And Me.TablaImportar.Item(ImpC.Index, p).Value > 0 Then 'TODOS
                Item = 1
                cadena = Trim(Me.TablaImportar.Item(CuentasEfectivo.Index, p).Value)
                posi = InStr(1, cadena, "-", CompareMethod.Binary)
                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
                Cuenta_Cargo = cadena.Substring(posi, cuantos)
                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(ImpEf.Index, p).Value, 0, Cuenta_Cargo, "")

                Item = Item + 1

                cadena = Trim(Me.TablaImportar.Item(CuentaBancos.Index, p).Value)
                posi = InStr(1, cadena, "-", CompareMethod.Binary)
                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
                Cuenta_Cargo = cadena.Substring(posi, cuantos)
                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(ImpT.Index, p).Value, 0, Cuenta_Cargo, "")

                Item = Item + 1
                cadena = Trim(Me.TablaImportar.Item(CtaCheque.Index, p).Value)
                posi = InStr(1, cadena, "-", CompareMethod.Binary)
                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
                Cuenta_Cargo = cadena.Substring(posi, cuantos)
                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(ImpC.Index, p).Value, 0, Cuenta_Cargo, Me.TablaImportar.Item(NoCheque.Index, p).Value)
                Item = Item + 1

            ElseIf Me.TablaImportar.Item(ImpEf.Index, p).Value > 0 And Me.TablaImportar.Item(ImpT.Index, p).Value > 0 And Me.TablaImportar.Item(ImpC.Index, p).Value = 0 Then 'Efectivo y Transferencia
                Item = 1
                cadena = Trim(Me.TablaImportar.Item(CuentasEfectivo.Index, p).Value)
                posi = InStr(1, cadena, "-", CompareMethod.Binary)
                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
                Cuenta_Cargo = cadena.Substring(posi, cuantos)
                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(ImpEf.Index, p).Value, 0, Cuenta_Cargo, "")
                Item = Item + 1
                cadena = Trim(Me.TablaImportar.Item(CuentaBancos.Index, p).Value)
                posi = InStr(1, cadena, "-", CompareMethod.Binary)
                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
                Cuenta_Cargo = cadena.Substring(posi, cuantos)
                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(ImpT.Index, p).Value, 0, Cuenta_Cargo, "")
                Item = Item + 1
            ElseIf Me.TablaImportar.Item(ImpEf.Index, p).Value = 0 And Me.TablaImportar.Item(ImpT.Index, p).Value > 0 And Me.TablaImportar.Item(ImpC.Index, p).Value > 0 Then 'Cheque y Transferencia
                Item = 1

                cadena = Trim(Me.TablaImportar.Item(CuentaBancos.Index, p).Value)
                posi = InStr(1, cadena, "-", CompareMethod.Binary)
                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
                Cuenta_Cargo = cadena.Substring(posi, cuantos)
                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(ImpT.Index, p).Value, 0, Cuenta_Cargo, "")
                Item = Item + 1
                cadena = Trim(Me.TablaImportar.Item(CtaCheque.Index, p).Value)
                posi = InStr(1, cadena, "-", CompareMethod.Binary)
                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
                Cuenta_Cargo = cadena.Substring(posi, cuantos)
                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(ImpC.Index, p).Value, 0, Cuenta_Cargo, Me.TablaImportar.Item(NoCheque.Index, p).Value)
                Item = Item + 1

            ElseIf Me.TablaImportar.Item(ImpEf.Index, p).Value > 0 And Me.TablaImportar.Item(ImpT.Index, p).Value = 0 And Me.TablaImportar.Item(ImpC.Index, p).Value > 0 Then 'Cheque y Efecivo
                Item = 1
                cadena = Trim(Me.TablaImportar.Item(CuentasEfectivo.Index, p).Value)
                posi = InStr(1, cadena, "-", CompareMethod.Binary)
                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
                Cuenta_Cargo = cadena.Substring(posi, cuantos)
                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(ImpEf.Index, p).Value, 0, Cuenta_Cargo, "")
                Item = Item + 1
                cadena = Trim(Me.TablaImportar.Item(CtaCheque.Index, p).Value)
                posi = InStr(1, cadena, "-", CompareMethod.Binary)
                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
                Cuenta_Cargo = cadena.Substring(posi, cuantos)
                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(ImpC.Index, p).Value, 0, Cuenta_Cargo, Me.TablaImportar.Item(NoCheque.Index, p).Value)
                Item = Item + 1
            ElseIf Me.TablaImportar.Item(ImpEf.Index, p).Value > 0 And Me.TablaImportar.Item(ImpT.Index, p).Value = 0 And Me.TablaImportar.Item(ImpC.Index, p).Value = 0 Then ' Efecivo
                Item = 1
                'Cuenta del Abono
                cadena = Trim(Me.TablaImportar.Item(CuentasEfectivo.Index, p).Value)
                posi = InStr(1, cadena, "-", CompareMethod.Binary)
                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
                Cuenta_Cargo = cadena.Substring(posi, cuantos)

                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(ImpEf.Index, p).Value, 0, Cuenta_Cargo, "")
                Item = Item + 1
            ElseIf Me.TablaImportar.Item(ImpEf.Index, p).Value = 0 And Me.TablaImportar.Item(ImpT.Index, p).Value > 0 And Me.TablaImportar.Item(ImpC.Index, p).Value = 0 Then ' Transferencia
                Item = 1
                'Cuenta del Abono transferencia
                cadena = Trim(Me.TablaImportar.Item(CuentaBancos.Index, p).Value)
                posi = InStr(1, cadena, "-", CompareMethod.Binary)
                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
                Cuenta_Cargo = cadena.Substring(posi, cuantos)
                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(ImpT.Index, p).Value, 0, Cuenta_Cargo, IIf(IsDBNull(Me.TablaImportar.Item(NoCheque.Index, p).Value) = True, "", Me.TablaImportar.Item(NoCheque.Index, p).Value))
                Item = Item + 1
            ElseIf Me.TablaImportar.Item(ImpEf.Index, p).Value = 0 And Me.TablaImportar.Item(ImpT.Index, p).Value = 0 And Me.TablaImportar.Item(ImpC.Index, p).Value > 0 Then 'Cheque 
                Item = 1
                cadena = Trim(Me.TablaImportar.Item(CtaCheque.Index, p).Value)
                posi = InStr(1, cadena, "-", CompareMethod.Binary)
                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
                Cuenta_Cargo = cadena.Substring(posi, cuantos)
                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(ImpC.Index, p).Value, 0, Cuenta_Cargo, Me.TablaImportar.Item(NoCheque.Index, p).Value)
                Item = Item + 1
            End If
            If Me.TablaImportar.Item(RIVA.Index, p).Value > 0 Then
                If Me.TablaImportar.Item(ImpProvis.Index, p).Value > 0 Then
                    Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(RIVA.Index, p).Value - (Me.TablaImportar.Item(RIVA.Index, p).Value * PorcenProv), 0, Regresa_Cuenta_Retencion(Me.lstCliente.SelectItem, True, Me.TablaImportar.Item(Ser.Index, p).Value), "")
                    Item = Item + 1
                Else

                    Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(RIVA.Index, p).Value, 0, Regresa_Cuenta_Retencion(Me.lstCliente.SelectItem, True, Me.TablaImportar.Item(Ser.Index, p).Value), "")
                    Item = Item + 1
                End If


            End If
            If Me.TablaImportar.Item(RISR.Index, p).Value > 0 Then
                If Me.TablaImportar.Item(ImpProvis.Index, p).Value > 0 Then
                    Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(RISR.Index, p).Value - (Me.TablaImportar.Item(RISR.Index, p).Value * PorcenProv), 0, Regresa_Cuenta_Retencion(Me.lstCliente.SelectItem, False, Me.TablaImportar.Item(Ser.Index, p).Value), "")
                    Item = Item + 1
                Else
                    Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(RISR.Index, p).Value, 0, Regresa_Cuenta_Retencion(Me.lstCliente.SelectItem, False, Me.TablaImportar.Item(Ser.Index, p).Value), "")
                    Item = Item + 1
                End If

            End If

            'cadena = Trim(Me.TablaImportar.Item(NCuenta.Index, p).Value)
            'posi = InStr(1, cadena, "-", CompareMethod.Binary)
            'cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
            'Cuenta_Cargo = cadena.Substring(posi, cuantos)
            'Cuenta2 = ""

            cadena = ""
            posi = 0
            cuantos = 0
            Cuenta_Cargo = ""
            Cuenta2 = ""

            If Me.TablaImportar.Item(ImpEx.Index, p).Value > 0 And Me.TablaImportar.Item(ImpG.Index, p).Value > 0 And Me.TablaImportar.Item(IVAR.Index, p).Value > 0 Then ' tiene grabado y exento
                'If Me.lbl0.Text = True Then
                '    Cuenta2 = RegresaCuneta(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngC", Me.TablaImportar.Item(Ser.Index, p).Value), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)
                'Else
                Cuenta2 = RegresaCuneta(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngEx", Me.TablaImportar.Item(Ser.Index, p).Value), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)
                ' End If

                Cuenta_Cargo = RegresaCuneta(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngG", Me.TablaImportar.Item(Ser.Index, p).Value), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)
                Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(ImpG.Index, p).Value - ImpGprov, Cuenta_Cargo, "")
                Item = Item + 1
                Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(ImpEx.Index, p).Value - ImpEprov, Cuenta2, "")
                Item = Item + 1
                Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(IVAR.Index, p).Value - ImpIvaPr, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "IVATras", Me.TablaImportar.Item(Ser.Index, p).Value), "")
                ' Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(IVAR.Index, p).Value - ImpIvaPr, "2080000100010000", "")
                Item = Item + 1

            ElseIf Me.TablaImportar.Item(ImpEx.Index, p).Value > 0 And Me.TablaImportar.Item(ImpG.Index, p).Value <= 0 Then 'Tiene Exento o 0
                'If Me.lbl0.Text = True Then
                '    Cuenta2 = RegresaCuneta(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngC", Me.TablaImportar.Item(Ser.Index, p).Value), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)
                'Else
                Cuenta2 = RegresaCuneta(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngEx", Me.TablaImportar.Item(Ser.Index, p).Value), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)
                'End If
                Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(ImpEx.Index, p).Value - ImpEprov, Cuenta2, "")
                Item = Item + 1

            ElseIf Me.TablaImportar.Item(ImpEx.Index, p).Value <= 0 And Me.TablaImportar.Item(ImpG.Index, p).Value > 0 Then 'Tiene Grabado

                Cuenta_Cargo = RegresaCuneta(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngG", Me.TablaImportar.Item(Ser.Index, p).Value), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)
                Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(ImpG.Index, p).Value - ImpGprov, Cuenta_Cargo, "")
                Item = Item + 1
                Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(IVAR.Index, p).Value - ImpIvaPr, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "IVATras", Me.TablaImportar.Item(Ser.Index, p).Value), "")
                ' Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(IVAR.Index, p).Value - ImpIvaPr, "2080000100010000", "")
                Item = Item + 1

            End If
            'Abonos con cuentas efectivo bancos


            'si tienes mas tranf
            If Me.TablaImportar.Item(ImpT2.Index, p).Value > 0 Then
                cadena = Trim(Me.TablaImportar.Item(CtaT2.Index, p).Value)
                posi = InStr(1, cadena, "-", CompareMethod.Binary)
                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
                Cuenta_Cargo = cadena.Substring(posi, cuantos)
                Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(ImpT2.Index, p).Value, Cuenta_Cargo, "")
                Item = Item + 1
            End If

            'Inserta Anticipos
            If Me.TablaImportar.Item(Anti.Index, p).Value > 0 Then ' Se verifica si cuenta con anticipos +
                Item = Item + 1
                cadena = Trim(Me.TablaImportar.Item(CtaAnti.Index, p).Value)
                posi = InStr(1, cadena, "-", CompareMethod.Binary)
                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
                Cuenta_Cargo = cadena.Substring(posi, cuantos)
                Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(Anti.Index, p).Value, Cuenta_Cargo, "")
            ElseIf Me.TablaImportar.Item(Anti.Index, p).Value < 0 Then ' Se verifica si cuenta  anticipos -
                Item = Item + 1
                cadena = Trim(Me.TablaImportar.Item(CtaAnti.Index, p).Value)
                posi = InStr(1, cadena, "-", CompareMethod.Binary)
                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
                Cuenta_Cargo = cadena.Substring(posi, cuantos)
                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(Anti.Index, p).Value * -1, 0, Cuenta_Cargo, "")
            End If
            'Inserta Ajustes
            If Me.TablaImportar.Item(Ajus.Index, p).Value > 0 Then ' Se verifica si cuenta con ajuste +
                Item = Item + 1
                cadena = Trim(Me.TablaImportar.Item(CtaAjustes.Index, p).Value)
                posi = InStr(1, cadena, "-", CompareMethod.Binary)
                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
                Cuenta_Cargo = cadena.Substring(posi, cuantos)
                'cargo de Ajuste
                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(Ajus.Index, p).Value, 0, Cuenta_Cargo, "")

            ElseIf Me.TablaImportar.Item(Ajus.Index, p).Value < 0 Then ' Se verifica si cuenta con ajuste -
                Item = Item + 1
                cadena = Trim(Me.TablaImportar.Item(CtaAjustes.Index, p).Value)
                posi = InStr(1, cadena, "-", CompareMethod.Binary)
                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
                Cuenta_Cargo = cadena.Substring(posi, cuantos)
                'Abono de Ajuste
                Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(Ajus.Index, p).Value * -1, Cuenta_Cargo, "")
            End If
            If Me.TablaImportar.Item(PCambiaria.Index, p).Value > 0 Then ' Se perdida cambiaria
                Item = Item + 1
                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(PCambiaria.Index, p).Value, 0, "7010000100000000", "")
            End If
            If Me.TablaImportar.Item(UCambaria.Index, p).Value > 0 Then ' Se utilidad cambiaria
                Item = Item + 1
                Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(UCambaria.Index, p).Value, "7020000100000000", "")
            End If
            'Inserta Registros Combinada Provision Compras
            If Me.TablaImportar.Item(ImpProvis.Index, p).Value > 0 Then
                Dim cta_provicion As String = ""
                'cadena = Trim(Me.TablaImportar.Item(CtaProv.Index, p).Value)
                'posi = InStr(1, cadena, "-", CompareMethod.Binary)
                'cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
                'Cuenta_Cargo = cadena.Substring(posi, cuantos)
                'Item = Item + 1
                cadena = ""
                posi = 0
                cuantos = 0
                Cuenta_Cargo = ""
                Cuenta2 = ""

                If ImpEprov > 0 And ImpGprov > 0 Then ' tiene grabado y exento

                    'If Me.lbl0.Text = True Then
                    '    Cuenta2 = RegresaCuneta(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCC", Me.TablaImportar.Item(Ser.Index, p).Value), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)
                    'Else
                    Cuenta2 = RegresaCuneta(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCE", Me.TablaImportar.Item(Ser.Index, p).Value), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)

                    'End If

                    'Cuenta2 = RegresaCuneta("40150006", Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)
                    Cuenta_Cargo = RegresaCuneta(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCG", Me.TablaImportar.Item(Ser.Index, p).Value), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)
                    cta_provicion = Cuenta_Cargo
                    Crea_detalle_poliza(pol, Item, 0, ImpGprov, Cuenta_Cargo, "")
                    Item = Item + 1
                    Crea_detalle_poliza(pol, Item, 0, ImpEprov, Cuenta2, "")
                    'Iva Gastos
                    Item = Item + 1
                    Crea_detalle_poliza(pol, Item, 0, ImpIvaPr, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "IVAPTras", Me.TablaImportar.Item(Ser.Index, p).Value), "")
                    ' Crea_detalle_poliza(pol, Item, 0, ImpIvaPr, "2090000100010000", "")
                    Item = Item + 1
                ElseIf ImpEprov > 0 And ImpGprov <= 0 Then 'Tiene Exento

                    'If Me.lbl0.Text = True Then
                    '    Cuenta2 = RegresaCuneta(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCC", Me.TablaImportar.Item(Ser.Index, p).Value), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)
                    'Else
                    Cuenta2 = RegresaCuneta(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCE", Me.TablaImportar.Item(Ser.Index, p).Value), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)

                    'End If
                    cta_provicion = Cuenta2
                    Crea_detalle_poliza(pol, Item, 0, ImpEprov, Cuenta2, "")
                    Item = Item + 1
                ElseIf ImpEprov <= 0 And ImpGprov > 0 Then 'Tiene Grabado
                    Crea_detalle_poliza(pol, Item, 0, ImpGprov, Cuenta_Cargo, "")
                    Item = Item + 1
                    Crea_detalle_poliza(pol, Item, 0, ImpIvaPr, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "IVAPTras", Me.TablaImportar.Item(Ser.Index, p).Value), "")
                    Item = Item + 1
                    cta_provicion = Cuenta_Cargo
                End If

                'cadena = Trim(Me.TablaImportar.Item(NCuenta.Index, p).Value)
                'posi = InStr(1, cadena, "-", CompareMethod.Binary)
                'cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
                'Cuenta_Cargo = cadena.Substring(posi, cuantos)

                cadena = ""
                posi = 0
                cuantos = 0
                Cuenta_Cargo = ""
                Cuenta2 = ""

                'Cuenta_Cargo = RegresaCuneta("10500001" & Cuenta_Cargo.Substring(8, 4), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)
                Cuenta_Cargo = RegresaCuneta(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "Clientes", Me.TablaImportar.Item(Ser.Index, p).Value), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)
                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(ImpProvis.Index, p).Value, 0, Cuenta_Cargo, "")


                If Me.TablaImportar.Item(RIVA.Index, p).Value > 0 Then
                    Item = Item + 1
                    Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(RIVA.Index, p).Value * PorcenProv, 0, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "IVARetPA", Me.TablaImportar.Item(Ser.Index, p).Value), "")
                    'Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(RIVA.Index, p).Value * PorcenProv, 0, "1035000800010000", "")
                End If
                If Me.TablaImportar.Item(RISR.Index, p).Value > 0 Then
                    Item = Item + 1
                    Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(RISR.Index, p).Value * PorcenProv, 0, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "ISRRPA", Me.TablaImportar.Item(Ser.Index, p).Value), "")
                    ' Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(RISR.Index, p).Value * PorcenProv, 0, "1035000800020000", "")
                End If

                If UCase(Me.TablaImportar.Item(CtaOrden.Index, p).Value) = "SI" Then
                    cadena = Trim(cta_provicion)
                    posi = InStr(1, cadena, "-", CompareMethod.Binary)
                    cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
                    Cuenta_Cargo = cadena.Substring(posi, cuantos)
                    Item = Item + 1

                    If ImpEprov > 0 And ImpGprov > 0 Then ' tiene grabado y exento
                        Cuenta2 = RegresaCuneta("9000" & cadena.Substring(4, 4), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)
                        Crea_detalle_poliza(pol, Item, 0, ImpGprov, Cuenta2, "")
                        Item = Item + 1
                        Cuenta2 = RegresaCuneta("90000006" & cadena.Substring(4, 4), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 0)
                        Crea_detalle_poliza(pol, Item, 0, ImpEprov, Cuenta2, "")

                    ElseIf ImpEprov > 0 And ImpGprov <= 0 Then 'Tiene Exento
                        If Cuenta_Cargo.Substring(4, 4) = "0006" Then
                            Cuenta2 = RegresaCuneta("90000006" & cadena.Substring(4, 4), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 0)
                            Crea_detalle_poliza(pol, Item, 0, ImpEprov, Cuenta2, "")
                        Else
                            Cuenta2 = RegresaCuneta("90000009" & cadena.Substring(4, 4), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 0)
                            Crea_detalle_poliza(pol, Item, 0, ImpEprov, Cuenta2, "")
                        End If
                        Crea_detalle_poliza(pol, Item, 0, ImpEprov, Cuenta_Cargo, "")
                        Item = Item + 1
                    ElseIf ImpEprov <= 0 And ImpGprov > 0 Then 'Tiene Grabado
                        Cuenta2 = RegresaCuneta("9000" & cadena.Substring(4, 4), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)
                        Crea_detalle_poliza(pol, Item, 0, ImpGprov, Cuenta2, "")
                    End If



                    If BuscaCtaOrden(Me.DtInicio.Value.ToString.Substring(6, 4)) = "" Then ' tiene grabado y exento
                        Cuenta2 = RegresaCuneta("9001" & cadena.Substring(4, 4), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)
                        Crea_detalle_poliza(pol, Item, ImpGprov, 0, Cuenta2, "")
                        Item = Item + 1
                        Cuenta2 = RegresaCuneta("90000006" & cadena.Substring(4, 4), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 0)
                        Crea_detalle_poliza(pol, Item, ImpEprov, 0, Cuenta2, "")

                    ElseIf ImpEprov > 0 And ImpGprov <= 0 Then 'Tiene Exento
                        If Cuenta_Cargo.Substring(4, 4) = "0006" Then
                            Cuenta2 = RegresaCuneta("90000006" & cadena.Substring(4, 4), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 0)
                            Crea_detalle_poliza(pol, Item, ImpEprov, 0, Cuenta2, "")
                        Else
                            Cuenta2 = RegresaCuneta("90000009" & cadena.Substring(4, 4), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 0)
                            Crea_detalle_poliza(pol, Item, ImpEprov, 0, Cuenta2, "")
                        End If
                        Crea_detalle_poliza(pol, Item, ImpEprov, 0, Cuenta_Cargo, "")
                        Item = Item + 1
                    ElseIf ImpEprov <= 0 And ImpGprov > 0 Then 'Tiene Grabado
                        Cuenta2 = RegresaCuneta("9000" & cadena.Substring(4, 4), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)
                        Crea_detalle_poliza(pol, Item, ImpGprov, 0, Cuenta2, "")
                    End If


                End If
            End If


            Exit Sub

        ElseIf Trim(Me.TablaImportar.Item(ContabilizacionC.Index, p).Value) = "IPC" Then

            Dim cadena As String = ""
            Dim posi As Integer = 0
            Dim cuantos As Integer = 0
            Dim Cuenta_Cargo As String = ""
            Dim Cuenta2 As String = ""

            ' Revision codigo de Excentos o cero

            If Me.TablaImportar.Item(ImpEx.Index, p).Value > 0 And Me.TablaImportar.Item(ImpG.Index, p).Value > 0 And Me.TablaImportar.Item(IVAR.Index, p).Value > 0 Then ' tiene grabado y exento
                ' If Cuenta_Cargo.Substring(0, 8) = Regresa_Cuenta_Ingresos(Me.lstCliente.SelectItem) Then ' recuperar la cuenta de ingresos

                'If Me.lbl0.Text = True Then
                '    Cuenta2 = RegresaCuneta(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCC", Me.TablaImportar.Item(Ser.Index, p).Value), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)
                'Else
                Cuenta2 = RegresaCuneta(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCE", Me.TablaImportar.Item(Ser.Index, p).Value), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)

                ' End If

                Cuenta_Cargo = RegresaCuneta(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCG", Me.TablaImportar.Item(Ser.Index, p).Value), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)

                Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(ImpG.Index, p).Value - ImpGprov, Cuenta_Cargo, "")
                Item = Item + 1
                Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(ImpEx.Index, p).Value - ImpEprov, Cuenta2, "")
                Item = Item + 1
                'Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(IVAR.Index, p).Value - ImpIvaPr, "2080000100010000", "")
                Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(IVAR.Index, p).Value - ImpIvaPr, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "IVAPTras", Me.TablaImportar.Item(Ser.Index, p).Value), "")

                Item = Item + 1
            ElseIf Me.TablaImportar.Item(ImpEx.Index, p).Value > 0 And Me.TablaImportar.Item(ImpG.Index, p).Value <= 0 Then 'Tiene Exento o 0 
                'If Me.lbl0.Text = True Then
                '    Cuenta2 = RegresaCuneta(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCC", Me.TablaImportar.Item(Ser.Index, p).Value), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)
                'Else
                Cuenta2 = RegresaCuneta(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCE", Me.TablaImportar.Item(Ser.Index, p).Value), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)

                'End If
                Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(ImpEx.Index, p).Value - ImpEprov, Cuenta2, "")
                Item = Item + 1
            ElseIf Me.TablaImportar.Item(ImpEx.Index, p).Value <= 0 And Me.TablaImportar.Item(ImpG.Index, p).Value > 0 Then 'Tiene Grabado 
                Cuenta_Cargo = RegresaCuneta(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCG", Me.TablaImportar.Item(Ser.Index, p).Value), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)
                Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(ImpG.Index, p).Value - ImpGprov, Cuenta_Cargo, "")
                Item += 1
                'Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(IVAR.Index, p).Value - ImpIvaPr, "2080000100010000", "")
                Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(IVAR.Index, p).Value - ImpIvaPr, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "IVAPTras", Me.TablaImportar.Item(Ser.Index, p).Value), "")

                Item = Item + 1
            End If
            'Abonos con cuentas efectivo bancos
            'cadena = Trim(Me.TablaImportar.Item(NCuenta.Index, p).Value)
            'posi = InStr(1, cadena, "-", CompareMethod.Binary)
            'cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
            'Cuenta_Cargo = cadena.Substring(posi, cuantos)
            'Cuenta_Cargo = RegresaCuneta("10500001" & Cuenta_Cargo.Substring(8, 4), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)

            Cuenta_Cargo = RegresaCuneta(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "Clientes", Me.TablaImportar.Item(Ser.Index, p).Value), Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 1)
            Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(ImpProvis.Index, p).Value, 0, Cuenta_Cargo, "")

            If Me.TablaImportar.Item(RIVA.Index, p).Value > 0 Then

                If Me.TablaImportar.Item(RIVA.Index, p).Value - (Me.TablaImportar.Item(RIVA.Index, p).Value * PorcenProv) = 0 Then

                Else
                    Item += 1
                    Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(RIVA.Index, p).Value - (Me.TablaImportar.Item(RIVA.Index, p).Value * PorcenProv), 0, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "IVARet", Me.TablaImportar.Item(Ser.Index, p).Value), "")

                End If

                ' Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(RIVA.Index, p).Value - (Me.TablaImportar.Item(RIVA.Index, p).Value * PorcenProv), 0, Regresa_Cuenta_Retencion(Me.lstCliente.SelectItem, True), "")

            End If
            If Me.TablaImportar.Item(RISR.Index, p).Value > 0 Then

                If Me.TablaImportar.Item(RISR.Index, p).Value - (Me.TablaImportar.Item(RISR.Index, p).Value * PorcenProv) = 0 Then

                Else
                    Item += 1
                    Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(RISR.Index, p).Value - (Me.TablaImportar.Item(RISR.Index, p).Value * PorcenProv), 0, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "ISRRet", Me.TablaImportar.Item(Ser.Index, p).Value), "")

                End If


            End If

            If Me.TablaImportar.Item(RIVA.Index, p).Value > 0 Then
                Item = Item + 1

                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(RIVA.Index, p).Value * PorcenProv, 0, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "IVARetPA", Me.TablaImportar.Item(Ser.Index, p).Value), "")


                ' Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(RIVA.Index, p).Value * PorcenProv, 0, "1035000800010000", "")
            End If
            If Me.TablaImportar.Item(RISR.Index, p).Value > 0 Then
                Item = Item + 1
                ' Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(RISR.Index, p).Value * PorcenProv, 0, "1035000800020000", "")
                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(RISR.Index, p).Value * PorcenProv, 0, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "ISRRPA", Me.TablaImportar.Item(Ser.Index, p).Value), "")
            End If
            'Inserta Anticipos
            If Me.TablaImportar.Item(Anti.Index, p).Value > 0 Then ' Se verifica si cuenta con anticipos +
                Item = Item + 1
                cadena = Trim(Me.TablaImportar.Item(CtaAnti.Index, p).Value)
                posi = InStr(1, cadena, "-", CompareMethod.Binary)
                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
                Cuenta_Cargo = cadena.Substring(posi, cuantos)
                Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(Anti.Index, p).Value, Cuenta_Cargo, "")
            ElseIf Me.TablaImportar.Item(Anti.Index, p).Value < 0 Then ' Se verifica si cuenta  anticipos -
                Item = Item + 1
                cadena = Trim(Me.TablaImportar.Item(CtaAnti.Index, p).Value)
                posi = InStr(1, cadena, "-", CompareMethod.Binary)
                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
                Cuenta_Cargo = cadena.Substring(posi, cuantos)
                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(Anti.Index, p).Value * -1, 0, Cuenta_Cargo, "")
            End If
            'Inserta Ajustes
            If Me.TablaImportar.Item(Ajus.Index, p).Value > 0 Then ' Se verifica si cuenta con ajuste +
                Item = Item + 1
                cadena = Trim(Me.TablaImportar.Item(CtaAjustes.Index, p).Value)
                posi = InStr(1, cadena, "-", CompareMethod.Binary)
                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
                Cuenta_Cargo = cadena.Substring(posi, cuantos)
                'cargo de Ajuste
                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(Ajus.Index, p).Value, 0, Cuenta_Cargo, "")

            ElseIf Me.TablaImportar.Item(Ajus.Index, p).Value < 0 Then ' Se verifica si cuenta con ajuste -
                Item = Item + 1
                cadena = Trim(Me.TablaImportar.Item(CtaAjustes.Index, p).Value)
                posi = InStr(1, cadena, "-", CompareMethod.Binary)
                cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
                Cuenta_Cargo = cadena.Substring(posi, cuantos)
                'Abono de Ajuste
                Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(Ajus.Index, p).Value * -1, Cuenta_Cargo, "")
            End If
            If Me.TablaImportar.Item(PCambiaria.Index, p).Value > 0 Then ' Se perdida cambiaria
                Item = Item + 1
                Crea_detalle_poliza(pol, Item, Me.TablaImportar.Item(PCambiaria.Index, p).Value, 0, "7010000100000000", "")
            End If
            If Me.TablaImportar.Item(UCambaria.Index, p).Value > 0 Then ' Se utilidad cambiaria
                Item = Item + 1
                Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(UCambaria.Index, p).Value, "7020000100000000", "")
            End If
            If UCase(Me.TablaImportar.Item(CtaOrden.Index, p).Value) = "SI" Then
                Item = Item + 1
                If ImpEprov > 0 And ImpGprov > 0 Then

                    Cuenta2 = RegresaCuneta("901000010003", Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 0)
                    Crea_detalle_poliza(pol, Item, ImpGprov, 0, Cuenta2, "")
                    Item = Item + 1
                    If Trim(UCase(Me.lble.Text)) = "TRUE" Then
                        Cuenta2 = RegresaCuneta("901000010001", Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 0)
                    Else
                        Cuenta2 = RegresaCuneta("901000010002", Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 0)
                    End If
                    Crea_detalle_poliza(pol, Item, ImpEprov, 0, Cuenta2, "")
                    Item = Item + 1

                ElseIf ImpEprov > 0 And ImpGprov <= 0 Then 'Tiene Exento
                    If Trim(UCase(Me.lble.Text)) = "TRUE" Then
                        Cuenta2 = RegresaCuneta("901000010001", Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 0)
                    Else
                        Cuenta2 = RegresaCuneta("901000010002", Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 0)
                    End If
                    Crea_detalle_poliza(pol, Item, ImpEprov, 0, Cuenta2, "")
                    Item = Item + 1
                ElseIf ImpEprov <= 0 And ImpGprov > 0 Then 'Tiene Grabado
                    Cuenta2 = RegresaCuneta("901000010003", Trim(Me.TablaImportar.Item(RFCE.Index, p).Value), p, 0)
                    Crea_detalle_poliza(pol, Item, ImpGprov, 0, Cuenta2, "")
                    Item = Item + 1
                End If

                If ImpEprov > 0 And ImpGprov > 0 Then
                    Crea_detalle_poliza(pol, Item, 0, ImpGprov, "9011001000010003", "")
                    Item = Item + 1
                    If Trim(UCase(Me.lble.Text)) = "TRUE" Then
                        Crea_detalle_poliza(pol, Item, 0, ImpEprov, "9011001000010001", "")
                    Else
                        Crea_detalle_poliza(pol, Item, 0, ImpEprov, "9011001000010002", "")
                    End If
                    Item = Item + 1

                ElseIf ImpEprov > 0 And ImpGprov <= 0 Then 'Tiene Exento
                    If Trim(UCase(Me.lble.Text)) = "TRUE" Then
                        Crea_detalle_poliza(pol, Item, 0, ImpEprov, "9011001000010001", "")
                    Else
                        Crea_detalle_poliza(pol, Item, 0, ImpEprov, "9011001000010002", "")
                    End If
                    Item = Item + 1
                ElseIf ImpEprov <= 0 And ImpGprov > 0 Then 'Tiene Grabado
                    Crea_detalle_poliza(pol, Item, 0, ImpGprov, "9011001000010003", "")
                    Item = Item + 1
                End If

            End If
            Exit Sub
        End If
    End Sub
    'Crear eventos para regresar las cuentas de LA TABLA DE SERIES
    Private Function BuscaCtaOrden(ByVal Anio As String)
        Dim cta As String = ""
        Dim sql As String = "Select * from catalogo_de_cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & "  and descripcion like '%Ejercicio " & Anio & "%' and Nivel1 ='9001' "
        Dim ds As DataSet = Eventos.Obtener_DS(sql)
        If ds.Tables(0).Rows.Count > 0 Then
            cta = ds.Tables(0).Rows(0)(0)
        Else
            cta = ""
        End If
        Return cta
    End Function
    Private Function Regresa_Cuenta_Series(ByVal cliente As Integer, ByVal tipo As String, ByVal serie As String)
        Dim cta As String = ""
        Dim sql As String = "SELECT 
	Id_Ingreso,	Serie,	Abono,	CtaIngG,	CtaIngEx,	CtaIngC,	IVATras,	ISRRet,	IVARet,	CtaIngPCG,	CtaIngPCE,	CtaIngPCC,
	IVAPTras,	ISRRPA,	IVARetPA,DevSVentasG,DevSVentasC,DevSVentasEx,IvaSDev,Id_Empresa,Clientes FROM dbo.Series WHERE Id_Empresa = " & cliente & " and serie  = '" & serie & "' "
        Dim ds As DataSet = Eventos.Obtener_DS(sql)
        If ds.Tables(0).Rows.Count > 0 Then
            Try
                cta = Trim(ds.Tables(0).Rows(0)(tipo)).Substring(0, 12)
            Catch ex As Exception
                cta = ""
            End Try

        Else

            cta = ""
        End If
        Return cta
    End Function
    Private Function Regresa_Cuenta_Impuestos(ByVal cliente As Integer, ByVal tipo As String, ByVal serie As String)
        Dim cta As String = ""
        Dim sql As String = "SELECT 
	Id_Ingreso,	Serie,	Abono,	CtaIngG,	CtaIngEx,	CtaIngC,	IVATras,	ISRRet,	IVARet,	CtaIngPCG,	CtaIngPCE,	CtaIngPCC,
	IVAPTras,	ISRRPA,	IVARetPA,IvaSDev,	Id_Empresa FROM dbo.Series WHERE Id_Empresa = " & cliente & " and Serie = '" & serie & "'"
        Dim ds As DataSet = Eventos.Obtener_DS(sql)
        If ds.Tables(0).Rows.Count > 0 Then
            cta = Trim(ds.Tables(0).Rows(0)(tipo))
        Else

            cta = ""
        End If
        Return cta
    End Function

    Private Function Regresa_Cuenta_Retencion(ByVal cliente As Integer, ByVal iva As Boolean, ByVal Serie As String)
        Dim cta As String = ""
        Dim sql As String = ""
        If iva = True Then
            sql = "SELECT IVARet FROM dbo.Series WHERE Id_Empresa = " & cliente & " and serie ='" & Serie & "'"
        Else
            sql = "SELECT ISRRet FROM dbo.Series WHERE Id_Empresa = " & cliente & "  and serie ='" & Serie & "'"
        End If

        Dim ds As DataSet = Eventos.Obtener_DS(sql)
        If ds.Tables(0).Rows.Count > 0 Then
            cta = ds.Tables(0).Rows(0)(0).ToString
        Else
            cta = ""
        End If
        Return cta
    End Function
    Private Sub Actualiza_Registro(ByVal poliza As String, ByVal registro As Integer)
        Dim sql As String = " UPDATE dbo.xml_sat
                        SET Id_Poliza = '" & poliza & "'
                        WHERE Id_Registro_Xml = " & registro & "  "
        If Eventos.Comando_sql(sql) > 0 Then
            Eventos.Insertar_usuariol("Carga", sql)
        End If

    End Sub
    Private Sub Actualiza_RegistroC(ByVal poliza As String, ByVal registro As Integer)
        Dim sql As String = " UPDATE dbo.Xml_Complemento
                        SET Id_Poliza = '" & poliza & "'
                        WHERE Id_Xml_Complemento = " & registro & "  "
        If Eventos.Comando_sql(sql) > 0 Then
            Eventos.Insertar_usuariol("Carga", sql)
        End If

    End Sub

    Private Function Buscar_Cuenta_Abono(ByVal where As String)
        Dim cuenta As String = ""
        Dim sql As String = " select cuenta from catalogo_de_cuentas where " & where & ""
        Dim ds As DataSet = Eventos.Obtener_DS(sql)
        If ds.Tables(0).Rows.Count > 0 Then
            cuenta = ds.Tables(0).Rows(0)(0)
        End If
        Return cuenta
    End Function
    Private Sub Color_Columnas()
        Dim contador As Integer = 0
        Dim frm As New BarraProcesovb
        frm.Show()
        frm.Text = "Ajustando color de las Columnas por favor espere..."
        frm.Barra.Minimum = 0
        frm.Barra.Maximum = Me.TablaImportar.Columns.Count
        For Each Column As DataGridViewColumn In TablaImportar.Columns
            If Column.Index = ContabilizacionC.Index Or Column.Index = anio.Index Or Column.Index = Mes.Index Or Column.Index = BancoOrigen.Index Or Column.Index = Bancodestino.Index Or Column.Index = Fechat.Index Or Column.Index = BancosCheques.Index Or Column.Index = NoCheque.Index Or Column.Index = FechaC.Index Or Column.Index = ProvA.Index Or Column.Index = ProvP.Index Or Column.Index = UCambaria.Index Or Column.Index = PCambiaria.Index Or Column.Index = ImpD.Index Or Column.Index = CuntaDev.Index Or Column.Index = ImpD.Index Or Column.Index = ImpD.Index Then
                Column.DefaultCellStyle.BackColor = Color.RoyalBlue
            ElseIf Column.Index = Ajus.Index Then
                Column.DefaultCellStyle.BackColor = Color.GreenYellow
            ElseIf Column.Index = Anti.Index Then
                Column.DefaultCellStyle.BackColor = Color.LawnGreen
            ElseIf Column.Index = ImpProvis.Index Then
                Column.DefaultCellStyle.BackColor = Color.MediumPurple
            ElseIf Column.Index = TipoPoliza.Index Or Column.Index = NumPol.Index Then
                Column.DefaultCellStyle.BackColor = Color.Orange
            ElseIf Column.Index = NCuenta.Index Or Column.Index = CuentaBancos.Index Or Column.Index = CtaCheque.Index Then
                Column.DefaultCellStyle.BackColor = Color.Orange
            ElseIf Column.Index = ImpEf.Index Or Column.Index = ImpT.Index Or Column.Index = ImpC.Index Then
                Column.DefaultCellStyle.BackColor = Color.OliveDrab
            ElseIf Column.Index = Ser.Index Then
                Column.DefaultCellStyle.BackColor = Color.LightSeaGreen
            End If
            frm.Barra.Value += 1
        Next
        frm.Close()
    End Sub
    Private Function RegresaCuneta(ByVal cuenta As String, ByVal rfc As String, ByVal posicion As Integer, Optional ByVal tipo As Integer = 0)
        Dim Cta As String = ""
        Dim sql As String = ""
        If tipo = 1 Then
            sql = "SELECT cuenta FROM Catalogo_de_Cuentas WHERE Nivel1='" & cuenta.Substring(0, 4) & "' AND Nivel2= '" & cuenta.Substring(4, 4) & "' AND Nivel3 > 0 AND RFC = '" & rfc & "' and Id_Empresa = " & Me.lstCliente.SelectItem & " "
        ElseIf tipo = 2 Then

            sql = "SELECT cuenta FROM Catalogo_de_Cuentas WHERE Nivel1='" & cuenta.Substring(0, 4) & "' AND Nivel2= '" & cuenta.Substring(4, 4) & "' AND Nivel3 = '" & cuenta.Substring(8, 4) & "' AND Nivel4 > 0 AND RFC = '" & rfc & "' and Id_Empresa = " & Me.lstCliente.SelectItem & " "
        ElseIf tipo = 0 Then

            sql = "SELECT cuenta FROM Catalogo_de_Cuentas WHERE Nivel1='" & cuenta.Substring(0, 4) & "' AND Nivel2= '" & cuenta.Substring(4, 4) & "' AND Nivel3 = '" & cuenta.Substring(8, 4) & "' AND Nivel4 >= 0 AND RFC = '" & rfc & "' and Id_Empresa = " & Me.lstCliente.SelectItem & " "

        End If

        Dim ds As DataSet = Eventos.Obtener_DS(sql)
        If ds.Tables(0).Rows.Count > 0 Then
            Cta = ds.Tables(0).Rows(0)(0)
        Else
            'No existe la cuenta y la inserta
            If tipo = 1 Then
                Cta = Val(ObtenerValorDB("Catalogo_de_cuentas", "CASE WHEN max (Nivel3 ) + 1 IS NULL THEN 1 WHEN max (Nivel3 ) + 1 IS NOT NULL THEN   max (Nivel3 ) + 1 END AS C ", "  Nivel1 =" & cuenta.ToString.Substring(0, 4) & "  AND Nivel2 =" & cuenta.ToString.Substring(4, 4) & " AND Nivel3 >= 0 and Id_Empresa = " & Me.lstCliente.SelectItem & "", True))
                Cta = Format(Cta).PadLeft(4, "0")
                Crear_cuenta(cuenta.ToString.Substring(0, 4), cuenta.ToString.Substring(4, 4), Cta.ToString.Substring(0, 4),
                               "0000", cuenta.Substring(0, 8) & Cta & "0000", Me.TablaImportar.Item(RFCE.Index, posicion).Value & " " & Me.TablaImportar.Item(NomEmisor.Index, posicion).Value,
                                Me.lstCliente.SelectItem, Me.TablaImportar.Item(ContabilizacionC.Index, posicion).Value, Me.TablaImportar.Item(RFCE.Index, posicion).Value)
                Cta = cuenta.Substring(0, 8) & Cta & "0000"
            ElseIf tipo = 0 Then
                Cta = Val(ObtenerValorDB("Catalogo_de_cuentas", "CASE WHEN max (Nivel4 ) + 1 IS NULL THEN 1 WHEN max (Nivel4 ) + 1 IS NOT NULL THEN   max (Nivel4 ) + 1 END AS C ", "  Nivel1 =" & cuenta.ToString.Substring(0, 4) & "  AND Nivel2 =" & cuenta.ToString.Substring(4, 4) & " AND Nivel3=" & cuenta.ToString.Substring(8, 4) & " AND Nivel4 >= 0000 and Id_Empresa = " & Me.lstCliente.SelectItem & "", True))
                Cta = Format(Cta).PadLeft(4, "0")
                Crear_cuenta(cuenta.ToString.Substring(0, 4), cuenta.ToString.Substring(4, 4), cuenta.ToString.Substring(8, 4),
                                  Cta, cuenta.Substring(0, 12) & Cta, Me.TablaImportar.Item(RFCE.Index, posicion).Value & " " & Me.TablaImportar.Item(NomEmisor.Index, posicion).Value,
                                  Me.lstCliente.SelectItem, Me.TablaImportar.Item(ContabilizacionC.Index, posicion).Value, Me.TablaImportar.Item(RFCE.Index, posicion).Value)
                Cta = cuenta.Substring(0, 12) & Cta
            ElseIf tipo = 2 Then
                Cta = Val(ObtenerValorDB("Catalogo_de_cuentas", "CASE WHEN max (Nivel2 ) + 1 IS NULL THEN 1 WHEN max (Nivel2 ) + 1 IS NOT NULL THEN   max (Nivel2 ) + 1 END AS C ", "  Nivel1 =" & cuenta.ToString.Substring(0, 4) & "  AND Nivel2 >= 0000 and Id_Empresa = " & Me.lstCliente.SelectItem & "", True))
                Cta = Format(Cta).PadLeft(4, "0")
                Crear_cuenta(cuenta.ToString.Substring(0, 4), Cta.ToString.Substring(0, 4), "0000",
                                 "0000", cuenta.Substring(0, 4) & Cta & "00000000", Me.TablaImportar.Item(RFCE.Index, posicion).Value & " " & Me.TablaImportar.Item(NomEmisor.Index, posicion).Value,
                                  Me.lstCliente.SelectItem, Me.TablaImportar.Item(ContabilizacionC.Index, posicion).Value, Me.TablaImportar.Item(RFCE.Index, posicion).Value)
                Cta = cuenta.Substring(0, 4) & Cta & "00000000"
            End If
        End If
        Return Cta
    End Function

    Private Sub Actualiza_Registro_Xml(ByVal carg As String, ByVal registro As Integer)
        Dim sql As String = " UPDATE dbo.xml_sat
                        SET Nombre_cuenta = '" & carg & "'
                        WHERE Id_Registro_Xml = " & registro & "  "
        If Eventos.Comando_sql(sql) > 0 Then
            Eventos.Insertar_usuariol("Carga", sql)
        End If

    End Sub
    Private Sub Actualiza_Registro_Xml_Comple(ByVal carg As String, ByVal registro As Integer)
        Dim sql As String = " UPDATE dbo.Xml_Complemento
                        SET Nombre_cuenta = '" & carg & "'
                        WHERE Id_Xml_Complemento = " & registro & "  "
        If Eventos.Comando_sql(sql) > 0 Then
            Eventos.Insertar_usuariol("Carga", sql)
        End If

    End Sub
    Private Function Buscar_Parametros(ByVal Cliente As Integer)
        Dim hacer As Boolean
        Dim sql As String = "SELECT  TasaC , TaseE ,  Tasa16,  IvaErogaciones,Contab_Elect  FROM dbo.Parametros_Clientes WHERE Id_Empresa = " & Cliente & " "
        Dim ds As DataSet = Eventos.Obtener_DS(sql)
        If ds.Tables(0).Rows.Count > 0 Then
            Me.lbl0.Text = IIf(IsDBNull(ds.Tables(0).Rows(0)("TasaC")) = True, "", ds.Tables(0).Rows(0)("TasaC"))
            Me.lble.Text = IIf(IsDBNull(ds.Tables(0).Rows(0)("TaseE")) = True, "", ds.Tables(0).Rows(0)("TaseE"))
            Me.lbl16.Text = IIf(IsDBNull(ds.Tables(0).Rows(0)("Tasa16")) = True, "", ds.Tables(0).Rows(0)("Tasa16"))
            Me.lblce.Text = IIf(IsDBNull(ds.Tables(0).Rows(0)("Contab_Elect")) = True, "", ds.Tables(0).Rows(0)("Contab_Elect"))
            hacer = True
        Else
            RadMessageBox.Show("No hay registros de parametros para la empresa" & Me.lstCliente.SelectText & " ", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
            hacer = False
        End If
        Return hacer
    End Function
    Private Function BuscarcuentaRFC(ByVal RFC As String, ByVal cuenta As String, ByVal posicion As Integer)
        Dim Cta As String = ""
        Dim sql As String = "SELECT cuenta FROM Catalogo_de_Cuentas WHERE Nivel1='" & cuenta.Substring(0, 4) & "' AND Nivel2= '" & cuenta.Substring(4, 4) & "' AND Nivel3 = '" & cuenta.Substring(8, 4) & "' AND Nivel4 > 0 AND RFC = '" & RFC & "' and Id_Empresa = " & Me.lstCliente.SelectItem & " "
        Dim ds As DataSet = Eventos.Obtener_DS(sql)
        If ds.Tables(0).Rows.Count > 0 Then
            Cta = ds.Tables(0).Rows(0)(0)
        Else
            'No existe la cuenta y la inserta
            Cta = Val(ObtenerValorDB("Catalogo_de_cuentas", "max (Nivel4 ) + 1 ", "  Nivel1 =" & cuenta.ToString.Substring(0, 4) & "  AND Nivel2 =" & cuenta.ToString.Substring(4, 4) & " AND Nivel3=" & cuenta.ToString.Substring(8, 4) & " AND Nivel4 > 0 and Id_Empresa = " & Me.lstCliente.SelectItem & "", True))
            Cta = Format(Cta).PadLeft(4, "0")
            Crear_cuenta(cuenta.ToString.Substring(0, 4), cuenta.ToString.Substring(4, 4), cuenta.ToString.Substring(8, 4),
                                   Cta, cuenta.Substring(0, 12) & Cta, Me.TablaImportar.Item(RFCE.Index, posicion).Value & " " & Me.TablaImportar.Item(NomEmisor.Index, posicion).Value,
                                   Me.lstCliente.SelectItem, Me.TablaImportar.Item(ContabilizacionC.Index, posicion).Value, Me.TablaImportar.Item(RFCE.Index, posicion).Value)
            Cta = cuenta.Substring(0, 12) & Cta
        End If
        Return Cta
    End Function

    Private Function Leyenda(ByVal letra As String)
        Dim Concepto As String = ""
        Select Case letra
            Case "I"
                Concepto = "Ingres S/Fact"
            Case "IPC"
                Concepto = "I P/Cobrar F/"
        End Select
        Return Concepto
    End Function
    '****************************************** Codigo de las Devoluciones y descuentos 
    Private Sub CmdSalir2_Click(sender As Object, e As EventArgs) Handles CmdSalir2.Click
        Me.Close()
    End Sub

    Private Sub CmdLimpiaDev_Click(sender As Object, e As EventArgs) Handles CmdLimpiaDev.Click
        If Me.TablaD.Rows.Count > 0 Then
            LimpiaDev()
            Me.LstTextoDev.SelectText = ""
        End If
    End Sub
    Private Sub LimpiaDev()
        Me.TablaD.Rows.Clear()
    End Sub

    Private Sub CmdBuscarDev_Click(sender As Object, e As EventArgs) Handles CmdBuscarDev.Click
        activo = True
        RadMessageBox.SetThemeName("MaterialBlueGrey")
        LimpiaDev()
        If Me.lstCliente.SelectText <> "" Then
            If Buscar_Parametros(Me.lstCliente.SelectItem) = True Then
                Buscar_Devoluciones(Me.lstCliente.SelectItem, " and Fecha_Emision >= " & Eventos.Sql_hoy(Me.DtIniDev.Value) & " and Fecha_Emision <= " & Eventos.Sql_hoy(DtFinDev.Value) & "")
                Cargar_valores_contablesD()
                Color_ColumnasD()
                For i As Integer = 0 To Me.TablaD.Rows.Count - 1
                    Liberar_ProcesoDev(i)
                    Cargar_Pol_Modelo_Notas(Me.TablaD.Item(RFCED.Index, i).Value, Me.TablaD.Item(FechaED.Index, i).Value, i)
                Next
            End If
        Else
            RadMessageBox.Show("No se ha seleccionado una Empresa", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
        End If
        activo = False
    End Sub

    Private Sub Buscar_Devoluciones(ByVal Id_Empresa As Integer, ByVal periodo As String)
        Dim sql As String = " SELECT "
        sql &= " 	Id_Registro_Xml,	Verificado_Asoc,	Estado_SAT,	Version,	Tipo,	Fecha_Emision,"
        sql &= " 	Fecha_Timbrado,	EstadoPago,	FechaPago,	Serie,	Folio,	UUID,	UUID_Relacion,	RFC_Emisor,"
        sql &= " 	Nombre_Emisor,	LugarDeExpedicion,	RFC_Receptor,	Nombre_Receptor,	ResidenciaFiscal,	NumRegIdTrib,"
        sql &= " 	UsoCFDI,Retenido_IVA + Retenido_ISR  + Total -IVA_16 AS SubTotal,	Descuento,	Total_IEPS,	IVA_16,	Retenido_IVA,	Retenido_ISR,	ISH,	Total,"
        sql &= " 	TotalOriginal,	Total_Trasladados,	Total_Retenidos,	Total_LocalTrasladado,	Total_LocalRetenido,	Complemento,"
        sql &= " 	Moneda,	Tipo_De_Cambio,	Metodos_de_Pago.Descripcion,	FormaDePago,	NumCtaPago,	Condicion_de_Pago,	Conceptos,"
        sql &= " 	Combustible,	IEPS_3,	IEPS_6,	IEPS_7,	IEPS_8,	IEPS_9,	IEPS_26,	IEPS_30,	IEPS_53,	IEPS_160,"
        sql &= " 	Archivo_XML,	Direccion_Emisor,	Localidad_Emisor,	Direccion_Receptor,	Localidad_Receptor,	Autorizada,	Consecutivo_Carga,"
        sql &= " 	Id_Empresa,	Carga_Procesada,	Id_Poliza,Letra_Sat,	Nombre_cuenta,	Xml_Sat.Clave,	Anio_Contable,	Mes_Contable,	Imp_Efectivo,	Cuenta_Efectivo,
	Imp_Transf,	Banco_Origen,	Cuenta_Origen,	Banco_Destino,Cuenta_Destino,	Fecha_Transaccion,	Imp_Cheque,
	Nom_Banco_Ch,	Cuenta_Origen_Ch,	No_Cheque,	Fecha_Ch, Cuenta_Cheques,	Cuenta_Bancos,	Provision_Acreedor,	Provision_Proveedor,
	Diferencia,	Tipo_Poliza,	Imp_Grabado,	Imp_Exento,	IVA_real,	Prc_Pago_Acumulado,	Total_Real,	Utilidad_Cambiaria,
	Perdida_Cambiaria,	Imp_Devolucion,	Cuenta_Devolucion 	,Numpol,	RIRS,	RIVA,Ajuste , Anticipos, Cta_Ajuste, Cta_Anticipos,Imp_Provision,Ser "
        sql &= " FROM dbo.Xml_Sat inner join Metodos_de_pago on Metodos_de_pago.clave = Xml_Sat.FormaDePago   where tipo = 'NotaCredito' and emitidas= " & Eventos.Bool2(True) & " and Id_Empresa =" & Id_Empresa & " and Id_Poliza IS NULL AND  (Carga_Procesada =0	OR Carga_Procesada IS NULL) " & periodo & " "
        Dim ds As DataSet = Eventos.Obtener_DS(sql)
        If ds.Tables(0).Rows.Count > 0 Then
            Me.TablaD.RowCount = ds.Tables(0).Rows.Count
            Me.BarraD.Maximum = Me.TablaD.RowCount - 1
            Me.BarraD.Minimum = 0
            Me.BarraD.Value1 = 0
            Dim contab As DataSet = Eventos.Obtener_DS(" Select 'I' as Clave")
            If contab.Tables(0).Rows.Count > 0 Then
                If Me.LetraCd.Items.Count = 0 Then

                    For i As Integer = 0 To contab.Tables(0).Rows.Count - 1
                        Me.LetraCd.Items.Add(Trim(contab.Tables(0).Rows(i)("Clave")))
                    Next
                Else
                    Me.LetraCd.Items.Clear()
                    For i As Integer = 0 To contab.Tables(0).Rows.Count - 1
                        Me.LetraCd.Items.Add(Trim(contab.Tables(0).Rows(i)("Clave")))
                    Next
                End If
            End If
            Dim Tipo As DataSet = Eventos.Obtener_DS(" Select convert(NVARCHAR,Clave,103)  +' - ' + Nombre as Clave  from Tipos_Poliza_Sat INNER JOIN Tipo_Poliza ON Tipo_Poliza.Id_Tipo_poliza = Tipos_Poliza_Sat.Id_Tipo_poliza  where Id_Empresa= " & Me.lstCliente.SelectItem & " AND Tipos_Poliza_Sat.Id_Tipo_poliza IN (3,2)     ")
            If Tipo.Tables(0).Rows.Count > 0 Then
                If Me.TipPolD.Items.Count = 0 Then
                    For i As Integer = 0 To Tipo.Tables(0).Rows.Count - 1
                        Me.TipPolD.Items.Add(Trim(Tipo.Tables(0).Rows(i)("Clave")))
                    Next
                Else
                    Me.TipPolD.Items.Clear()
                    For i As Integer = 0 To Tipo.Tables(0).Rows.Count - 1
                        Me.TipPolD.Items.Add(Trim(Tipo.Tables(0).Rows(i)("Clave")))
                    Next
                End If
            End If
            Dim Series As DataSet = Eventos.Obtener_DS(" SELECT Serie FROM dbo.Series WHERE Id_Empresa = " & Me.lstCliente.SelectItem & " ")
            If Series.Tables(0).Rows.Count > 0 Then
                If Me.SerD.Items.Count = 0 Then
                    For i As Integer = 0 To Series.Tables(0).Rows.Count - 1
                        Me.SerD.Items.Add(Trim(Series.Tables(0).Rows(i)("Serie")))
                    Next
                Else
                    Me.SerD.Items.Clear()
                    For i As Integer = 0 To Series.Tables(0).Rows.Count - 1
                        Me.SerD.Items.Add(Trim(Series.Tables(0).Rows(i)("Serie")))
                    Next
                End If
            End If
            For j As Integer = 0 To ds.Tables(0).Rows.Count - 1
                Dim Fila As DataGridViewRow = Me.TablaD.Rows(j)
                Me.TablaD.Item(0, j).Value = False
                Me.TablaD.Item(IdDev.Index, j).Value = ds.Tables(0).Rows(j)("Id_Registro_Xml")
                Me.TablaD.Item(Tp.Index, j).Value = ds.Tables(0).Rows(j)("Tipo")
                Me.TablaD.Item(FechaED.Index, j).Value = ds.Tables(0).Rows(j)("Fecha_Emision")
                Me.TablaD.Item(UUIDD.Index, j).Value = ds.Tables(0).Rows(j)("UUID")
                Me.TablaD.Item(UcfdiD.Index, j).Value = ds.Tables(0).Rows(j)("UsoCFDI")
                Me.TablaD.Item(RFCED.Index, j).Value = ds.Tables(0).Rows(j)("RFC_Receptor")
                Me.TablaD.Item(NomEd.Index, j).Value = ds.Tables(0).Rows(j)("Nombre_Receptor")
                Me.TablaD.Item(ConDev.Index, j).Value = ds.Tables(0).Rows(j)("Conceptos")
                Me.TablaD.Item(MetoD.Index, j).Value = ds.Tables(0).Rows(j)("FormaDePago")
                Me.TablaD.Item(ForPD.Index, j).Value = Trim(ds.Tables(0).Rows(j)("Descripcion"))
                Me.TablaD.Item(SubD.Index, j).Value = ds.Tables(0).Rows(j)("SubTotal")
                Me.TablaD.Item(IvaD.Index, j).Value = ds.Tables(0).Rows(j)("IVA_16")
                Me.TablaD.Item(TotD.Index, j).Value = ds.Tables(0).Rows(j)("Total")

                Me.TablaD.Item(LetraSD.Index, j).Value = ds.Tables(0).Rows(j)("Letra_Sat")

                Me.TablaD.Item(NomCuentaD.Index, j).Value = ds.Tables(0).Rows(j)("Nombre_cuenta")
                Try
                    If Trim(ds.Tables(0).Rows(j)("Clave")) <> "" Then
                        Fila.Cells(LetraCd.Index).Value = Me.LetraCd.Items(Obtener_indexDV(Trim(ds.Tables(0).Rows(j)("Clave"))))
                    End If

                Catch ex As Exception

                End Try
                Dim year As String = ds.Tables(0).Rows(j)("Fecha_Emision").ToString.Substring(6, 4)
                Dim month As String = ds.Tables(0).Rows(j)("Fecha_Emision").ToString.Substring(3, 2)
                Me.TablaD.Item(AnioCD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Anio_Contable")) = True, year, ds.Tables(0).Rows(j)("Anio_Contable"))
                Me.TablaD.Item(MesCD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Mes_Contable")) = True, month, ds.Tables(0).Rows(j)("Mes_Contable"))
                Me.TablaD.Item(ImpED.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Efectivo")) = True, 0, ds.Tables(0).Rows(j)("Imp_Efectivo"))
                Me.TablaD.Item(CtaEfD.Index, j).Value = ds.Tables(0).Rows(j)("Cuenta_Efectivo")
                Me.TablaD.Item(ImpTD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Transf")) = True, 0, ds.Tables(0).Rows(j)("Imp_Transf"))


                Try
                    If Trim(ds.Tables(0).Rows(j)("Banco_Origen")) <> "" Then
                        Fila.Cells(BancoOd.Index).Value = Me.BancoOd.Items(Obtener_indexBDv(Trim(ds.Tables(0).Rows(j)("Banco_Origen"))))
                    End If
                Catch ex As Exception

                End Try

                Me.TablaD.Item(CtaOD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cuenta_Origen")) = True, "", ds.Tables(0).Rows(j)("Cuenta_Origen"))


                Try
                    If Trim(ds.Tables(0).Rows(j)("Banco_Destino")) <> "" Then
                        Fila.Cells(BancoDD.Index).Value = Me.BancoDD.Items(Obtener_indexdDv(Trim(ds.Tables(0).Rows(j)("Banco_Destino"))))
                    End If
                Catch ex As Exception

                End Try
                'Me.TablaImportar.Item(Bancodestino.Index, j).Value = ds.Tables(0).Rows(j)("Banco_Destino")

                Me.TablaD.Item(CtaDD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cuenta_Destino")) = True, "", ds.Tables(0).Rows(j)("Cuenta_Destino"))
                Me.TablaD.Item(FecTD.Index, j).Value = ds.Tables(0).Rows(j)("Fecha_Transaccion")
                Me.TablaD.Item(ImpCHD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Cheque")) = True, 0, ds.Tables(0).Rows(j)("Imp_Cheque"))

                Try
                    If Trim(ds.Tables(0).Rows(j)("Nom_Banco_Ch")) <> "" Then
                        Fila.Cells(NomBankCHD.Index).Value = Me.NomBankCHD.Items(Obtener_indexBDvBH(Trim(ds.Tables(0).Rows(j)("Nom_Banco_Ch"))))
                    End If
                Catch ex As Exception

                End Try
                'Me.TablaD.Item(NomBankCHD.Index, j).Value = ds.Tables(0).Rows(j)("Nom_Banco_Ch")
                Me.TablaD.Item(CtaOrigCHD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cuenta_Origen_Ch")) = True, "", ds.Tables(0).Rows(j)("Cuenta_Origen_Ch"))
                Me.TablaD.Item(NchD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("No_Cheque")) = True, "", ds.Tables(0).Rows(j)("No_Cheque"))
                Me.TablaD.Item(FcHd.Index, j).Value = ds.Tables(0).Rows(j)("Fecha_Ch")
                Me.TablaD.Item(CtaBancosD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cuenta_Bancos")) = True, "", ds.Tables(0).Rows(j)("Cuenta_Bancos"))
                Me.TablaD.Item(CtaChequeD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cuenta_Cheques")) = True, "", ds.Tables(0).Rows(j)("Cuenta_Cheques"))
                Me.TablaD.Item(ProvAD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Provision_Acreedor")) = True, 0, ds.Tables(0).Rows(j)("Provision_Acreedor"))
                Me.TablaD.Item(ProvPD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Provision_Proveedor")) = True, 0, ds.Tables(0).Rows(j)("Provision_Proveedor"))
                Me.TablaD.Item(DifD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Diferencia")) = True, 0, ds.Tables(0).Rows(j)("Diferencia"))

                Try
                    If Trim(ds.Tables(0).Rows(j)("Tipo_Poliza")) <> "" Then
                        Fila.Cells(TipPolD.Index).Value = Me.TipPolD.Items(Obtener_index2Dv(Trim(ds.Tables(0).Rows(j)("Tipo_Poliza"))))
                    End If

                Catch ex As Exception

                End Try
                Try
                    If Trim(ds.Tables(0).Rows(j)("Ser")) <> "" Then
                        Fila.Cells(SerD.Index).Value = Me.SerD.Items(Obtener_indexSerD(Trim(ds.Tables(0).Rows(j)("Ser"))))
                    End If

                Catch ex As Exception

                End Try
                '   Me.TablaImportar.Item(tipopoliza.INDEX, j).Value = ds.Tables(0).Rows(j)("Tipo_Poliza")
                Me.TablaD.Item(ImpGD.Index, j).Value = ds.Tables(0).Rows(j)("Imp_Grabado")
                Me.TablaD.Item(ImpEDV.Index, j).Value = ds.Tables(0).Rows(j)("Imp_Exento")
                Me.TablaD.Item(IVARD.Index, j).Value = ds.Tables(0).Rows(j)("IVA_real")
                Me.TablaD.Item(PACD.Index, j).Value = ds.Tables(0).Rows(j)("Prc_Pago_Acumulado")
                Me.TablaD.Item(TRD.Index, j).Value = ds.Tables(0).Rows(j)("Total_Real")
                Me.TablaD.Item(MD.Index, j).Value = ds.Tables(0).Rows(j)("Moneda")
                Me.TablaD.Item(UCD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Utilidad_Cambiaria")) = True, 0, ds.Tables(0).Rows(j)("Utilidad_Cambiaria"))
                Me.TablaD.Item(PCD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Perdida_Cambiaria")) = True, 0, ds.Tables(0).Rows(j)("Perdida_Cambiaria"))
                Me.TablaD.Item(ImpDevD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Devolucion")) = True, 0, ds.Tables(0).Rows(j)("Imp_Devolucion"))
                Me.TablaD.Item(CtaDevD.Index, j).Value = ds.Tables(0).Rows(j)("Cuenta_Devolucion")

                Me.TablaD.Item(NPolD.Index, j).Value = ds.Tables(0).Rows(j)("numpol")
                Me.TablaD.Item(RisrD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("RIRS")) = True, 0, ds.Tables(0).Rows(j)("RIRS"))
                Me.TablaD.Item(RIVAD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("RIVA")) = True, 0, ds.Tables(0).Rows(j)("RIVA"))


                'Ajutes y Anticipos
                Me.TablaD.Item(AntiD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Anticipos")) = True, 0, ds.Tables(0).Rows(j)("Anticipos"))
                Me.TablaD.Item(CtaAntiD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cta_Ajuste")) = True, "", ds.Tables(0).Rows(j)("Cta_Ajuste"))
                Me.TablaD.Item(AjusD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Ajuste")) = True, 0, ds.Tables(0).Rows(j)("Ajuste"))
                Me.TablaD.Item(CtaAD.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cta_Anticipos")) = True, "", ds.Tables(0).Rows(j)("Cta_Anticipos"))
                Me.TablaD.Item(ImpPd.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Provision")) = True, 0, ds.Tables(0).Rows(j)("Imp_Provision"))
                Me.TablaD.Item(UIDr.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("UUID_Relacion")) = True, "", ds.Tables(0).Rows(j)("UUID_Relacion"))
                If Me.BarraD.Value1 = Me.BarraD.Maximum Then
                    Me.BarraD.Minimum = 0
                    Me.Cursor = Cursors.Arrow
                    RadMessageBox.Show("Movimientos Cargados ...", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
                    Me.BarraD.Value1 = 0
                Else
                    Me.BarraD.Value1 += 1
                End If
            Next
        Else
            RadMessageBox.Show("No hay registros para procesar", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
        End If



    End Sub
    Private Sub Cargar_valores_contablesD()
        If Me.TablaD.Rows.Count >= 1 Then
            For i As Integer = 0 To Me.TablaD.Rows.Count - 1
                If Trim(Me.TablaD.Item(TotD.Index, i).Value) <> "P" Then
                    If Trim(Me.TablaD.Item(MD.Index, i).Value.ToString) <> "USD" Then
                        If Me.TablaD.Item(TotD.Index, i).Value > 0 And Me.TablaD.Item(TotD.Index, i).Value <> Nothing Then
                            'importe gravado
                            Me.TablaD.Item(ImpGD.Index, i).Value = Math.Round(IIf(IsDBNull(Me.TablaD.Item(IvaD.Index, i).Value) = True, 0, Me.TablaD.Item(IvaD.Index, i).Value / 0.16), 2)
                            'importe exento
                            Me.TablaD.Item(ImpEDV.Index, i).Value = Math.Round(IIf(IsDBNull(Me.TablaD.Item(SubD.Index, i).Value) = True, 0, Me.TablaD.Item(SubD.Index, i).Value - Me.TablaD.Item(ImpGD.Index, i).Value), 2)
                            'Iva_real
                            Me.TablaD.Item(IVARD.Index, i).Value = Math.Round(IIf(IsDBNull(Me.TablaD.Item(ImpGD.Index, i).Value) = True, 0, Me.TablaD.Item(ImpGD.Index, i).Value * 0.16), 2)
                            'calcula el % Pago Acumulado
                            If Me.TablaD.Item(ImpEDV.Index, i).Value < 1 Then
                                Me.TablaD.Item(ImpGD.Index, i).Value = Me.TablaD.Item(ImpGD.Index, i).Value + Me.TablaD.Item(ImpEDV.Index, i).Value
                                Me.TablaD.Item(ImpEDV.Index, i).Value = 0
                            End If
                            'Total real
                            Me.TablaD.Item(TRD.Index, i).Value = Me.TablaD.Item(ImpGD.Index, i).Value + Me.TablaD.Item(ImpEDV.Index, i).Value + Me.TablaD.Item(IVARD.Index, i).Value
                        End If
                    Else
                        ' calcular en dolares
                        If Me.TablaD.Item(TotD.Index, i).Value > 0 And Me.TablaD.Item(TotD.Index, i).Value <> Nothing Then
                            'importe gravado
                            Me.TablaD.Item(ImpGD.Index, i).Value = Math.Round(IIf(IsDBNull(Me.TablaD.Item(IvaD.Index, i).Value) = True, 0, (Me.TablaD.Item(IvaD.Index, i).Value * Calcula_Moneda(Me.TablaD.Item(FechaED.Index, i).Value.ToString.Substring(0, 10))) / 0.16), 2)
                            'importe exento
                            Me.TablaD.Item(ImpEDV.Index, i).Value = Math.Round(IIf(IsDBNull(Me.TablaD.Item(SubD.Index, i).Value) = True, 0, (Me.TablaD.Item(SubD.Index, i).Value * Calcula_Moneda(Me.TablaD.Item(FechaED.Index, i).Value.ToString.Substring(0, 10))) - Me.TablaD.Item(ImpGD.Index, i).Value), 2)
                            'Iva_real
                            Me.TablaD.Item(IVARD.Index, i).Value = Math.Round(IIf(IsDBNull(Me.TablaD.Item(ImpGD.Index, i).Value) = True, 0, Me.TablaD.Item(ImpGD.Index, i).Value * 0.16), 2)
                            'calcula el % Pago Acumulado
                            'Total real
                            If Me.TablaD.Item(ImpEDV.Index, i).Value < 1 Then
                                Me.TablaD.Item(ImpGD.Index, i).Value = Me.TablaD.Item(ImpGD.Index, i).Value + Me.TablaD.Item(ImpEDV.Index, i).Value
                                Me.TablaD.Item(ImpEDV.Index, i).Value = 0
                            End If
                            Me.TablaD.Item(TRD.Index, i).Value = Me.TablaD.Item(ImpGD.Index, i).Value + Me.TablaD.Item(ImpEDV.Index, i).Value + Me.TablaD.Item(IVARD.Index, i).Value
                        End If

                    End If
                End If
            Next
        End If
    End Sub
    Private Sub Color_ColumnasD()
        Dim contador As Integer = 0
        For Each Column As DataGridViewColumn In TablaD.Columns
            If Column.Index = AnioCD.Index Or Column.Index = MesCD.Index Or Column.Index = BancoOd.Index Or Column.Index = BancoDD.Index Or Column.Index = FecTD.Index Or Column.Index = NomBankCHD.Index Or Column.Index = NchD.Index Or Column.Index = FcHd.Index Or Column.Index = ProvAD.Index Or Column.Index = ProvPD.Index Or Column.Index = UCD.Index Or Column.Index = PCD.Index Or Column.Index = ImpDevD.Index Or Column.Index = CtaDevD.Index Then
                Column.DefaultCellStyle.BackColor = Color.RoyalBlue
            ElseIf Column.Index = AjusD.Index Then
                Column.DefaultCellStyle.BackColor = Color.GreenYellow
            ElseIf Column.Index = AntiD.Index Then
                Column.DefaultCellStyle.BackColor = Color.LawnGreen
            ElseIf Column.Index = ImpPd.Index Then
                Column.DefaultCellStyle.BackColor = Color.MediumPurple
            ElseIf Column.Index = TipPolD.Index Or Column.Index = NPolD.Index Then
                Column.DefaultCellStyle.BackColor = Color.Orange
            ElseIf Column.Index = NomCuentaD.Index Or Column.Index = CtaBancosD.Index Then
                Column.DefaultCellStyle.BackColor = Color.Orange
            ElseIf Column.Index = ImpED.Index Or Column.Index = ImpTD.Index Or Column.Index = ImpCHD.Index Then
                Column.DefaultCellStyle.BackColor = Color.OliveDrab
            End If
        Next
    End Sub

    Private Sub CmdGuardarDev_Click(sender As Object, e As EventArgs) Handles CmdGuardarDev.Click
        Guardar_Dev()
    End Sub
    Private Sub Guardar_Dev()
        RadMessageBox.SetThemeName("MaterialBlueGrey")
        If Me.TablaD.Rows.Count >= 1 Then
            For i As Integer = 0 To Me.TablaD.Rows.Count - 1
                Dim tabla As String = ""
                If Me.TablaD.Item(2, i).Value = "P" Then
                    tabla = "Xml_Complemento"
                Else
                    tabla = "Xml_Sat"
                End If
                Guardar_XML(IIf(IsDBNull(Me.TablaD.Item(LetraSD.Index, i).Value), "", Me.TablaD.Item(LetraSD.Index, i).Value), IIf(IsDBNull(Me.TablaD.Item(NomCuentaD.Index, i).Value), "", Me.TablaD.Item(NomCuentaD.Index, i).Value), IIf(IsDBNull(Me.TablaD.Item(LetraCd.Index, i).Value), "", Me.TablaD.Item(LetraCd.Index, i).Value),
                           Me.TablaD.Item(AnioCD.Index, i).Value, Me.TablaD.Item(MesCD.Index, i).Value, Me.TablaD.Item(ImpED.Index, i).Value, IIf(IsDBNull(Me.TablaD.Item(CtaEfD.Index, i).Value), "", Me.TablaD.Item(CtaEfD.Index, i).Value),
                           Me.TablaD.Item(ImpTD.Index, i).Value, IIf(IsDBNull(Me.TablaD.Item(BancoOd.Index, i).Value), "", Me.TablaD.Item(BancoOd.Index, i).Value), IIf(IsDBNull(Me.TablaD.Item(CtaOD.Index, i).Value), "", Me.TablaD.Item(CtaOD.Index, i).Value), IIf(IsDBNull(Me.TablaD.Item(BancoDD.Index, i).Value), "", Me.TablaD.Item(BancoDD.Index, i).Value),
                           IIf(IsDBNull(Me.TablaD.Item(FecTD.Index, i).Value), "", Me.TablaD.Item(FecTD.Index, i).Value), Me.TablaD.Item(ImpCHD.Index, i).Value, IIf(IsDBNull(Me.TablaD.Item(NomBankCHD.Index, i).Value), "", Me.TablaD.Item(NomBankCHD.Index, i).Value), IIf(IsDBNull(Me.TablaD.Item(CtaOrigCHD.Index, i).Value), "", Me.TablaD.Item(CtaOrigCHD.Index, i).Value), IIf(IsDBNull(Me.TablaD.Item(NchD.Index, i).Value), "", Me.TablaD.Item(NchD.Index, i).Value),
                          IIf(IsDBNull(Me.TablaD.Item(FcHd.Index, i).Value), "", Me.TablaD.Item(FcHd.Index, i).Value), IIf(IsDBNull(Me.TablaD.Item(CtaBancosD.Index, i).Value), "", Me.TablaD.Item(CtaBancosD.Index, i).Value), IIf(IsDBNull(Me.TablaD.Item(ProvAD.Index, i).Value), 0, Me.TablaD.Item(ProvAD.Index, i).Value), IIf(IsDBNull(Me.TablaD.Item(ProvPD.Index, i).Value), 0, Me.TablaD.Item(ProvPD.Index, i).Value),
                           IIf(IsDBNull(Me.TablaD.Item(DifD.Index, i).Value), 0, Me.TablaD.Item(DifD.Index, i).Value), IIf(IsDBNull(Me.TablaD.Item(TipPolD.Index, i).Value), "", Me.TablaD.Item(TipPolD.Index, i).Value), IIf(IsDBNull(Me.TablaD.Item(ImpGD.Index, i).Value), 0, Me.TablaD.Item(ImpGD.Index, i).Value), IIf(IsDBNull(Me.TablaD.Item(ImpEDV.Index, i).Value), 0, Me.TablaD.Item(ImpEDV.Index, i).Value),
                         IIf(IsDBNull(Me.TablaD.Item(IVARD.Index, i).Value), 0, Me.TablaD.Item(IVARD.Index, i).Value), IIf(IsDBNull(Me.TablaD.Item(PACD.Index, i).Value), 0, Me.TablaD.Item(PACD.Index, i).Value), IIf(IsDBNull(Me.TablaD.Item(TRD.Index, i).Value), 0, Me.TablaD.Item(TRD.Index, i).Value), Me.TablaD.Item(UCD.Index, i).Value, IIf(IsDBNull(Me.TablaD.Item(PCD.Index, i).Value), 0, Me.TablaD.Item(PCD.Index, i).Value),
                           Me.TablaD.Item(ImpDevD.Index, i).Value, IIf(IsDBNull(Me.TablaD.Item(CtaDevD.Index, i).Value), "", Me.TablaD.Item(CtaDevD.Index, i).Value), Me.TablaD.Item(IdDev.Index, i).Value, IIf(IsDBNull(Me.TablaD.Item(NPolD.Index, i).Value), "", Me.TablaD.Item(NPolD.Index, i).Value), Me.TablaD.Item(RisrD.Index, i).Value, Me.TablaD.Item(RIVAD.Index, i).Value, tabla, IIf(IsDBNull(Me.TablaD.Item(CtaDD.Index, i).Value), "", Me.TablaD.Item(CtaDD.Index, i).Value),
                           IIf(IsDBNull(Me.TablaD.Item(AjusD.Index, i).Value), 0, Me.TablaD.Item(AjusD.Index, i).Value), IIf(IsDBNull(Me.TablaD.Item(CtaAD.Index, i).Value), "", Me.TablaD.Item(CtaAD.Index, i).Value),
                           IIf(IsDBNull(Me.TablaD.Item(AntiD.Index, i).Value), 0, Me.TablaD.Item(AntiD.Index, i).Value), IIf(IsDBNull(Me.TablaD.Item(CtaAntiD.Index, i).Value), "", Me.TablaD.Item(CtaAntiD.Index, i).Value),
                           IIf(IsDBNull(Me.TablaD.Item(ImpPd.Index, i).Value), 0, Me.TablaD.Item(ImpPd.Index, i).Value), "", 0, "", "", "", "", "", "", "", IIf(IsDBNull(Me.TablaD.Item(SerD.Index, i).Value), "", Me.TablaD.Item(SerD.Index, i).Value), "", "", IIf(IsDBNull(Me.TablaD.Item(CtaChequeD.Index, i).Value), "", Me.TablaD.Item(CtaChequeD.Index, i).Value))
            Next
            RadMessageBox.Show("Proceso Guardado Completado ...", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
        End If
    End Sub

    Private Sub CmdProcesoDev_Click(sender As Object, e As EventArgs) Handles CmdProcesoDev.Click
        If Me.TablaD.Rows.Count > 0 Then
            If Me.lstCliente.SelectText <> "" Then
                If Verifica_catalogo_cliente(Me.lstCliente.SelectItem) = True Then
                    Guardar_Dev()
                    RadMessageBox.SetThemeName("MaterialBlueGrey")
                    If RadMessageBox.Show("El cliente " & Me.lstCliente.SelectText & " es correcto?", Eventos.titulo_app, MessageBoxButtons.YesNo, RadMessageIcon.Question) = Windows.Forms.DialogResult.Yes Then
                        Me.BarraD.Maximum = Me.TablaD.RowCount - 1
                        Me.BarraD.Minimum = 0
                        Me.BarraD.Value1 = 0

                        For p As Integer = 0 To Me.TablaD.RowCount - 1
                            If Me.TablaD.Item(AplD.Index, p).Value = True Then ' se paso todos los filtros de creacion
                                Codificar_polizasDev(p)
                            End If
                            If Me.BarraD.Value1 = Me.BarraD.Maximum Then
                                Me.BarraD.Minimum = 0
                                Me.Cursor = Cursors.Arrow
                                RadMessageBox.Show("Proceso Terminado", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
                                Me.BarraD.Value1 = 0
                            Else
                                Me.BarraD.Value1 += 1
                            End If
                        Next
                    End If
                Else
                    RadMessageBox.Show("No existe Catalogo de cuentas para: " & Me.lstCliente.SelectText & "", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
                End If
                Me.CmdBuscarDev.PerformClick()
            Else
                RadMessageBox.Show("No se ha seleccionado una Empresa", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
            End If



        Else
            RadMessageBox.SetThemeName("MaterialBlueGrey")
            RadMessageBox.Show("No se ha Importado ningun archivo", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
        End If
    End Sub
    Private Sub Codificar_polizasDev(ByVal posicion As Integer)
        Dim poliza_Sistema As String = ""
        '  If Me.TablaImportar.Item(Psistema.Index, posicion).Value <> "" Then ' quitar linea despues del desbloqueo
        poliza_Sistema = Calcula_polizaD(posicion)
        '  End If

        'Calcular consecutivo poliza
        Dim posi As Integer = InStr(1, poliza_Sistema, "-", CompareMethod.Binary)
        Dim cuantos As Integer = Len(poliza_Sistema) - Len(poliza_Sistema.Substring(0, posi))
        Dim consecutivo As Integer = Val(poliza_Sistema.Substring(posi, cuantos))
        'Crear poliza
        'Checar dia de la Poliza poner if
        Dim dia As String = ""
        If Me.TablaD.Item(ImpTD.Index, posicion).Value > 0 Then
            dia = Me.TablaD.Item(FecTD.Index, posicion).Value.ToString.Substring(0, 2)
        ElseIf Me.TablaD.Item(ImpED.Index, posicion).Value > 0 Then
            dia = Me.TablaD.Item(FechaED.Index, posicion).Value.ToString.Substring(0, 2)
        ElseIf Me.TablaD.Item(ImpCHD.Index, posicion).Value > 0 Then
            dia = Me.TablaD.Item(FcHd.Index, posicion).Value.ToString.Substring(0, 2)
        Else
            dia = Me.TablaD.Item(FechaED.Index, posicion).Value.ToString.Substring(0, 2)
        End If

        ' CREAR iF para calcular el dia
        If Creapoliza(poliza_Sistema, Me.TablaD.Item(AnioCD.Index, posicion).Value, Me.TablaD.Item(MesCD.Index, posicion).Value, dia,
                   consecutivo, Checa_tipo(Me.TablaD.Item(TipPolD.Index, posicion).Value, Me.lstCliente.SelectItem),
                   Me.TablaD.Item(FechaED.Index, posicion).Value, "Nta Cred Fact" & " " & Trim(Me.TablaD.Item(UUIDD.Index, posicion).Value), "Carga", Me.TablaD.Item(NPolD.Index, posicion).Value, Me.TablaD.Item(IdDev.Index, posicion).Value, False) = True Then



            If Buscafactura(Me.TablaD.Item(UUIDD.Index, posicion).Value, "C") = True Then
                'Se inserta la Factura
                Inserta_Comprobante_Fiscal(poliza_Sistema, Me.TablaD.Item(AnioCD.Index, posicion).Value, Me.TablaD.Item(MesCD.Index, posicion).Value,
                             Me.TablaD.Item(RFCED.Index, posicion).Value, Me.TablaD.Item(FechaED.Index, posicion).Value,
                               Me.TablaD.Item(UUIDD.Index, posicion).Value, "Factura " & Trim(Me.TablaD.Item(RFCED.Index, posicion).Value) & " C", Me.TablaD.Item(TRD.Index, posicion).Value)
            Else
                'Se Edita la Factura
                Edita_Factura(Me.TablaD.Item(UUIDD.Index, posicion).Value, "C", poliza_Sistema)
            End If


            If Me.TablaD.Item(ImpED.Index, posicion).Value > 0 Then
                ' Insertar registro contabiidad electronica efectivo
                Inserta_Comprobante_Fiscal_Efectivo(poliza_Sistema, Me.TablaD.Item(AnioCD.Index, posicion).Value, Me.TablaD.Item(MesCD.Index, posicion).Value,
                                Me.TablaD.Item(RFCED.Index, posicion).Value, Me.TablaD.Item(TipPolD.Index, posicion).Value.ToString.Substring(0, 3), Me.TablaD.Item(FechaED.Index, posicion).Value,
                              "", "", "", "", Me.TablaD.Item(ImpED.Index, posicion).Value)
            End If
            If Trim(UCase(Me.lblce.Text)) = "TRUE" Then ' SE INSERTA CONTABILIDAD ELECTRONICA

                If Me.TablaD.Item(ImpTD.Index, posicion).Value > 0 Then


                    Inserta_Comprobante_Fiscal_Transf(poliza_Sistema, Me.TablaD.Item(AnioCD.Index, posicion).Value, Me.TablaD.Item(MesCD.Index, posicion).Value,
                                    Me.TablaD.Item(RFCED.Index, posicion).Value, Me.TablaD.Item(TipPolD.Index, posicion).Value.ToString.Substring(0, 3), Me.TablaD.Item(FecTD.Index, posicion).Value,
                                  "", "", "", Me.TablaD.Item(UUIDD.Index, posicion).Value, Me.TablaD.Item(ImpTD.Index, posicion).Value, "", Me.TablaD.Item(CtaBancosD.Index, posicion).Value)
                End If

                If Me.TablaD.Item(ImpCHD.Index, posicion).Value > 0 Then

                    Inserta_Comprobante_Fiscal_Cheque(poliza_Sistema, Me.TablaD.Item(AnioCD.Index, posicion).Value, Me.TablaD.Item(MesCD.Index, posicion).Value,
                                    Me.TablaD.Item(RFCED.Index, posicion).Value, Me.TablaD.Item(TipPolD.Index, posicion).Value.ToString.Substring(0, 3), Me.TablaD.Item(FcHd.Index, posicion).Value,
                                  Me.TablaD.Item(NchD.Index, posicion).Value, "", Me.TablaD.Item(CtaOrigCHD.Index, posicion).Value, Me.TablaD.Item(UUIDD.Index, posicion).Value, Me.TablaD.Item(ImpCHD.Index, posicion).Value)
                End If
            End If

            'Verificara el sistema las polizas automatizadas
            Crear_detalleDev(posicion, poliza_Sistema)
        End If
    End Sub


    Private Sub Crear_detalleDev(ByVal p As Integer, ByVal pol As String)
        Dim Item As Integer = 1
        Dim cadena As String = Trim(Me.TablaD.Item(NomCuentaD.Index, p).Value)
        Dim posi As Integer = InStr(1, cadena, "-", CompareMethod.Binary)
        Dim cuantos As Integer = Len(cadena) - Len(cadena.Substring(0, posi))
        Dim Cuenta_Cargo As String = cadena.Substring(posi, cuantos)
        Dim Cuenta2 As String = ""
        Dim PorcenPro, ImpGpro, ImpEpro, ImpIvaP As Decimal
        PorcenPro = Me.TablaD.Item(ImpPd.Index, p).Value / ImpFaCURA(Me.TablaD.Item(UUIDD.Index, p).Value, "Total_Real")
        ImpGpro = ImpFaCURA(Me.TablaD.Item(UUIDD.Index, p).Value, "Imp_Grabado") * PorcenPro
        ImpEpro = ImpFaCURA(Me.TablaD.Item(UUIDD.Index, p).Value, "Imp_Exento") * PorcenPro
        ImpIvaP = ImpFaCURA(Me.TablaD.Item(UUIDD.Index, p).Value, "IVA_real") * PorcenPro
        If Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value = "I" Then

            If Me.TablaD.Item(ImpEDV.Index, p).Value > 0 And Me.TablaD.Item(ImpGD.Index, p).Value > 0 And Me.TablaD.Item(IVARD.Index, p).Value > 0 Then ' tiene grabado y exento

                Cuenta2 = RegresaCunetaDev(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "DevSVentasEx", Me.TablaD.Item(SerD.Index, p).Value), Trim(Me.TablaD.Item(RFCED.Index, p).Value), p, 1)
                Cuenta_Cargo = RegresaCunetaDev(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "DevSVentasG", Me.TablaD.Item(SerD.Index, p).Value), Trim(Me.TablaD.Item(RFCED.Index, p).Value), p, 1)
                Crea_detalle_poliza(pol, Item, Me.TablaD.Item(ImpGD.Index, p).Value, 0, Cuenta_Cargo, "")
                Item = Item + 1
                Crea_detalle_poliza(pol, Item, Me.TablaD.Item(ImpEDV.Index, p).Value, 0, Cuenta2, "")
                Item = Item + 1
                Crea_detalle_poliza(pol, Item, Me.TablaD.Item(IVARD.Index, p).Value, 0, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "IvaSDev", Me.TablaD.Item(SerD.Index, p).Value), "")
                ' Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(IVAR.Index, p).Value - ImpIvaPr, "2080000100010000", "")
                Item = Item + 1

            ElseIf Me.TablaD.Item(ImpEDV.Index, p).Value > 0 And Me.TablaD.Item(ImpGD.Index, p).Value <= 0 Then 'Tiene Exento o 0

                Cuenta_Cargo = RegresaCunetaDev(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "DevSVentasEx", Me.TablaImportar.Item(SerD.Index, p).Value), Trim(Me.TablaD.Item(RFCED.Index, p).Value), p, 1)
                Crea_detalle_poliza(pol, Item, Me.TablaD.Item(ImpEDV.Index, p).Value, 0, Cuenta_Cargo, "")
                Item = Item + 1

            ElseIf Me.TablaD.Item(ImpEDV.Index, p).Value <= 0 And Me.TablaD.Item(ImpGD.Index, p).Value > 0 Then 'Tiene Grabado

                Cuenta_Cargo = RegresaCunetaDev(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "DevSVentasG", Me.TablaD.Item(SerD.Index, p).Value), Trim(Me.TablaD.Item(RFCED.Index, p).Value), p, 1)
                Crea_detalle_poliza(pol, Item, Me.TablaD.Item(ImpGD.Index, p).Value, 0, Cuenta_Cargo, "")
                Item = Item + 1
                Crea_detalle_poliza(pol, Item, Me.TablaD.Item(IVARD.Index, p).Value, 0, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "IvaSDev", Me.TablaD.Item(SerD.Index, p).Value), "")
                ' Crea_detalle_poliza(pol, Item, 0, Me.TablaImportar.Item(IVAR.Index, p).Value - ImpIvaPr, "2080000100010000", "")
                Item = Item + 1

            End If
            'Abonos con cuentas efectivo bancos


        End If

        'Cargos con cuentas efectivo bancos
        If Me.TablaD.Item(ImpED.Index, p).Value > 0 And Me.TablaD.Item(ImpTD.Index, p).Value > 0 And Me.TablaD.Item(ImpCHD.Index, p).Value > 0 Then 'TODOS

            cadena = Trim(Me.TablaD.Item(CtaEfD.Index, p).Value)
            posi = InStr(1, cadena, "-", CompareMethod.Binary)
            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
            Cuenta_Cargo = cadena.Substring(posi, cuantos)
            Crea_detalle_poliza(pol, Item, 0, Me.TablaD.Item(ImpED.Index, p).Value, Cuenta_Cargo, "")

            Item = Item + 1

            cadena = Trim(Me.TablaD.Item(CtaBancosD.Index, p).Value)
            posi = InStr(1, cadena, "-", CompareMethod.Binary)
            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
            Cuenta_Cargo = cadena.Substring(posi, cuantos)
            Crea_detalle_poliza(pol, Item, 0, Me.TablaD.Item(ImpTD.Index, p).Value, Cuenta_Cargo, "")

            Item = Item + 1
            cadena = Trim(Me.TablaD.Item(CtaBancosD.Index, p).Value)
            posi = InStr(1, cadena, "-", CompareMethod.Binary)
            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
            Cuenta_Cargo = cadena.Substring(posi, cuantos)
            Crea_detalle_poliza(pol, Item, 0, Me.TablaD.Item(ImpCHD.Index, p).Value, Cuenta_Cargo, Me.TablaD.Item(NchD.Index, p).Value)


        ElseIf Me.TablaD.Item(ImpED.Index, p).Value > 0 And Me.TablaD.Item(ImpTD.Index, p).Value > 0 And Me.TablaD.Item(ImpCHD.Index, p).Value = 0 Then 'Efectivo y Transferencia
            cadena = Trim(Me.TablaD.Item(CtaEfD.Index, p).Value)
            posi = InStr(1, cadena, "-", CompareMethod.Binary)
            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
            Cuenta_Cargo = cadena.Substring(posi, cuantos)
            Crea_detalle_poliza(pol, Item, 0, Me.TablaD.Item(ImpED.Index, p).Value, Cuenta_Cargo, "")
            Item = Item + 1
            cadena = Trim(Me.TablaD.Item(CtaBancosD.Index, p).Value)
            posi = InStr(1, cadena, "-", CompareMethod.Binary)
            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
            Cuenta_Cargo = cadena.Substring(posi, cuantos)
            Crea_detalle_poliza(pol, Item, 0, Me.TablaD.Item(ImpTD.Index, p).Value, Cuenta_Cargo, "")

        ElseIf Me.TablaD.Item(ImpED.Index, p).Value = 0 And Me.TablaD.Item(ImpTD.Index, p).Value > 0 And Me.TablaD.Item(ImpCHD.Index, p).Value > 0 Then 'Cheque y Transferencia

            cadena = Trim(Me.TablaD.Item(CtaBancosD.Index, p).Value)
            posi = InStr(1, cadena, "-", CompareMethod.Binary)
            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
            Cuenta_Cargo = cadena.Substring(posi, cuantos)
            Crea_detalle_poliza(pol, Item, 0, Me.TablaD.Item(ImpTD.Index, p).Value, Cuenta_Cargo, "")
            Item = Item + 1
            cadena = Trim(Me.TablaD.Item(CtaBancosD.Index, p).Value)
            posi = InStr(1, cadena, "-", CompareMethod.Binary)
            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
            Cuenta_Cargo = cadena.Substring(posi, cuantos)
            Crea_detalle_poliza(pol, Item, 0, Me.TablaD.Item(ImpCHD.Index, p).Value, Cuenta_Cargo, Me.TablaD.Item(NchD.Index, p).Value)

        ElseIf Me.TablaD.Item(ImpED.Index, p).Value > 0 And Me.TablaD.Item(ImpTD.Index, p).Value = 0 And Me.TablaD.Item(ImpCHD.Index, p).Value > 0 Then 'Cheque y Efecivo
            cadena = Trim(Me.TablaD.Item(CtaEfD.Index, p).Value)
            posi = InStr(1, cadena, "-", CompareMethod.Binary)
            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
            Cuenta_Cargo = cadena.Substring(posi, cuantos)
            Crea_detalle_poliza(pol, Item, 0, Me.TablaD.Item(ImpED.Index, p).Value, Cuenta_Cargo, "")
            Item = Item + 1
            cadena = Trim(Me.TablaD.Item(CtaBancosD.Index, p).Value)
            posi = InStr(1, cadena, "-", CompareMethod.Binary)
            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
            Cuenta_Cargo = cadena.Substring(posi, cuantos)
            Crea_detalle_poliza(pol, Item, 0, Me.TablaD.Item(ImpCHD.Index, p).Value, Cuenta_Cargo, Me.TablaD.Item(NchD.Index, p).Value)
        ElseIf Me.TablaD.Item(ImpED.Index, p).Value > 0 And Me.TablaD.Item(ImpTD.Index, p).Value = 0 And Me.TablaD.Item(ImpCHD.Index, p).Value = 0 Then ' Efecivo
            'Cuenta del Abono
            cadena = Trim(Me.TablaD.Item(CtaEfD.Index, p).Value)
            posi = InStr(1, cadena, "-", CompareMethod.Binary)
            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
            Cuenta_Cargo = cadena.Substring(posi, cuantos)

            Crea_detalle_poliza(pol, Item, 0, Me.TablaD.Item(ImpED.Index, p).Value, Cuenta_Cargo, "")

        ElseIf Me.TablaD.Item(ImpED.Index, p).Value = 0 And Me.TablaD.Item(ImpTD.Index, p).Value > 0 And Me.TablaD.Item(ImpCHD.Index, p).Value = 0 Then ' Transferencia
            'Cuenta del Abono transferencia
            cadena = Trim(Me.TablaD.Item(CtaBancosD.Index, p).Value)
            posi = InStr(1, cadena, "-", CompareMethod.Binary)
            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
            Cuenta_Cargo = cadena.Substring(posi, cuantos)
            Crea_detalle_poliza(pol, Item, 0, Me.TablaD.Item(ImpTD.Index, p).Value, Cuenta_Cargo, IIf(IsDBNull(Me.TablaD.Item(NchD.Index, p).Value) = True, "", Me.TablaD.Item(NchD.Index, p).Value))

        ElseIf Me.TablaD.Item(ImpED.Index, p).Value = 0 And Me.TablaD.Item(ImpTD.Index, p).Value = 0 And Me.TablaD.Item(ImpCHD.Index, p).Value > 0 Then 'Cheque 
            cadena = Trim(Me.TablaD.Item(CtaBancosD.Index, p).Value)
            posi = InStr(1, cadena, "-", CompareMethod.Binary)
            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
            Cuenta_Cargo = cadena.Substring(posi, cuantos)
            Crea_detalle_poliza(pol, Item, 0, Me.TablaD.Item(ImpCHD.Index, p).Value, Cuenta_Cargo, Me.TablaD.Item(NchD.Index, p).Value)

        End If
        'Inserta Anticipo
        If Me.TablaD.Item(AntiD.Index, p).Value > 0 Then ' Se verifica si cuenta con anticipos +
            Item = Item + 1
            cadena = Trim(Me.TablaD.Item(CtaAntiD.Index, p).Value)
            posi = InStr(1, cadena, "-", CompareMethod.Binary)
            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
            Cuenta_Cargo = cadena.Substring(posi, cuantos)
            Crea_detalle_poliza(pol, Item, Me.TablaD.Item(AntiD.Index, p).Value, 0, Cuenta_Cargo, "")
        ElseIf Me.TablaD.Item(AntiD.Index, p).Value < 0 Then ' Se verifica si cuenta  anticipos -
            Item = Item + 1
            cadena = Trim(Me.TablaD.Item(CtaAntiD.Index, p).Value)
            posi = InStr(1, cadena, "-", CompareMethod.Binary)
            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
            Cuenta_Cargo = cadena.Substring(posi, cuantos)
            Crea_detalle_poliza(pol, Item, 0, Me.TablaD.Item(AntiD.Index, p).Value * -1, Cuenta_Cargo, "")
        End If
        'Inserta Ajustes
        If Me.TablaD.Item(AjusD.Index, p).Value > 0 Then ' Se verifica si cuenta con ajuste +
            Item = Item + 1
            cadena = Trim(Me.TablaD.Item(CtaAD.Index, p).Value)
            posi = InStr(1, cadena, "-", CompareMethod.Binary)
            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
            Cuenta_Cargo = cadena.Substring(posi, cuantos)
            'cargo de Ajuste
            Crea_detalle_poliza(pol, Item, Me.TablaD.Item(AjusD.Index, p).Value, 0, Cuenta_Cargo, "")

        ElseIf Me.TablaD.Item(AjusD.Index, p).Value < 0 Then ' Se verifica si cuenta con ajuste -
            Item = Item + 1
            cadena = Trim(Me.TablaD.Item(CtaAD.Index, p).Value)
            posi = InStr(1, cadena, "-", CompareMethod.Binary)
            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
            Cuenta_Cargo = cadena.Substring(posi, cuantos)
            'Abono de Ajuste
            Crea_detalle_poliza(pol, Item, 0, Me.TablaD.Item(AjusD.Index, p).Value * -1, Cuenta_Cargo, "")
        End If
        If Me.TablaD.Item(PCD.Index, p).Value > 0 Then ' Se perdida cambiaria
            Item = Item + 1
            Crea_detalle_poliza(pol, Item, Me.TablaD.Item(PCD.Index, p).Value, 0, "7010000100000000", "")
        End If
        If Me.TablaD.Item(UCD.Index, p).Value > 0 Then ' Se utilidad cambiaria
            Item = Item + 1
            Crea_detalle_poliza(pol, Item, 0, Me.TablaD.Item(UCD.Index, p).Value, "7020000100000000", "")
        End If



        If Trim(Me.TablaD.Item(ImpPd.Index, p).Value) > 0 Then ' Compras  


            Item = Item + 1
            'Cancela Cuenta Cliente
            Cuenta_Cargo = RegresaCunetaDev(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "Clientes", Me.TablaD.Item(SerD.Index, p).Value), Trim(Me.TablaD.Item(RFCED.Index, p).Value), p, 1)
            Crea_detalle_poliza(pol, Item, 0, Me.TablaD.Item(ImpPd.Index, p).Value, Cuenta_Cargo, "")


            Item = Item + 1
            If ImpEpro > 0 And ImpGpro > 0 Then ' tiene grabado y exento
                'cargos
                Cuenta_Cargo = RegresaCunetaDev(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCG", Me.TablaD.Item(SerD.Index, p).Value), Trim(Me.TablaD.Item(RFCED.Index, p).Value), p, 1)
                Crea_detalle_poliza(pol, Item, ImpGpro, 0, Cuenta_Cargo, "")
                Item = Item + 1
                Cuenta_Cargo = RegresaCunetaDev(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCE", Me.TablaD.Item(SerD.Index, p).Value), Trim(Me.TablaD.Item(RFCED.Index, p).Value), p, 1)
                Crea_detalle_poliza(pol, Item, ImpEpro, 0, Cuenta_Cargo, "")
                Item = Item + 1


                Crea_detalle_poliza(pol, Item, ImpIvaP, 0, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "IVAPTras", Me.TablaD.Item(SerD.Index, p).Value), "")

                Item = Item + 1


                Cuenta_Cargo = RegresaCunetaDev(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngG", Me.TablaD.Item(SerD.Index, p).Value), Trim(Me.TablaD.Item(RFCED.Index, p).Value), p, 1)
                Crea_detalle_poliza(pol, Item, 0, ImpGpro, Cuenta_Cargo, "")
                Item = Item + 1
                Cuenta_Cargo = RegresaCunetaDev(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngE", Me.TablaD.Item(SerD.Index, p).Value), Trim(Me.TablaD.Item(RFCED.Index, p).Value), p, 1)
                Crea_detalle_poliza(pol, Item, 0, ImpEpro, Cuenta_Cargo, "")
                Item = Item + 1
                Crea_detalle_poliza(pol, Item, 0, ImpIvaP, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "IVATras", Me.TablaD.Item(SerD.Index, p).Value), "")

                Item = Item + 1

            ElseIf ImpEpro > 0 And ImpGpro <= 0 And ImpIvaP = 0 Then 'Tiene Cero
                Cuenta_Cargo = RegresaCunetaDev(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCC", Me.TablaD.Item(SerD.Index, p).Value), Trim(Me.TablaD.Item(RFCED.Index, p).Value), p, 1)
                Crea_detalle_poliza(pol, Item, ImpEpro, 0, Cuenta_Cargo, "")
                Item = Item + 1
                Cuenta_Cargo = RegresaCunetaDev(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCC", Me.TablaD.Item(SerD.Index, p).Value), Trim(Me.TablaD.Item(RFCED.Index, p).Value), p, 1)
                Crea_detalle_poliza(pol, Item, 0, ImpEpro, Cuenta_Cargo, "")
                Item = Item + 1
            ElseIf ImpEpro > 0 And ImpGpro <= 0 And ImpIvaP = 0 Then 'Tiene Exento
                Cuenta_Cargo = RegresaCunetaDev(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCE", Me.TablaD.Item(SerD.Index, p).Value), Trim(Me.TablaD.Item(RFCED.Index, p).Value), p, 1)
                Crea_detalle_poliza(pol, Item, ImpEpro, 0, Cuenta_Cargo, "")
                Item = Item + 1
                Cuenta_Cargo = RegresaCunetaDev(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCE", Me.TablaD.Item(SerD.Index, p).Value), Trim(Me.TablaD.Item(RFCED.Index, p).Value), p, 1)
                Crea_detalle_poliza(pol, Item, 0, ImpEpro, Cuenta_Cargo, "")
                Item = Item + 1
            ElseIf ImpEpro <= 0 And ImpGpro > 0 Then 'Tiene Grabado
                'cargos

                Cuenta_Cargo = RegresaCunetaDev(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCG", Me.TablaD.Item(SerD.Index, p).Value), Trim(Me.TablaD.Item(RFCED.Index, p).Value), p, 1)
                Crea_detalle_poliza(pol, Item, ImpGpro, 0, Cuenta_Cargo, "")
                Item = Item + 1


                Crea_detalle_poliza(pol, Item, ImpIvaP, 0, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "IVAPTras", Me.TablaD.Item(SerD.Index, p).Value), "")

                Item = Item + 1


                Cuenta_Cargo = RegresaCunetaDev(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngG", Me.TablaD.Item(SerD.Index, p).Value), Trim(Me.TablaD.Item(RFCED.Index, p).Value), p, 1)
                Crea_detalle_poliza(pol, Item, 0, ImpGpro, Cuenta_Cargo, "")
                Item = Item + 1


                Crea_detalle_poliza(pol, Item, 0, ImpIvaP, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "IVATras", Me.TablaD.Item(SerD.Index, p).Value), "")

                Item = Item + 1



            End If

        End If

        Exit Sub
    End Sub

    Private Function LetraFactura(ByVal uuid As String)
        Dim letra As String
        Dim ds As DataSet = Eventos.Obtener_DS("SELECT clave,Total_Real FROM dbo.Xml_Sat WHERE UUID = '" & uuid & "' and Tipo ='Factura' AND Id_Empresa = " & Me.lstCliente.SelectItem & "")
        If ds.Tables(0).Rows.Count > 0 Then
            letra = ds.Tables(0).Rows(0)("clave")
        Else
            letra = ""
        End If
        Return Trim(letra)
    End Function
    Private Function ImpFaCURA(ByVal uuid As String, ByVal CAMPO As String)
        Dim iMP As Decimal
        Dim ds As DataSet = Eventos.Obtener_DS("SELECT " & CAMPO & " FROM dbo.Xml_Sat WHERE UUID = '" & uuid & "' AND Id_Empresa = " & Me.lstCliente.SelectItem & "")
        If ds.Tables(0).Rows.Count > 0 Then
            iMP = IIf(IsDBNull(ds.Tables(0).Rows(0)(0)) = True, 0, ds.Tables(0).Rows(0)(0))
        Else
            iMP = 0
        End If
        Return iMP
    End Function
    Private Sub TablaD_CellClick(sender As Object, e As DataGridViewCellEventArgs) Handles TablaD.CellClick

        Dim columna As Integer = Me.TablaD.CurrentCell.ColumnIndex
        Dim Nombre As String
        Nombre = Me.TablaD.Columns.Item(Me.TablaD.CurrentCell.ColumnIndex).Name.ToString
        Me.LstTextoDev.Cargar(" Select '','' ")

        Select Case Nombre
            Case "LetraCd"
                Me.LstTextoDev.Cargar(" Select id_Contabilidad, rtrim(Clave) as Clave from Letras_Contabilidad where Id_Empresa = " & Me.lstCliente.SelectItem & " ")
                Me.LstTextoDev.SelectText = ""
            Case "CtaEfD"
                Me.LstTextoDev.Cargar(" Select Id_cat_cuentas, rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1010' and Nivel2 > 0 and Nivel3 > 0 ")
                Me.LstTextoDev.SelectText = ""
            Case "CtaBancosD"
                Me.LstTextoDev.Cargar(" Select Id_cat_cuentas, rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1020'and Nivel2 > 0 and Nivel3 > 0  ")
                Me.LstTextoDev.SelectText = ""
            Case "NomBankCHD"
                Me.LstTextoDev.Cargar("select Id_Bancos_Clientes,Alias from Bancos_Clientes where Id_Empresa = " & Me.lstCliente.SelectItem & " and alias like '%Cheq%'")
                Me.LstTextoDev.SelectText = ""
            Case "BancoOd"
                Me.LstTextoDev.Cargar(" select Id_Bancos_Clientes,Alias from Bancos_Clientes where Id_Empresa = " & Me.lstCliente.SelectItem & " and alias like '%Transf%'")
                Me.LstTextoDev.SelectText = ""
            Case "TipPolD"
                Me.LstTextoDev.Cargar(" Select convert(NVARCHAR,Clave,103)  +' - ' + Nombre as Clave, convert(NVARCHAR,Clave,103)  +' - ' + Nombre as Clave  from Tipos_Poliza_Sat INNER JOIN Tipo_Poliza ON Tipo_Poliza.Id_Tipo_poliza = Tipos_Poliza_Sat.Id_Tipo_poliza  where Id_Empresa= " & Me.lstCliente.SelectItem & "  ")
                Me.LstTextoDev.SelectText = ""
            Case "CtaAD"
                Me.LstTextoDev.Cargar("Select  Id_cat_cuentas,  rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " ")
                Me.LstTexto.SelectText = ""
            Case "CtaAntiD"
                Me.LstTextoDev.Cargar("Select Id_cat_cuentas,  rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1070' and Nivel2 > 0 and Nivel3 > 0 ")
                Me.LstTextoDev.SelectText = ""
        End Select
    End Sub
    Private Sub Liberar_ProcesoDev(ByVal i As Integer)
        Dim contador As Integer = 0
        Dim cantidad As Decimal = Me.TablaD.Item(ImpPd.Index, i).Value
        cantidad = cantidad + Me.TablaD.Item(UCD.Index, i).Value
        cantidad = cantidad - Me.TablaD.Item(PCD.Index, i).Value
        cantidad = cantidad + Me.TablaD.Item(ProvAD.Index, i).Value
        cantidad = cantidad + Me.TablaD.Item(ProvPD.Index, i).Value

        'Calcula la diferencia en el registro
        Me.TablaD.Item(DifD.Index, i).Value = Math.Round(Calcula_diferencia(Me.TablaD.Item(TRD.Index, i).Value, Me.TablaD.Item(ImpED.Index, i).Value, Me.TablaD.Item(ImpTD.Index, i).Value, Me.TablaD.Item(ImpCHD.Index, i).Value, Me.TablaD.Item(AjusD.Index, i).Value, Me.TablaD.Item(AntiD.Index, i).Value, cantidad), 2)
        If Me.TablaD.Item(DifD.Index, i).Value <> 0 Then
            Me.TablaD.Item(DifD.Index, i).Style.BackColor = Color.Red
        Else
            Me.TablaD.Item(DifD.Index, i).Style.BackColor = Color.Green
        End If

        If Trim(UCase(Me.lblce.Text)) = "TRUE" Then ' Bloquera filas de Contabilidad electronica
            ' Or IIf(IsDBNull(Me.TablaD.Item(NomCuentaD.Index, i).Value) = True, "", Me.TablaD.Item(NomCuentaD.Index, i).Value) = ""  If Me.TablaD.Item(DifD.Index, i).Value > 0 Or Me.TablaD.Item(TipPolD.Index, i).Value = Nothing Or IIf(IsDBNull(Me.TablaD.Item(NomCuentaD.Index, i).Value) = True, "", Me.TablaD.Item(NomCuentaD.Index, i).Value) = "" Or IIf(IsDBNull(Me.TablaD.Item(NPolD.Index, i).Value) = True, "", Me.TablaD.Item(NPolD.Index, i).Value) = "" Then
            If Me.TablaD.Item(DifD.Index, i).Value <> 0 Or Me.TablaD.Item(TipPolD.Index, i).Value = Nothing Or IIf(IsDBNull(Me.TablaD.Item(NPolD.Index, i).Value) = True, "", Me.TablaD.Item(NPolD.Index, i).Value.ToString) = "" Then

                Me.TablaD.Item(AplD.Index, i).Value = False
            Else

                If Me.TablaD.Item(ImpTD.Index, i).Value > 0 Then ' Bloqueo transferencia
                    Try
                        If Me.TablaD.Item(FecTD.Index, i).Value = Nothing Then
                            Me.TablaD.Item(AplD.Index, i).Value = False
                        Else
                            Me.TablaD.Item(AplD.Index, i).Value = True
                        End If
                    Catch ex As Exception
                        Me.TablaD.Item(AplD.Index, i).Value = False
                    End Try

                ElseIf Me.TablaD.Item(ImpCHD.Index, i).Value > 0 Then ' Bloqueo cheques
                    Try
                        If Me.TablaD.Item(FcHd.Index, i).Value = Nothing Then
                            Me.TablaD.Item(AplD.Index, i).Value = False
                        Else
                            Me.TablaD.Item(AplD.Index, i).Value = True
                        End If
                    Catch ex As Exception
                        Me.TablaD.Item(AplD.Index, i).Value = False
                    End Try

                ElseIf Me.TablaD.Item(ImpCHD.Index, i).Value > 0 And Me.TablaD.Item(ImpTD.Index, i).Value > 0 Then ' AMbos
                    Try
                        If Me.TablaD.Item(FecTD.Index, i).Value = Nothing Then
                            Me.TablaD.Item(AplD.Index, i).Value = False
                        Else
                            Me.TablaD.Item(AplD.Index, i).Value = True
                        End If
                    Catch ex As Exception
                        Me.TablaD.Item(AplD.Index, i).Value = False
                    End Try
                    Try
                        If Me.TablaD.Item(FcHd.Index, i).Value = Nothing Then
                            Me.TablaD.Item(AplD.Index, i).Value = False
                        Else
                            Me.TablaD.Item(AplD.Index, i).Value = True
                        End If
                    Catch ex As Exception
                        Me.TablaD.Item(AplD.Index, i).Value = False
                    End Try


                Else
                    Me.TablaD.Item(AplD.Index, i).Value = True
                End If
                If Me.TablaD.Item(AjusD.Index, i).Value <> 0 Then ' Bloqueo Ajuste
                    If IIf(IsDBNull(Me.TablaD.Item(CtaAD.Index, i).Value) = True, "", Me.TablaD.Item(CtaAD.Index, i).Value) = "" Then
                        Me.TablaD.Item(AplD.Index, i).Value = False
                    Else
                        Me.TablaD.Item(AplD.Index, i).Value = True
                    End If
                End If

                If Me.TablaD.Item(AntiD.Index, i).Value <> 0 Then ' Bloqueo Anticipo
                    If IIf(IsDBNull(Me.TablaD.Item(CtaAntiD.Index, i).Value) = True, "", Me.TablaD.Item(CtaAntiD.Index, i).Value) = "" Then
                        Me.TablaD.Item(AplD.Index, i).Value = False
                    Else
                        Me.TablaD.Item(AplD.Index, i).Value = True
                    End If
                End If

            End If
        Else
            'sin contabilidad electronica
            If Me.TablaD.Item(DifD.Index, i).Value <> 0 Or Me.TablaD.Item(TipPolD.Index, i).Value = Nothing Or IIf(IsDBNull(Me.TablaD.Item(NPolD.Index, i).Value) = True, "", Me.TablaD.Item(NPolD.Index, i).Value) = "" Then
                Me.TablaD.Item(AplD.Index, i).Value = False
            Else
                Me.TablaD.Item(AplD.Index, i).Value = True
            End If
            Try
                If Me.TablaD.Item(AjusD.Index, i).Value <> 0 Then ' Bloqueo Ajuste
                    If IIf(IsDBNull(Me.TablaD.Item(CtaAD.Index, i).Value) = True, "", Me.TablaD.Item(CtaAD.Index, i).Value) = "" Then
                        Me.TablaD.Item(AplD.Index, i).Value = False
                    Else
                        Me.TablaD.Item(AplD.Index, i).Value = True
                    End If
                End If

                If Me.TablaD.Item(AntiD.Index, i).Value <> 0 Then ' Bloqueo Anticipo
                    If IIf(IsDBNull(Me.TablaD.Item(CtaAntiD.Index, i).Value) = True, "", Me.TablaD.Item(CtaAntiD.Index, i).Value) = "" Then
                        Me.TablaD.Item(AplD.Index, i).Value = False
                    Else
                        Me.TablaD.Item(AplD.Index, i).Value = True
                    End If
                End If
            Catch ex As Exception

            End Try
        End If

        For s As Integer = 0 To Me.TablaD.Rows.Count - 1
            If Me.TablaD.Item(0, s).Value = True Then
                contador = contador + 1
            End If
        Next
        If contador > 0 Then
            Me.CmdProcesoDev.Enabled = True
        End If
    End Sub
    Private Function Obtener_indexDV(ByVal valor As String)

        Dim Indice As Integer = -1
        For i As Integer = 0 To Me.LetraCd.Items.Count - 1
            If valor = Trim(Me.LetraCd.Items(i)) Then
                Indice = i
                Exit For
            End If
        Next
        Return Indice

    End Function
    Private Function Obtener_index2Dv(ByVal valor As String)

        Dim Indice As Integer = -1
        For i As Integer = 0 To Me.TipPolD.Items.Count - 1
            If valor = Trim(Me.TipPolD.Items(i)) Then
                Indice = i
                Exit For
            End If
        Next
        Return Indice

    End Function
    Private Function Obtener_indexBDv(ByVal valor As String)

        Dim Indice As Integer = -1
        For i As Integer = 0 To Me.BancoOd.Items.Count - 1
            If valor = Trim(Me.BancoOd.Items(i)) Then
                Indice = i
                Exit For
            End If
        Next
        Return Indice

    End Function
    Private Function Obtener_indexBDvBH(ByVal valor As String)

        Dim Indice As Integer = -1
        For i As Integer = 0 To Me.NomBankCHD.Items.Count - 1
            If valor = Trim(Me.NomBankCHD.Items(i)) Then
                Indice = i
                Exit For
            End If
        Next
        Return Indice

    End Function
    Private Function Obtener_indexdDv(ByVal valor As String)

        Dim Indice As Integer = -1
        For i As Integer = 0 To Me.BancoDD.Items.Count - 1
            If valor = Trim(Me.BancoDD.Items(i)) Then
                Indice = i
                Exit For
            End If
        Next
        Return Indice

    End Function

    Private Sub LstTextoDev_Enters() Handles LstTextoDev.Enters
        If Me.TablaD.Rows.Count > 0 Then
            For Each Fila As DataGridViewRow In TablaD.Rows
                If Fila.Cells(LetraCd.Index).Selected = True Then
                    Try
                        If Me.LstTextoDev.SelectText = "" Then
                            Fila.Cells(LetraCd.Index).Value = ""
                        Else
                            If Obtener_index(Me.LstTextoDev.SelectText) < 0 Then
                                Fila.Cells(LetraCd.Index).Value = ""
                            Else
                                Dim s As String = Me.LetraCd.Items(1)
                                Fila.Cells(LetraCd.Index).Value = Me.LetraCd.Items(Obtener_index(Me.LstTextoDev.SelectText))
                            End If
                        End If
                    Catch ex As Exception

                    End Try
                ElseIf Fila.Cells(BancoOd.Index).Selected = True Then
                    Try
                        Dim s As String = Me.BancoOd.Items(1)
                        Fila.Cells(BancoOd.Index).Value = Me.BancoOd.Items(Obtener_indexB(Me.LstTextoDev.SelectText))
                    Catch ex As Exception

                    End Try
                    Try
                        If Me.LstTextoDev.SelectText = "" Then
                            Fila.Cells(BancoOd.Index).Value = ""

                        Else
                            If Obtener_indexB(Me.LstTextoDev.SelectText) = 0 Then
                                Fila.Cells(BancoOd.Index).Value = ""
                            Else
                                Dim s As String = Me.BancoOd.Items(1)
                                Fila.Cells(BancoOd.Index).Value = Me.BancoOd.Items(Obtener_indexB(Me.LstTextoDev.SelectText))
                            End If
                        End If

                    Catch ex As Exception

                    End Try
                ElseIf Fila.Cells(BancoDD.Index).Selected = True Then
                    'Try
                    '    Dim s As String = Me.BancoDD.Items(1)
                    '    Fila.Cells(BancoDD.Index).Value = Me.BancoDD.Items(Obtener_indexd(Me.LstTextoDev.SelectText))
                    'Catch ex As Exception

                    'End Try
                ElseIf Fila.Cells(TipPolD.Index).Selected = True Then

                    Try

                        If Me.LstTextoDev.SelectText = "" Then
                            Fila.Cells(TipPolD.Index).Value = ""
                        Else
                            Try
                                If Obtener_index2(Me.LstTextoDev.SelectText) < 0 Then
                                    Fila.Cells(TipPolD.Index).Value = ""
                                Else
                                    Dim s As String = Me.TipPolD.Items(1)
                                    Fila.Cells(TipPolD.Index).Value = Me.TipPolD.Items(Obtener_index2(Me.LstTextoDev.SelectText))
                                End If

                            Catch ex As Exception

                            End Try
                        End If

                    Catch ex As Exception

                    End Try
                Else

                    For j As Integer = 0 To Me.TablaD.Columns.Count - 1
                        If Me.TablaD.Item(j, Fila.Index).Selected = True And (j <> LetraCd.Index And j <> BancoOd.Index And j <> TipPolD.Index) Then
                            Me.TablaD.Item(j, Fila.Index).Value = Me.LstTextoDev.SelectText
                        ElseIf Me.TablaD.Item(j, Fila.Index).Selected = True And (j = LetraCd.Index And j = BancoOd.Index And j = TipPolD.Index) Then
                            Me.TablaD.Item(j, Fila.Index).Value = ""
                        End If
                    Next

                End If

            Next
        End If
    End Sub

    Private Sub TablaD_CellEndEdit(sender As Object, e As DataGridViewCellEventArgs) Handles TablaD.CellEndEdit
        Liberar_ProcesoDev(Me.TablaD.CurrentRow.Index)
        'Calcula cuenta cargos

        If Me.TablaD.Item(ProvPD.Index, Me.TablaD.CurrentRow.Index).Value > 0 Then
            Me.TablaD.Item(ProvAD.Index, Me.TablaD.CurrentRow.Index).Value = 0
        ElseIf Me.TablaD.Item(ProvAD.Index, Me.TablaD.CurrentRow.Index).Value > 0 Then
            Me.TablaD.Item(ProvPD.Index, Me.TablaD.CurrentRow.Index).Value = 0
        End If

        If Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value <> Nothing Then

            If Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value = "C" Or Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value = "CPP" Then
                Me.TablaD.Item(ProvAD.Index, Me.TablaD.CurrentRow.Index).Value = 0
            ElseIf Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value = "GG" Or Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value = "GGPP" Then
                Me.TablaD.Item(ProvPD.Index, Me.TablaD.CurrentRow.Index).Value = 0
            End If

            Me.TablaD.Item(NomCuentaD.Index, Me.TablaD.CurrentRow.Index).Value = Cuenta_cargos(Me.TablaD.Item(RFCED.Index, Me.TablaD.CurrentRow.Index).Value, Trim(Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value))
            Me.TablaD.Item(LetraSD.Index, Me.TablaD.CurrentRow.Index).Value = Eventos.Calcula_letraSat(Me.TablaD.Item(Fpago.Index, Me.TablaD.CurrentRow.Index).Value, Me.TablaD.Item(UCFDI.Index, Me.TablaD.CurrentRow.Index).Value)
            '  End If
        Else
            Me.TablaD.Item(NomCuentaD.Index, Me.TablaD.CurrentRow.Index).Value = ""
        End If

        'CALCULAR CUENTA DE EFECTIVO
        If Me.TablaD.Item(ImpED.Index, Me.TablaD.CurrentRow.Index).Value > 0 Then
            'If Candado_Importe_EfectivoDev(Me.TablaD.CurrentRow.Index) = True Then ' se verifica candado
            '    ' IMPORTE DE EFECTIVO Antiguo Codigo

            Me.TablaD.Item(CtaEfD.Index, Me.TablaD.CurrentRow.Index).Value = Cuenta_Efectivo()
            Me.TablaD.Columns(CtaEfD.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
            'Else
            '    If MessageBox.Show("El importe de efectivo Excede los $2,000 deseas usarlo?", Eventos.Titulo_APP, MessageBoxButtons.YesNo, MessageBoxIcon.Question) = Windows.Forms.DialogResult.Yes Then

            '        Me.TablaD.Item(CtaEfD.Index, Me.TablaD.CurrentRow.Index).Value = Cuenta_Efectivo()
            '        Me.TablaD.Columns(CtaEfD.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
            '    Else
            '        Me.TablaD.Item(ImpED.Index, Me.TablaD.CurrentRow.Index).Value = 0
            '        Exit Sub
            '    End If
            'End If
        Else
            Me.TablaD.Item(CtaEfD.Index, Me.TablaD.CurrentRow.Index).Value = ""
        End If

        'CALCULAR CUENTA DE Ajustes
        If Me.TablaD.Item(AjusD.Index, Me.TablaD.CurrentRow.Index).Value <> 0 Then
            'If Candado_Importe_EfectivoDev(Me.TablaD.CurrentRow.Index) = True Then ' se verifica candado
            '    ' IMPORTE DE EFECTIVO Antiguo Codigo

            Me.TablaD.Item(CtaAD.Index, Me.TablaD.CurrentRow.Index).Value = Cuenta_Efectivo()
            Me.TablaD.Columns(CtaAD.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
            'Else
            '    If MessageBox.Show("El importe de efectivo Excede los $2,000 deseas usarlo?", Eventos.Titulo_APP, MessageBoxButtons.YesNo, MessageBoxIcon.Question) = Windows.Forms.DialogResult.Yes Then

            '        Me.TablaD.Item(CtaAD.Index, Me.TablaD.CurrentRow.Index).Value = Cuenta_Efectivo()
            '        Me.TablaD.Columns(CtaAD.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
            '    Else
            '        Me.TablaD.Item(AjusD.Index, Me.TablaD.CurrentRow.Index).Value = 0
            '        Exit Sub
            '    End If
            'End If
        Else
            Me.TablaD.Item(CtaAD.Index, Me.TablaD.CurrentRow.Index).Value = ""
        End If
        'CALCULAR CUENTA DE anticipos
        If Me.TablaD.Item(AntiD.Index, Me.TablaD.CurrentRow.Index).Value > 0 Then

            Me.TablaD.Item(CtaAntiD.Index, Me.TablaD.CurrentRow.Index).Value = Cuenta_Anticipo()
            Me.TablaD.Columns(CtaAntiD.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
        Else
            Me.TablaD.Item(CtaAntiD.Index, Me.TablaD.CurrentRow.Index).Value = ""
        End If

        ' Importe de Transferencia
        If Me.TablaD.Item(ImpTD.Index, Me.TablaD.CurrentRow.Index).Value > 0 Then

            Me.TablaD.Item(CtaBancosD.Index, Me.TablaD.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes INNER JOIN Catalogo_de_Cuentas ON Catalogo_de_Cuentas.Id_cat_Cuentas = Bancos_Clientes.Id_cat_Cuentas", "Catalogo_de_Cuentas.Cuenta", " Bancos_Clientes.Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos_Clientes.Alias like '%Tr%'", True)

            If Trim(UCase(Me.lblce.Text)) = "TRUE" Then

                Me.TablaD.Columns(FecTD.Index).Visible = True
            Else
                Me.TablaD.Columns(FecTD.Index).Visible = True
            End If


        Else
            Me.TablaD.Columns(BancoOd.Index).Visible = False
            Me.TablaD.Columns(CtaOD.Index).Visible = False
            Me.TablaD.Columns(BancoDD.Index).Visible = False
            Me.TablaD.Columns(CtaDD.Index).Visible = False
        End If
        If Me.TablaD.Item(ImpCHD.Index, Me.TablaD.CurrentRow.Index).Value > 0 Then
            Me.TablaD.Item(CtaBancosD.Index, Me.TablaD.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes INNER JOIN Catalogo_de_Cuentas ON Catalogo_de_Cuentas.Id_cat_Cuentas = Bancos_Clientes.Id_cat_Cuentas", "Catalogo_de_Cuentas.Cuenta", " Bancos_Clientes.Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos_Clientes.Alias like '%Ch%'", True)
            If Trim(UCase(Me.lblce.Text)) = "TRUE" Then
                Me.TablaD.Columns(FcHd.Index).Visible = True
            Else
                Me.TablaD.Columns(FcHd.Index).Visible = True
            End If
        Else
            'Se Ocutan Columnas de Contabilidad Electronica
            Me.TablaD.Columns(NomBankCHD.Index).Visible = False
            Me.TablaD.Columns(CtaOrigCHD.Index).Visible = False
            Me.TablaD.Columns(NchD.Index).Visible = False


        End If

    End Sub
    Private Function Candado_Importe_EfectivoDev(ByVal i As Integer)
        Dim hacer As Boolean
        If Me.TablaD.Item(ImpED.Index, i).Value > 2000 Then

            hacer = False
        Else
            hacer = True
        End If
        Return hacer
    End Function
    Private Function Candado_Importe_Efectivocomple(ByVal i As Integer)
        Dim hacer As Boolean
        If Me.TablaC.Item(ImpEComplemento.Index, i).Value > 2000 Then

            hacer = False
        Else
            hacer = True
        End If
        Return hacer
    End Function
    Private Sub Cargar_bancosDev(ByVal bancos As String)
        Dim sql As String = " SELECT rtrim(Bancos.Clave) +'-'+ Bancos_Clientes.Alias AS Alias FROM Bancos_Clientes INNER JOIN Bancos ON Bancos_Clientes.Id_Banco =Bancos.Id_Banco  where Id_Empresa = " & Me.lstCliente.SelectItem & " and alias like '%" & bancos & "%'"
        Dim ds As DataSet = Eventos.Obtener_DS(sql)
        If ds.Tables(0).Rows.Count > 0 Then
            If bancos = "Cheq" Then
                'Cheque
                If Me.NomBankCHD.Items.Count = 0 Then
                    For i As Integer = 0 To ds.Tables(0).Rows.Count - 1
                        Me.NomBankCHD.Items.Add(ds.Tables(0).Rows(i)("Alias"))
                    Next
                Else
                    Me.NomBankCHD.Items.Clear()
                    For i As Integer = 0 To ds.Tables(0).Rows.Count - 1
                        Me.NomBankCHD.Items.Add(ds.Tables(0).Rows(i)("Alias"))
                    Next
                End If
            Else
                'Transferencia
                'Origen
                If Me.BancoOd.Items.Count = 0 Then
                    For i As Integer = 0 To ds.Tables(0).Rows.Count - 1
                        Me.BancoOd.Items.Add(ds.Tables(0).Rows(i)("Alias"))

                    Next
                Else
                    Me.BancoOd.Items.Clear()

                    For i As Integer = 0 To ds.Tables(0).Rows.Count - 1
                        Me.BancoOd.Items.Add(ds.Tables(0).Rows(i)("Alias"))

                    Next
                End If
                '***************************    Modificar codigo para los nuevos bancos por rfc    **********************************
                'Dim sql2 As String = " SELECT rtrim(Bancos.Clave) +'-'+ Bancos.Nombre AS Alias FROM Bancos "
                'Dim ds2 As DataSet = Eventos.Obtener_DS(sql2)
                'If ds2.Tables(0).Rows.Count > 0 Then
                '    If Me.BancoDD.Items.Count = 0 Then
                '        For i As Integer = 0 To ds2.Tables(0).Rows.Count - 1
                '            Me.BancoDD.Items.Add(ds2.Tables(0).Rows(i)("Alias"))
                '        Next
                '    Else
                '        Me.BancoDD.Items.Clear()
                '        For i As Integer = 0 To ds2.Tables(0).Rows.Count - 1
                '            Me.BancoDD.Items.Add(ds2.Tables(0).Rows(i)("Alias"))
                '        Next
                '    End If
                'End If

            End If
        End If

    End Sub

    Private Sub Banco_destinodEV()

        Dim sql2 As String = " SELECT DISTINCT CONVERT(NVARCHAR, Bancos.Clave, 103) + '-' + Bancos.Nombre AS Banco 
                               FROM     Bancos INNER JOIN
                               Bancos_RFC ON Bancos.Id_Banco = Bancos_RFC.Id_Banco
                               WHERE  (Bancos_RFC.Id_Empresa  = " & Me.lstCliente.SelectItem & ")"
        Dim ds2 As DataSet = Eventos.Obtener_DS(sql2)
        If ds2.Tables(0).Rows.Count > 0 Then
            If Me.BancoDD.Items.Count = 0 Then
                For j As Integer = 0 To ds2.Tables(0).Rows.Count - 1
                    Me.BancoDD.Items.Add(ds2.Tables(0).Rows(j)("Banco"))
                Next
            Else
                Me.BancoDD.Items.Clear()
                For j As Integer = 0 To ds2.Tables(0).Rows.Count - 1
                    Me.BancoDD.Items.Add(ds2.Tables(0).Rows(j)("Banco"))
                Next
            End If
        End If


    End Sub
    Private Function RegresaCunetaDev(ByVal cuenta As String, ByVal rfc As String, ByVal posicion As Integer, Optional ByVal tipo As Integer = 0)
        Dim Cta As String = ""
        Dim sql As String = ""
        If tipo = 1 Then
            sql = "SELECT cuenta FROM Catalogo_de_Cuentas WHERE Nivel1='" & cuenta.Substring(0, 4) & "' AND Nivel2= '" & cuenta.Substring(4, 4) & "' AND Nivel3 > 0 AND RFC = '" & rfc & "' and Id_Empresa = " & Me.lstCliente.SelectItem & " "
        ElseIf tipo = 2 Then

            sql = "SELECT cuenta FROM Catalogo_de_Cuentas WHERE Nivel1='" & cuenta.Substring(0, 4) & "' AND Nivel2= '" & cuenta.Substring(4, 4) & "' AND Nivel3 = '" & cuenta.Substring(8, 4) & "' AND Nivel4 > 0 AND RFC = '" & rfc & "' and Id_Empresa = " & Me.lstCliente.SelectItem & " "
        End If
        Dim ds As DataSet = Eventos.Obtener_DS(sql)
        If ds.Tables(0).Rows.Count > 0 Then
            Cta = ds.Tables(0).Rows(0)(0)
        Else
            'No existe la cuenta y la inserta
            If tipo = 1 Then
                Cta = Val(ObtenerValorDB("Catalogo_de_cuentas", "CASE WHEN max (Nivel3 ) + 1 IS NULL THEN 1 WHEN max (Nivel3 ) + 1 IS NOT NULL THEN   max (Nivel3 ) + 1 END AS C ", "  Nivel1 =" & cuenta.ToString.Substring(0, 4) & "  AND Nivel2 =" & cuenta.ToString.Substring(4, 4) & " AND Nivel3 >= 0  and Id_Empresa = " & Me.lstCliente.SelectItem & "", True))
                Cta = Format(Cta).PadLeft(4, "0")
                Crear_cuenta(cuenta.ToString.Substring(0, 4), cuenta.ToString.Substring(4, 4), Cta.ToString.Substring(0, 4),
                               "0000", cuenta.Substring(0, 8) & Cta & "0000", Me.TablaD.Item(RFCED.Index, posicion).Value & " " & Me.TablaD.Item(NomEd.Index, posicion).Value,
                                Me.lstCliente.SelectItem, Me.TablaD.Item(LetraSD.Index, posicion).Value, Me.TablaD.Item(RFCED.Index, posicion).Value)
                Cta = cuenta.Substring(0, 8) & Cta & "0000"
            Else
                Cta = Val(ObtenerValorDB("Catalogo_de_cuentas", "CASE WHEN max (Nivel4 ) + 1 IS NULL THEN 1 WHEN max (Nivel4 ) + 1 IS NOT NULL THEN   max (Nivel4 ) + 1 END AS C ", "  Nivel1 =" & cuenta.ToString.Substring(0, 4) & "  AND Nivel2 =" & cuenta.ToString.Substring(4, 4) & " AND Nivel3=" & cuenta.ToString.Substring(8, 4) & " AND Nivel4 > 0 and Id_Empresa = " & Me.lstCliente.SelectItem & "", True))
                Cta = Format(Cta).PadLeft(4, "0")
                Crear_cuenta(cuenta.ToString.Substring(0, 4), cuenta.ToString.Substring(4, 4), cuenta.ToString.Substring(8, 4),
                                  Cta, cuenta.Substring(0, 12) & Cta, Me.TablaD.Item(RFCED.Index, posicion).Value & " " & Me.TablaD.Item(NomEd.Index, posicion).Value,
                                  Me.lstCliente.SelectItem, Me.TablaD.Item(LetraSD.Index, posicion).Value, Me.TablaD.Item(RFCED.Index, posicion).Value)
                Cta = cuenta.Substring(0, 12) & Cta
            End If
        End If
        Return Cta
    End Function
    Private Function RegresaCunetaComple(ByVal cuenta As String, ByVal rfc As String, ByVal posicion As Integer, Optional ByVal tipo As Integer = 0)
        Dim Cta As String = ""
        Dim sql As String = ""
        If tipo = 1 Then
            sql = "SELECT cuenta FROM Catalogo_de_Cuentas WHERE Nivel1='" & cuenta.Substring(0, 4) & "' AND Nivel2= '" & cuenta.Substring(4, 4) & "' AND Nivel3 > 0 AND RFC = '" & rfc & "' and Id_Empresa = " & Me.lstCliente.SelectItem & " "
        ElseIf tipo = 2 Then

            sql = "SELECT cuenta FROM Catalogo_de_Cuentas WHERE Nivel1='" & cuenta.Substring(0, 4) & "' AND Nivel2= '" & cuenta.Substring(4, 4) & "' AND Nivel3 = '" & cuenta.Substring(8, 4) & "' AND Nivel4 > 0 AND RFC = '" & rfc & "' and Id_Empresa = " & Me.lstCliente.SelectItem & " "
        End If
        'Dim sql As String = "SELECT cuenta FROM Catalogo_de_Cuentas WHERE Nivel1='" & cuenta.Substring(0, 4) & "' AND Nivel2= '" & cuenta.Substring(4, 4) & "' AND Nivel3 = '" & cuenta.Substring(8, 4) & "' AND Nivel4 > 0 AND RFC = '" & rfc & "' and Id_Empresa = " & Me.lstCliente.SelectItem & " "
        Dim ds As DataSet = Eventos.Obtener_DS(sql)
        If ds.Tables(0).Rows.Count > 0 Then
            Cta = ds.Tables(0).Rows(0)(0)
        Else
            'No existe la cuenta y la inserta
            If tipo = 1 Then
                Cta = Val(ObtenerValorDB("Catalogo_de_cuentas", "CASE WHEN max (Nivel3 ) + 1 IS NULL THEN 1 WHEN max (Nivel3 ) + 1 IS NOT NULL THEN   max (Nivel3 ) + 1 END AS C ", "  Nivel1 =" & cuenta.ToString.Substring(0, 4) & "  AND Nivel2 =" & cuenta.ToString.Substring(4, 4) & " AND Nivel3 >= 0  and Id_Empresa = " & Me.lstCliente.SelectItem & "", True))
                Cta = Format(Cta).PadLeft(4, "0")
                Crear_cuenta(cuenta.ToString.Substring(0, 4), cuenta.ToString.Substring(4, 4), Cta.ToString.Substring(0, 4),
                               "0000", cuenta.Substring(0, 8) & Cta & "0000", Me.TablaC.Item(RFCComplemento.Index, posicion).Value & " " & Me.TablaC.Item(NEmComplemento.Index, posicion).Value,
                                Me.lstCliente.SelectItem, Me.TablaC.Item(LetraSatComplemento.Index, posicion).Value, Me.TablaC.Item(RFCComplemento.Index, posicion).Value)
                Cta = cuenta.Substring(0, 8) & Cta & "0000"
            Else
                Cta = Val(ObtenerValorDB("Catalogo_de_cuentas", "CASE WHEN max (Nivel4 ) + 1 IS NULL THEN 1 WHEN max (Nivel4 ) + 1 IS NOT NULL THEN   max (Nivel4 ) + 1 END AS C ", "  Nivel1 =" & cuenta.ToString.Substring(0, 4) & "  AND Nivel2 =" & cuenta.ToString.Substring(4, 4) & " AND Nivel3=" & cuenta.ToString.Substring(8, 4) & " AND Nivel4 > 0 and Id_Empresa = " & Me.lstCliente.SelectItem & "", True))
                Cta = Format(Cta).PadLeft(4, "0")
                Crear_cuenta(cuenta.ToString.Substring(0, 4), cuenta.ToString.Substring(4, 4), cuenta.ToString.Substring(8, 4),
                                  Cta, cuenta.Substring(0, 12) & Cta, Me.TablaC.Item(RFCComplemento.Index, posicion).Value & " " & Me.TablaC.Item(NEmComplemento.Index, posicion).Value,
                                  Me.lstCliente.SelectItem, Me.TablaC.Item(LetraSatComplemento.Index, posicion).Value, Me.TablaC.Item(RFCComplemento.Index, posicion).Value)
                Cta = cuenta.Substring(0, 12) & Cta
            End If
        End If
        Return Cta
    End Function
    Private Function BuscarcuentaRFCDev(ByVal RFC As String, ByVal cuenta As String, ByVal posicion As Integer)
        Dim Cta As String = ""
        Dim sql As String = "SELECT cuenta FROM Catalogo_de_Cuentas WHERE Nivel1='" & cuenta.Substring(0, 4) & "' AND Nivel2= '" & cuenta.Substring(4, 4) & "' AND Nivel3 = '" & cuenta.Substring(8, 4) & "' AND Nivel4 > 0 AND RFC = '" & RFC & "' and Id_Empresa = " & Me.lstCliente.SelectItem & " "
        Dim ds As DataSet = Eventos.Obtener_DS(sql)
        If ds.Tables(0).Rows.Count > 0 Then
            Cta = ds.Tables(0).Rows(0)(0)
        Else
            'No existe la cuenta y la inserta
            Cta = Val(ObtenerValorDB("Catalogo_de_cuentas", "max (Nivel4 ) + 1 ", "  Nivel1 =" & cuenta.ToString.Substring(0, 4) & "  AND Nivel2 =" & cuenta.ToString.Substring(4, 4) & " AND Nivel3=" & cuenta.ToString.Substring(8, 4) & " AND Nivel4 > 0 and Id_Empresa = " & Me.lstCliente.SelectItem & "", True))
            Cta = Format(Cta).PadLeft(4, "0")
            Crear_cuenta(cuenta.ToString.Substring(0, 4), cuenta.ToString.Substring(4, 4), cuenta.ToString.Substring(8, 4),
                                   Cta, cuenta.Substring(0, 12) & Cta, Me.TablaD.Item(RFCED.Index, posicion).Value & " " & Me.TablaD.Item(NomEd.Index, posicion).Value,
                                   Me.lstCliente.SelectItem, Me.TablaD.Item(LetraSD.Index, posicion).Value, Me.TablaD.Item(RFCED.Index, posicion).Value)
            Cta = cuenta.Substring(0, 12) & Cta
        End If
        Return Cta
    End Function
    Private Function Cuenta_cargosdev(ByVal rfc As String, ByVal letra As String, ByVal nivel1 As String)
        Dim cuenta As String
        Dim sql As String = " select Rtrim(Descripcion) + '-'+ convert(nvarchar,cuenta,103) as Cuenta from catalogo_de_cuentas where  clave= '" & Trim(letra) & "'  and nivel3 >0  
                            and rfc= '" & rfc & "' and nivel1 = '" & nivel1 & "' and Id_Empresa = " & Me.lstCliente.SelectItem & ""
        Dim ds As DataSet = Eventos.Obtener_DS(sql)
        If ds.Tables(0).Rows.Count > 0 Then
            Dim cadena As String = ds.Tables(0).Rows(0)("Cuenta")
            Dim posi As Integer = InStr(1, cadena, "-", CompareMethod.Binary)
            Dim cuantos As Integer = Len(cadena) - Len(cadena.Substring(0, posi))
            Dim consecutivo As String = cadena.Substring(posi, cuantos)

            sql = " select Rtrim(Descripcion) as Cuenta from catalogo_de_cuentas where  Nivel1= '" & consecutivo.ToString.Substring(0, 4) & "' and nivel2= '" & consecutivo.ToString.Substring(4, 4) & "'  and nivel3 ='" & consecutivo.ToString.Substring(8, 4) & "'  and nivel4= '0000' and Id_Empresa = " & Me.lstCliente.SelectItem & ""

            Dim ds2 As DataSet = Eventos.Obtener_DS(sql)

            cuenta = ds2.Tables(0).Rows(0)("Cuenta") & " " & ds.Tables(0).Rows(0)("Cuenta")
        Else
            cuenta = ""
        End If
        Return cuenta
    End Function




    '************************************************ Complementos de pago *********************************************************************************

    Private Sub CmdSalirComple_Click(sender As Object, e As EventArgs) Handles CmdSalirComple.Click
        Me.Close()
    End Sub
    Private Sub CmdLimpiaComple_Click(sender As Object, e As EventArgs) Handles CmdLimpiaComple.Click
        If Me.TablaC.Rows.Count > 0 Then
            LimpiaC()
            Me.LstComple.SelectText = ""
        End If
    End Sub
    Private Sub LimpiaC()
        Me.TablaC.Rows.Clear()
    End Sub
    Private Sub CmdBuscarComple_Click(sender As Object, e As EventArgs) Handles CmdBuscarComple.Click
        activo = True
        LimpiaC()
        If Me.lstCliente.SelectText <> "" Then
            If Buscar_Parametros(Me.lstCliente.SelectItem) = True Then
                Buscar_Complementos(Me.lstCliente.SelectItem, " and Fecha_Emision >= " & Eventos.Sql_hoy(Me.DtFiComple.Value) & " and Fecha_Emision <= " & Eventos.Sql_hoy(DtFFComple.Value) & "")
                SP2.RunWorkerAsync(Me.TablaC)
                Control.CheckForIllegalCrossThreadCalls = False
                Me.TablaC.Enabled = True
            End If
        Else
            RadMessageBox.SetThemeName("MaterialBlueGrey")
            RadMessageBox.Show("No se ha seleccionado una Empresa", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
        End If
        activo = False
    End Sub
    Private Sub Buscar_Complementos(ByVal Id_Empresa As Integer, ByVal periodo As String)
        Dim sql As String = "SELECT Xml_Complemento.Id_Xml_Complemento, Xml_Complemento.Tipo, Xml_Complemento.UUID, Metodos_de_Pago.Descripcion AS Forma_de_Pago, Xml_Complemento.Fecha_Emision, Xml_Complemento.Folio, Xml_Complemento.Serie, 
 Xml_Complemento.SubTotal, Xml_Complemento.Moneda, Xml_Complemento.Total, Xml_Complemento.LugarExpedicion, Xml_Complemento.RFC_Emisor, Xml_Complemento.Nombre_Emisor, Xml_Complemento.Regimen_Fiscal, 
 Xml_Complemento.RFC_Receptor, Xml_Complemento.Nombre_Receptor, Xml_Complemento.UsoCFDI, Xml_Complemento.ClaveProdServ, Xml_Complemento.Cantidad, Xml_Complemento.Unidad, Xml_Complemento.Descripcion, 
 Xml_Complemento.Valor_Unitario, Xml_Complemento.Importe, Xml_Complemento.FechaPago, Xml_Complemento.MonedaP, Xml_Complemento.TipoCambioP, Xml_Complemento.Monto, Xml_Complemento.Num_Operacion, 
 Xml_Complemento.RfcEmisorCtaOrd, Xml_Complemento.NomBancoOrdExt, Xml_Complemento.CtaOrdenante, Xml_Complemento.RfcEmisorCtaBen, Xml_Complemento.CtaBeneficiario, Xml_Complemento.TipoCadPago, 
 Xml_Complemento.CertPago, Xml_Complemento.CadPago, Xml_Complemento.SelloPago, Xml_Complemento.Conceptos, Xml_Complemento.IdDocumento, Xml_Complemento.SerieDR, Xml_Complemento.FolioDR, 
 Xml_Complemento.MonedaDR, Xml_Complemento.TipoCambioDR, Xml_Complemento.MetodoDePagoDR, Xml_Complemento.NumParcialidad, Xml_Complemento.ImpSaldoAnt, Xml_Complemento.ImpPagado, 
 Xml_Complemento.ImpSaldoInsoluto, Xml_Complemento.Consecutivo_Carga, Xml_Complemento.Id_Empresa, Xml_Complemento.Carga_Procesada, Xml_Complemento.Id_Poliza, Xml_Complemento.Emitidas, Xml_Complemento.Letra_Sat, 
 Xml_Complemento.Nombre_cuenta, Xml_Complemento.Clave, Xml_Complemento.Anio_Contable, Xml_Complemento.Mes_Contable, Xml_Complemento.Imp_Efectivo, Xml_Complemento.Cuenta_Efectivo, Xml_Complemento.Imp_Transf, 
 Xml_Complemento.Banco_Origen, Xml_Complemento.Cuenta_Origen, Xml_Complemento.Banco_Destino, Xml_Complemento.Fecha_Transaccion, Xml_Complemento.Imp_Cheque, Xml_Complemento.Nom_Banco_Ch, 
 Xml_Complemento.Cuenta_Origen_Ch, Xml_Complemento.No_Cheque, Xml_Complemento.Banco_Dest_Cheque,  Xml_Complemento.Cuenta_Dest_Cheque,  Xml_Complemento.Cuenta_Cheques, Xml_Complemento.Fecha_Ch, Xml_Complemento.Cuenta_Bancos, Xml_Complemento.Provision_Acreedor, Xml_Complemento.Provision_Proveedor, 
 Xml_Complemento.Diferencia, Xml_Complemento.Tipo_Poliza, Xml_Complemento.Imp_Grabado, Xml_Complemento.Imp_Exento, Xml_Complemento.IVA_real, Xml_Complemento.Prc_Pago_Acumulado, Xml_Complemento.Total_Real, 
 Xml_Complemento.Utilidad_Cambiaria, Xml_Complemento.Perdida_Cambiaria, Xml_Complemento.Imp_Devolucion, Xml_Complemento.Cuenta_Devolucion, Xml_Complemento.Numpol, Xml_Complemento.RIRS, Xml_Complemento.RIVA, 
 Xml_Complemento.Cuenta_Destino, Xml_Complemento.Ajuste, Xml_Complemento.Anticipos, Xml_Complemento.Cta_Ajuste, Xml_Complemento.Cta_Anticipos, Xml_Complemento.Cta_Orden,
Imp_Transf1,        Banco_Origen1,	 Cuenta_Origen1,	 Banco_Destino1, Cuenta_Destino1 	,	 Fecha_Transaccion1,	 Cuenta_Bancos1 
,Imp_Transf2	 ,Banco_Origen2,	 Cuenta_Origen2	, Banco_Destino2	 , Cuenta_Destino2	, Fecha_Transaccion2,Cuenta_Bancos2	 
,Imp_Transf3	 ,Banco_Origen3,	 Cuenta_Origen3,	 Banco_Destino3,Cuenta_Destino3	,	 Fecha_Transaccion3,	 Cuenta_Bancos3	 
,Imp_Transf4	 ,Banco_Origen4,	 Cuenta_Origen4	, Banco_Destino4	 , Cuenta_Destino4	,Fecha_Transaccion4, Cuenta_Bancos4 
,Imp_Transf5 ,Banco_Origen5,	 Cuenta_Origen5,	 Banco_Destino5,Cuenta_Destino5	,	 Fecha_Transaccion5,	 Cuenta_Bancos5	 
,Imp_Transf6	 ,Banco_Origen6,	 Cuenta_Origen6,	 Banco_Destino6,Cuenta_Destino7	,	 Fecha_Transaccion6, Cuenta_Bancos6	 
,Imp_Transf7	 ,Banco_Origen7,	 Cuenta_Origen7,	 Banco_Destino7,Cuenta_Destino7	,	 Fecha_Transaccion7,	 Cuenta_Bancos7,	 
Imp_Transf8	 ,Banco_Origen8,	 Cuenta_Origen8,	 Banco_Destino8,Cuenta_Destino8	, Fecha_Transaccion8,	 Cuenta_Bancos8	 
,Imp_Transf9	 ,Banco_Origen9,	 Cuenta_Origen9,	 Banco_Destino9,Cuenta_Destino9	,	 Fecha_Transaccion9,	 Cuenta_Bancos9,
Imp_Transf10,	 Banco_Origen10,	 Cuenta_Origen10, Banco_Destino10,Cuenta_Destino10	, Fecha_Transaccion10,	 Cuenta_Bancos10,Ser
                  FROM     Xml_Complemento INNER JOIN
                                    Metodos_de_Pago ON Xml_Complemento.FormaDePago = Metodos_de_Pago.Clave
                  WHERE  (Xml_Complemento.Emitidas = " & Eventos.Bool2(True) & ") AND (Xml_Complemento.Id_Empresa = " & Id_Empresa & ") " & periodo & " and Id_Poliza IS NULL "
        Dim ds As DataSet = Eventos.Obtener_DS(sql)
        If ds.Tables(0).Rows.Count > 0 Then
            Me.TablaC.RowCount = 1

            Dim contab As DataSet = Eventos.Obtener_DS(" Select 'I' as Clave   ")
            If contab.Tables(0).Rows.Count > 0 Then
                If Me.LetraContabilidadComplemento.Items.Count = 0 Then

                    For i As Integer = 0 To contab.Tables(0).Rows.Count - 1
                        Me.LetraContabilidadComplemento.Items.Add(Trim(contab.Tables(0).Rows(i)("Clave")))
                    Next
                Else
                    Me.LetraContabilidadComplemento.Items.Clear()
                    For i As Integer = 0 To contab.Tables(0).Rows.Count - 1
                        Me.LetraContabilidadComplemento.Items.Add(Trim(contab.Tables(0).Rows(i)("Clave")))
                    Next
                End If
            End If
            Dim Tipo As DataSet = Eventos.Obtener_DS(" Select convert(NVARCHAR,Clave,103)  +' - ' + Nombre as Clave  from Tipos_Poliza_Sat INNER JOIN Tipo_Poliza ON Tipo_Poliza.Id_Tipo_poliza = Tipos_Poliza_Sat.Id_Tipo_poliza  where Id_Empresa= " & Me.lstCliente.SelectItem & "      ")
            If Tipo.Tables(0).Rows.Count > 0 Then
                If Me.TipPolComplemento.Items.Count = 0 Then
                    For i As Integer = 0 To Tipo.Tables(0).Rows.Count - 1
                        Me.TipPolComplemento.Items.Add(Trim(Tipo.Tables(0).Rows(i)("Clave")))
                    Next
                Else
                    Me.TipPolComplemento.Items.Clear()
                    For i As Integer = 0 To Tipo.Tables(0).Rows.Count - 1
                        Me.TipPolComplemento.Items.Add(Trim(Tipo.Tables(0).Rows(i)("Clave")))
                    Next
                End If
            End If

            Dim Ctaor As DataSet = Eventos.Obtener_DS(" Select 'SI' as Clave  UNION sELECT 'NO' as Clave")
            If Ctaor.Tables(0).Rows.Count > 0 Then
                If Me.CtaOrdenC.Items.Count = 0 Then
                    For i As Integer = 0 To Ctaor.Tables(0).Rows.Count - 1
                        Me.CtaOrdenC.Items.Add(Trim(Ctaor.Tables(0).Rows(i)("Clave")))
                    Next
                Else
                    Me.CtaOrdenC.Items.Clear()
                    For i As Integer = 0 To Ctaor.Tables(0).Rows.Count - 1
                        Me.CtaOrdenC.Items.Add(Trim(Ctaor.Tables(0).Rows(i)("Clave")))
                    Next
                End If
            End If

            Dim Series As DataSet = Eventos.Obtener_DS(" SELECT Serie FROM dbo.Series WHERE Id_Empresa = " & Me.lstCliente.SelectItem & " ")
            If Series.Tables(0).Rows.Count > 0 Then
                If Me.SerC.Items.Count = 0 Then
                    For i As Integer = 0 To Series.Tables(0).Rows.Count - 1
                        Me.SerC.Items.Add(Trim(Series.Tables(0).Rows(i)("Serie")))
                    Next
                Else
                    Me.SerC.Items.Clear()
                    For i As Integer = 0 To Series.Tables(0).Rows.Count - 1
                        Me.SerC.Items.Add(Trim(Series.Tables(0).Rows(i)("Serie")))
                    Next
                End If
            End If
            Cargar_bancosComple("Transf")
            Cargar_bancosComple("Cheq")
            Me.TablaC.RowCount = ds.Tables(0).Rows.Count
#Region "Anteror"
            DatoC = ds
#End Region

        Else
            Try
                If DatoC.Tables(0).Rows.Count > 0 Then
                    DatoC.Clear()
                    Me.TablaC.Rows.Clear()
                End If
            Catch ex As Exception

            End Try
            RadMessageBox.SetThemeName("MaterialBlueGrey")
            RadMessageBox.Show("No hay registros para procesar", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
        End If



    End Sub
    Private Sub Complementos(ByVal ds As DataSet)
        If ds.Tables(0).Rows.Count = 0 Then
            Exit Sub
        End If
        Dim frm As New BarraProcesovb
        frm.Show()
        frm.Text = "Calculando Pagos por favor espere..."
        frm.Barra.Minimum = 0
        frm.Barra.Maximum = Me.TablaC.Rows.Count
        For j As Integer = 0 To ds.Tables(0).Rows.Count - 1
            Dim Fila As DataGridViewRow = Me.TablaC.Rows(j)
            Me.TablaC.Item(0, j).Value = False
            Me.TablaC.Item(Id_Complemento.Index, j).Value = ds.Tables(0).Rows(j)("Id_Xml_Complemento")
            Me.TablaC.Item(Tp.Index, j).Value = ds.Tables(0).Rows(j)("Tipo")
            Me.TablaC.Item(FechaEComplemento.Index, j).Value = ds.Tables(0).Rows(j)("Fecha_Emision")
            Me.TablaC.Item(UUIDComplemento.Index, j).Value = ds.Tables(0).Rows(j)("UUID")
            Me.TablaC.Item(UUIDRComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("IdDocumento")) = True, "", ds.Tables(0).Rows(j)("IdDocumento"))
            Me.TablaC.Item(UCFDIComplemento.Index, j).Value = ds.Tables(0).Rows(j)("UsoCFDI")
            Me.TablaC.Item(RFCComplemento.Index, j).Value = ds.Tables(0).Rows(j)("RFC_Receptor")
            Me.TablaC.Item(NEmComplemento.Index, j).Value = ds.Tables(0).Rows(j)("Nombre_Receptor")
            Me.TablaC.Item(Conc.Index, j).Value = ds.Tables(0).Rows(j)("Descripcion")
            Me.TablaC.Item(MPc.Index, j).Value = ds.Tables(0).Rows(j)("MetodoDePagoDR")
            Me.TablaC.Item(FpagoComplemento.Index, j).Value = Trim(ds.Tables(0).Rows(j)("Forma_de_Pago"))
            Me.TablaC.Item(SerieXML.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Serie")) = True, "", ds.Tables(0).Rows(j)("Serie"))
            Dim PorcenPro, ImpSubt, ImpIvaP As Decimal ' Calcula valores de la factura
            Try
                PorcenPro = ds.Tables(0).Rows(j)("Monto") / ImpFaCURA(Me.TablaC.Item(UUIDRComplemento.Index, j).Value, "Total_Real")
            Catch ex As Exception
                PorcenPro = 0
            End Try
            'PorcenPro = ds.Tables(0).Rows(j)("Total") / ImpFaCURA(Me.TablaC.Item(UUIDRComplemento.Index, j).Value, "Total_Real")
            ImpIvaP = ImpFaCURA(Me.TablaC.Item(UUIDRComplemento.Index, j).Value, "IVA_real") * PorcenPro
            ImpSubt = ds.Tables(0).Rows(j)("Monto") - ImpIvaP

            Me.TablaC.Item(SubTotComplemento.Index, j).Value = ImpSubt
            Me.TablaC.Item(IvaComplemento.Index, j).Value = ImpIvaP
            Me.TablaC.Item(TotComplemento.Index, j).Value = ds.Tables(0).Rows(j)("ImpPagado")

            Me.TablaC.Item(LetraSatComplemento.Index, j).Value = ds.Tables(0).Rows(j)("Letra_Sat")

            Me.TablaC.Item(NomCtaComplemento.Index, j).Value = ds.Tables(0).Rows(j)("Nombre_cuenta")
            Try
                If Trim(ds.Tables(0).Rows(j)("Clave")) <> "" Then
                    Fila.Cells(LetraContabilidadComplemento.Index).Value = Me.LetraContabilidadComplemento.Items(Obtener_indexletra(Trim(ds.Tables(0).Rows(j)("Clave"))))
                End If

            Catch ex As Exception

            End Try
            Dim year As String = ds.Tables(0).Rows(j)("Fecha_Emision").ToString.Substring(6, 4)
            Dim month As String = ds.Tables(0).Rows(j)("Fecha_Emision").ToString.Substring(3, 2)
            Me.TablaC.Item(AnioComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Anio_Contable")) = True, year, ds.Tables(0).Rows(j)("Anio_Contable"))
            Me.TablaC.Item(MesComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Mes_Contable")) = True, month, ds.Tables(0).Rows(j)("Mes_Contable"))
            Me.TablaC.Item(ImpEfComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Efectivo")) = True, 0, ds.Tables(0).Rows(j)("Imp_Efectivo"))
            Me.TablaC.Item(CtaEfComplemento.Index, j).Value = ds.Tables(0).Rows(j)("Cuenta_Efectivo")
            Me.TablaC.Item(ImpTComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Transf")) = True, 0, ds.Tables(0).Rows(j)("Imp_Transf"))


            Me.TablaC.Item(BancoOrigenTComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Banco_Origen")) = True, "", ds.Tables(0).Rows(j)("Banco_Origen"))


            Me.TablaC.Item(CtaOTComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cuenta_Origen")) = True, "", ds.Tables(0).Rows(j)("Cuenta_Origen"))

            Try
                If Trim(ds.Tables(0).Rows(j)("Banco_Destino")) <> "" Then
                    Fila.Cells(BancoDtComplemento.Index).Value = Me.BancoDtComplemento.Items(Obtener_indexBancodes(Trim(ds.Tables(0).Rows(j)("Banco_Destino"))))
                End If
            Catch ex As Exception

            End Try

            Me.TablaC.Item(CtaDTComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cuenta_Destino")) = True, "", ds.Tables(0).Rows(j)("Cuenta_Destino"))
            Me.TablaC.Item(FTComplemento.Index, j).Value = ds.Tables(0).Rows(j)("Fecha_Transaccion")
            Me.TablaC.Item(ImpChComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Cheque")) = True, 0, ds.Tables(0).Rows(j)("Imp_Cheque"))

            Try
                If Trim(ds.Tables(0).Rows(j)("Banco_Dest_Cheque")) <> "" Then
                    Fila.Cells(BancoDEC.Index).Value = Me.BancoDEC.Items(Obtener_indexBncoCh(Trim(ds.Tables(0).Rows(j)("Banco_Dest_Cheque"))))
                End If
            Catch ex As Exception

            End Try
            Me.TablaC.Item(CtaBancoDChC.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cuenta_Dest_Cheque")) = True, "", ds.Tables(0).Rows(j)("Cuenta_Dest_Cheque"))
            Me.TablaC.Item(BancoCHComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Nom_Banco_Ch")) = True, "", ds.Tables(0).Rows(j)("Nom_Banco_Ch"))
            Me.TablaC.Item(CtaOchComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cuenta_Origen_Ch")) = True, "", ds.Tables(0).Rows(j)("Cuenta_Origen_Ch"))
            Me.TablaC.Item(NoChComplemento.Index, j).Value = ds.Tables(0).Rows(j)("No_Cheque")

            Me.TablaC.Item(FCHComplemento.Index, j).Value = ds.Tables(0).Rows(j)("Fecha_Ch")
            Me.TablaC.Item(CtaBancosComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cuenta_Bancos")) = True, "", ds.Tables(0).Rows(j)("Cuenta_Bancos"))
            Me.TablaC.Item(ProvAComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Provision_Acreedor")) = True, 0, ds.Tables(0).Rows(j)("Provision_Acreedor"))
            Me.TablaC.Item(ProvPComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Provision_Proveedor")) = True, 0, ds.Tables(0).Rows(j)("Provision_Proveedor"))
            Me.TablaC.Item(DifComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Diferencia")) = True, 0, ds.Tables(0).Rows(j)("Diferencia"))

            Try
                If Trim(ds.Tables(0).Rows(j)("Tipo_Poliza")) <> "" Then
                    Fila.Cells(TipPolComplemento.Index).Value = Me.TipPolComplemento.Items(Obtener_indextipo(Trim(ds.Tables(0).Rows(j)("Tipo_Poliza"))))
                End If

            Catch ex As Exception

            End Try

            Try
                If Trim(ds.Tables(0).Rows(j)("Ser")) <> "" Then
                    Fila.Cells(SerC.Index).Value = Me.SerC.Items(Obtener_indexSerC(Trim(ds.Tables(0).Rows(j)("Ser"))))
                End If

            Catch ex As Exception

            End Try
            '   Me.TablaImportar.Item(tipopoliza.INDEX, j).Value = ds.Tables(0).Rows(j)("Tipo_Poliza")
            Me.TablaC.Item(ImpGComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Grabado")) = True, 0, ds.Tables(0).Rows(j)("Imp_Grabado"))
            Me.TablaC.Item(ImpEComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Exento")) = True, 0, ds.Tables(0).Rows(j)("Imp_Exento"))
            Me.TablaC.Item(IvaRComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("IVA_real")) = True, 0, ds.Tables(0).Rows(j)("IVA_real"))
            Me.TablaC.Item(PPAComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Prc_Pago_Acumulado")) = True, 0, ds.Tables(0).Rows(j)("Prc_Pago_Acumulado"))
            Me.TablaC.Item(TRComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Total_Real")) = True, 0, ds.Tables(0).Rows(j)("Total_Real"))
            Me.TablaC.Item(MoneComplemento.Index, j).Value = ds.Tables(0).Rows(j)("Moneda")
            Me.TablaC.Item(UCComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Utilidad_Cambiaria")) = True, 0, ds.Tables(0).Rows(j)("Utilidad_Cambiaria"))
            Me.TablaC.Item(PCComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Perdida_Cambiaria")) = True, 0, ds.Tables(0).Rows(j)("Perdida_Cambiaria"))
            Me.TablaC.Item(ImpDevComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Imp_Devolucion")) = True, 0, ds.Tables(0).Rows(j)("Imp_Devolucion"))
            Me.TablaC.Item(CtaDevComplemento.Index, j).Value = ds.Tables(0).Rows(j)("Cuenta_Devolucion")

            Me.TablaC.Item(NumPolComplemento.Index, j).Value = ds.Tables(0).Rows(j)("numpol")
            Me.TablaC.Item(RISRComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("RIRS")) = True, 0, ds.Tables(0).Rows(j)("RIRS"))
            Me.TablaC.Item(RIVAComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("RIVA")) = True, 0, ds.Tables(0).Rows(j)("RIVA"))


            'Ajutes y Anticipos
            Me.TablaC.Item(AntiComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Anticipos")) = True, 0, ds.Tables(0).Rows(j)("Anticipos"))
            Me.TablaC.Item(CtaAntiComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cta_Ajuste")) = True, "", ds.Tables(0).Rows(j)("Cta_Ajuste"))
            Me.TablaC.Item(AjusComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Ajuste")) = True, 0, ds.Tables(0).Rows(j)("Ajuste"))
            Me.TablaC.Item(CtaAjusComplemento.Index, j).Value = IIf(IsDBNull(ds.Tables(0).Rows(j)("Cta_Anticipos")) = True, "", ds.Tables(0).Rows(j)("Cta_Anticipos"))
            Try
                If Trim(ds.Tables(0).Rows(j)("Cta_Orden")) <> "" Then
                    Fila.Cells(CtaOrdenC.Index).Value = Me.CtaOrdenC.Items(Obtener_indexCtaOrdenC(Trim(IIf(IsDBNull(ds.Tables(0).Rows(j)("Cta_Orden")) = True, "NO", ds.Tables(0).Rows(j)("Cta_Orden")))))
                End If
            Catch ex As Exception

            End Try
            frm.Barra.Value = j
        Next
        frm.Close()
    End Sub

    Private Sub Cargar_valores_contablesC()
        If Me.TablaC.Rows.Count >= 1 Then
            Dim frm As New BarraProcesovb
            frm.Show()
            frm.Text = "Calculando importes Gravados, Exentos e IVA´s de Pagos por favor espere..."
            frm.Barra.Minimum = 0
            frm.Barra.Maximum = Me.TablaC.Rows.Count
            For i As Integer = 0 To Me.TablaC.Rows.Count - 1

                Try


                    Dim PorcenPro, ImpGpro, ImpEpro, ImpIvaP As Decimal
                    PorcenPro = Me.TablaC.Item(TotComplemento.Index, i).Value / ImpFaCURA(Me.TablaC.Item(UUIDRComplemento.Index, i).Value, "Total_Real")
                    ImpGpro = ImpFaCURA(Me.TablaC.Item(UUIDRComplemento.Index, i).Value, "Imp_Grabado") * PorcenPro
                    ImpEpro = ImpFaCURA(Me.TablaC.Item(UUIDRComplemento.Index, i).Value, "Imp_Exento") * PorcenPro
                    ImpIvaP = ImpFaCURA(Me.TablaC.Item(UUIDRComplemento.Index, i).Value, "IVA_real") * PorcenPro

                    Me.TablaC.Item(SubTotComplemento.Index, i).Value = ImpFaCURA(Me.TablaC.Item(UUIDRComplemento.Index, i).Value, "Total_Real")
                    Me.TablaC.Item(IvaComplemento.Index, i).Value = ImpFaCURA(Me.TablaC.Item(UUIDRComplemento.Index, i).Value, "IVA_real")


                    If Trim(Me.TablaC.Item(MoneComplemento.Index, i).Value.ToString) <> "USD" Then
                        If Me.TablaC.Item(TotComplemento.Index, i).Value > 0 And Me.TablaC.Item(TotComplemento.Index, i).Value <> Nothing Then
                            'importe gravado
                            Me.TablaC.Item(ImpGComplemento.Index, i).Value = ImpGpro
                            'importe exento
                            Me.TablaC.Item(ImpEComplemento.Index, i).Value = ImpEpro
                            'Iva_real
                            Me.TablaC.Item(IvaRComplemento.Index, i).Value = ImpIvaP
                            'calcula el % Pago Acumulado
                            If Me.TablaC.Item(ImpEComplemento.Index, i).Value < 1 Then
                                Me.TablaC.Item(ImpGComplemento.Index, i).Value = Me.TablaC.Item(ImpGComplemento.Index, i).Value + Me.TablaC.Item(ImpEComplemento.Index, i).Value
                                Me.TablaC.Item(ImpEComplemento.Index, i).Value = 0
                            End If
                            'Total real

                            If Me.TablaC.Item(IvaComplemento.Index, i).Value = 0 Then
                                Me.TablaC.Item(TRComplemento.Index, i).Value = Me.TablaC.Item(TotComplemento.Index, i).Value
                            Else
                                Me.TablaC.Item(TRComplemento.Index, i).Value = Me.TablaC.Item(ImpGComplemento.Index, i).Value + Me.TablaC.Item(ImpEComplemento.Index, i).Value + Me.TablaC.Item(IvaRComplemento.Index, i).Value
                            End If

                        End If
                    Else
                        ' calcular en dolares
                        If Me.TablaC.Item(TotComplemento.Index, i).Value > 0 And Me.TablaC.Item(TotComplemento.Index, i).Value <> Nothing Then
                            'importe gravado
                            Me.TablaC.Item(ImpGComplemento.Index, i).Value = ImpGpro * Calcula_Moneda(Me.TablaC.Item(FechaEComplemento.Index, i).Value.ToString.Substring(0, 10)) / 0.16
                            'importe exento
                            Me.TablaC.Item(ImpEComplemento.Index, i).Value = ImpEpro * Calcula_Moneda(Me.TablaC.Item(FechaEComplemento.Index, i).Value.ToString.Substring(0, 10))
                            'Iva_real
                            Me.TablaC.Item(IvaRComplemento.Index, i).Value = ImpIvaP
                            'calcula el % Pago Acumulado
                            'Total real
                            If Me.TablaC.Item(ImpEComplemento.Index, i).Value < 1 Then
                                Me.TablaC.Item(ImpGComplemento.Index, i).Value = Me.TablaC.Item(ImpGComplemento.Index, i).Value + Me.TablaC.Item(ImpEComplemento.Index, i).Value
                                Me.TablaC.Item(ImpEComplemento.Index, i).Value = 0
                            End If
                            If Me.TablaC.Item(IvaComplemento.Index, i).Value = 0 Then
                                Me.TablaC.Item(TRComplemento.Index, i).Value = Me.TablaC.Item(TotComplemento.Index, i).Value
                            Else
                                Me.TablaC.Item(TRComplemento.Index, i).Value = Me.TablaC.Item(ImpGComplemento.Index, i).Value + Me.TablaC.Item(ImpEComplemento.Index, i).Value + Me.TablaC.Item(IvaRComplemento.Index, i).Value
                            End If
                        End If

                    End If
                Catch ex As Exception
                    Me.TablaC.Rows(i).DefaultCellStyle.BackColor = Color.Red
                End Try
                frm.Barra.Value = i
            Next
            frm.Close()
        End If
    End Sub
    Private Sub Color_ColumnasC()
        Dim contador As Integer = 0
        Dim frm As New BarraProcesovb
        frm.Show()
        frm.Text = "Asignando codigo de colores por favor espere..."
        frm.Barra.Minimum = 0
        frm.Barra.Maximum = Me.TablaC.Columns.Count
        For Each Column As DataGridViewColumn In TablaC.Columns
            If Column.Index = AnioComplemento.Index Or Column.Index = MesComplemento.Index Or Column.Index = BancoOrigenTComplemento.Index Or Column.Index = BancoDtComplemento.Index Or Column.Index = FTComplemento.Index Or Column.Index = BancoCHComplemento.Index Or Column.Index = NoChComplemento.Index Or Column.Index = FCHComplemento.Index Or Column.Index = ProvAComplemento.Index Or Column.Index = ProvPComplemento.Index Or Column.Index = UCComplemento.Index Or Column.Index = PCComplemento.Index Or Column.Index = ImpDevComplemento.Index Or Column.Index = CtaDevComplemento.Index Then
                Column.DefaultCellStyle.BackColor = Color.RoyalBlue
            ElseIf Column.Index = AjusComplemento.Index Then
                Column.DefaultCellStyle.BackColor = Color.GreenYellow
            ElseIf Column.Index = AntiComplemento.Index Then
                Column.DefaultCellStyle.BackColor = Color.LawnGreen
            ElseIf Column.Index = ImpProviComplemento.Index Then
                Column.DefaultCellStyle.BackColor = Color.MediumPurple
            ElseIf Column.Index = TipPolComplemento.Index Or Column.Index = NumPolComplemento.Index Then
                Column.DefaultCellStyle.BackColor = Color.Orange
            ElseIf Column.Index = NomCtaComplemento.Index Or Column.Index = CtaBancosComplemento.Index Or Column.Index = CtaChequesC.Index Then
                Column.DefaultCellStyle.BackColor = Color.Orange
            ElseIf Column.Index = ImpEfComplemento.Index Or Column.Index = ImpTComplemento.Index Or Column.Index = ImpChComplemento.Index Then
                Column.DefaultCellStyle.BackColor = Color.OliveDrab
            End If
            frm.Barra.Value += 1
        Next
        frm.Close()
    End Sub
    Private Sub CmdProcesaComple_Click(sender As Object, e As EventArgs) Handles CmdProcesaComple.Click
        If Me.TablaC.Rows.Count > 0 Then
            If Me.lstCliente.SelectText <> "" Then
                If Verifica_catalogo_cliente(Me.lstCliente.SelectItem) = True Then
                    Guardar_Complementos()
                    RadMessageBox.SetThemeName("MaterialBlueGrey")
                    If RadMessageBox.Show("El cliente " & Me.lstCliente.SelectText & " es correcto?", Eventos.titulo_app, MessageBoxButtons.YesNo, RadMessageIcon.Question) = Windows.Forms.DialogResult.Yes Then
                        Me.BarraComple.Maximum = Me.TablaC.RowCount - 1
                        Me.BarraComple.Minimum = 0
                        Me.BarraComple.Value1 = 0

                        For p As Integer = 0 To Me.TablaC.RowCount - 1
                            If Me.TablaC.Item(ApliComplemento.Index, p).Value = True Then ' se paso todos los filtros de creacion
                                Codificar_polizasComplementos(p)
                            End If
                            If Me.BarraComple.Value1 = Me.BarraComple.Maximum Then
                                Me.BarraComple.Minimum = 0
                                Me.Cursor = Cursors.Arrow
                                RadMessageBox.Show("Proceso Terminado", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
                                Me.BarraComple.Value1 = 0
                            Else
                                Me.BarraComple.Value1 += 1
                            End If
                        Next
                    End If
                Else
                    RadMessageBox.Show("No existe Catalogo de cuentas para: " & Me.lstCliente.SelectText & "", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
                End If
                Me.CmdBuscarComple.PerformClick()
            Else
                RadMessageBox.Show("No se ha seleccionado una Empresa", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
            End If



        Else
            RadMessageBox.SetThemeName("MaterialBlueGrey")
            RadMessageBox.Show("No se ha Importado ningun archivo", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
        End If
    End Sub
    Private Sub Guardar_Complementos()
        If Me.TablaC.Rows.Count >= 1 Then
            For i As Integer = 0 To Me.TablaC.Rows.Count - 1

                Guardar_Cmpl(IIf(IsDBNull(Me.TablaC.Item(LetraSatComplemento.Index, i).Value), "", Me.TablaC.Item(LetraSatComplemento.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(NomCtaComplemento.Index, i).Value), "", Me.TablaC.Item(NomCtaComplemento.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(LetraContabilidadComplemento.Index, i).Value), "", Me.TablaC.Item(LetraContabilidadComplemento.Index, i).Value),
                           Me.TablaC.Item(AnioComplemento.Index, i).Value, Me.TablaC.Item(MesComplemento.Index, i).Value, Me.TablaC.Item(ImpEfComplemento.Index, i).Value, IIf(IsDBNull(Me.TablaC.Item(CtaEfComplemento.Index, i).Value), "", Me.TablaC.Item(CtaEfComplemento.Index, i).Value),
                           Me.TablaC.Item(ImpTComplemento.Index, i).Value, IIf(IsDBNull(Me.TablaC.Item(BancoOrigenTComplemento.Index, i).Value), "", Me.TablaC.Item(BancoOrigenTComplemento.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(CtaOTComplemento.Index, i).Value), "", Me.TablaC.Item(CtaOTComplemento.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(BancoDtComplemento.Index, i).Value), "", Me.TablaC.Item(BancoDtComplemento.Index, i).Value),
                           IIf(IsDBNull(Me.TablaC.Item(FTComplemento.Index, i).Value), "", Me.TablaC.Item(FTComplemento.Index, i).Value), Me.TablaC.Item(ImpChComplemento.Index, i).Value, IIf(IsDBNull(Me.TablaC.Item(BancoCHComplemento.Index, i).Value), "", Me.TablaC.Item(BancoCHComplemento.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(CtaOchComplemento.Index, i).Value), "", Me.TablaC.Item(CtaOchComplemento.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(NoChComplemento.Index, i).Value), "", Me.TablaC.Item(NoChComplemento.Index, i).Value),
                          IIf(IsDBNull(Me.TablaC.Item(FCHComplemento.Index, i).Value), "", Me.TablaC.Item(FCHComplemento.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(CtaBancosComplemento.Index, i).Value), "", Me.TablaC.Item(CtaBancosComplemento.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(ProvAComplemento.Index, i).Value), 0, Me.TablaC.Item(ProvAComplemento.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(ProvPComplemento.Index, i).Value), 0, Me.TablaC.Item(ProvPComplemento.Index, i).Value),
                           IIf(IsDBNull(Me.TablaC.Item(DifComplemento.Index, i).Value), 0, Me.TablaC.Item(DifComplemento.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(TipPolComplemento.Index, i).Value), "", Me.TablaC.Item(TipPolComplemento.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(ImpGComplemento.Index, i).Value), 0, Me.TablaC.Item(ImpGComplemento.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(ImpEComplemento.Index, i).Value), 0, Me.TablaC.Item(ImpEComplemento.Index, i).Value),
                          IIf(IsDBNull(Me.TablaC.Item(IvaRComplemento.Index, i).Value), 0, Me.TablaC.Item(IvaRComplemento.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(PPAComplemento.Index, i).Value), 0, Me.TablaC.Item(PPAComplemento.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(TRComplemento.Index, i).Value), 0, Me.TablaC.Item(TRComplemento.Index, i).Value), Me.TablaC.Item(UCComplemento.Index, i).Value, IIf(IsDBNull(Me.TablaC.Item(PCComplemento.Index, i).Value), 0, Me.TablaC.Item(PCComplemento.Index, i).Value),
                           Me.TablaC.Item(ImpDevComplemento.Index, i).Value, IIf(IsDBNull(Me.TablaC.Item(CtaDevComplemento.Index, i).Value), "", Me.TablaC.Item(CtaDevComplemento.Index, i).Value), Me.TablaC.Item(Id_Complemento.Index, i).Value, IIf(IsDBNull(Me.TablaC.Item(NumPolComplemento.Index, i).Value), "", Me.TablaC.Item(NumPolComplemento.Index, i).Value), Me.TablaC.Item(RISRComplemento.Index, i).Value, Me.TablaC.Item(RIVAComplemento.Index, i).Value,
                           IIf(IsDBNull(Me.TablaC.Item(CtaDTComplemento.Index, i).Value), "", Me.TablaC.Item(CtaDTComplemento.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(AjusComplemento.Index, i).Value), 0, Me.TablaC.Item(AjusComplemento.Index, i).Value),
                           IIf(IsDBNull(Me.TablaC.Item(CtaAjusComplemento.Index, i).Value), "", Me.TablaC.Item(CtaAjusComplemento.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(AntiComplemento.Index, i).Value), 0, Me.TablaC.Item(AntiComplemento.Index, i).Value),
                           IIf(IsDBNull(Me.TablaC.Item(CtaAntiComplemento.Index, i).Value), "", Me.TablaC.Item(CtaAntiComplemento.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(ImpProviComplemento.Index, i).Value), 0, Me.TablaC.Item(ImpProviComplemento.Index, i).Value),
                           IIf(IsDBNull(Me.TablaC.Item(CtaOrdenC.Index, i).Value), "", Me.TablaC.Item(CtaOrdenC.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(SerC.Index, i).Value), "", Me.TablaC.Item(SerC.Index, i).Value),
IIf(IsDBNull(Me.TablaC.Item(BancoDEC.Index, i).Value), "", Me.TablaC.Item(BancoDEC.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(CtaBancoDChC.Index, i).Value), "", Me.TablaC.Item(CtaBancoDChC.Index, i).Value), IIf(IsDBNull(Me.TablaC.Item(CtaChequesC.Index, i).Value), "", Me.TablaC.Item(CtaChequesC.Index, i).Value))
            Next
            RadMessageBox.SetThemeName("MaterialBlueGrey")
            RadMessageBox.Show("Proceso Guardado Completado ...", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
        End If
    End Sub

    Private Sub Guardar_Cmpl(ByVal Letra_Sat As String, ByVal Nombre_cuenta As String, ByVal Clave As String,
                            ByVal Anio_Contable As String, ByVal Mes_Contable As String, ByVal Imp_Efectivo As Decimal, ByVal Cuenta_Efectivo As String,
                            ByVal Imp_Transf As Decimal, ByVal Banco_Origen As String, ByVal Cuenta_Origen As String, ByVal Banco_Destino As String,
                            ByVal Fecha_Transaccion As String, ByVal Imp_Cheque As Decimal, ByVal Nom_Banco_Ch As String, ByVal Cuenta_Origen_Ch As String, ByVal No_Cheque As String,
                            ByVal Fecha_Ch As String, ByVal Cuenta_Bancos As String, ByVal Provision_Acreedor As Decimal, ByVal Provision_Proveedor As Decimal,
                            ByVal Diferencia As Decimal, ByVal Tipo_Poliza As String, ByVal Imp_Grabado As Decimal, ByVal Imp_Exento As Decimal,
                            ByVal IVA_real As Decimal, ByVal Prc_Pago_Acumulado As Decimal, ByVal Total_Real As Decimal, ByVal Utilidad_Cambiaria As Decimal, ByVal Perdida_Cambiaria As Decimal,
                            ByVal Imp_Devolucion As Decimal, ByVal Cuenta_Devolucion As String, ByVal Id_Registro_Xml As Integer, ByVal numpol As String, ByVal risr As Decimal, ByVal riva As Decimal,
                            ByVal ctadestino As String, ByVal ajus As Decimal, ByVal ctaajus As String, ByVal anti As Decimal, ByVal ctaanti As String, ByVal ImpProvis As Decimal, ByVal CtaOrden As String, ByVal Ser As String,
                             ByVal Banco_Dest_Cheque As String, ByVal Cuenta_Dest_Cheque As String, ByVal Cuenta_Cheques As String)
        Dim sql As String = "UPDATE dbo.Xml_Complemento
                SET 		Letra_Sat = '" & Letra_Sat & "',
                	Nombre_cuenta = '" & Nombre_cuenta & "',
                	Clave = '" & Clave & "',
                	Anio_Contable = '" & Anio_Contable & "',
                	Mes_Contable = '" & Mes_Contable & "',
                	Imp_Efectivo = " & Imp_Efectivo & ",
                	Cuenta_Efectivo = '" & Cuenta_Efectivo & "',
                	Imp_Transf = " & Imp_Transf & ",
                	Banco_Origen = '" & Banco_Origen & "',
                	Cuenta_Origen = '" & Cuenta_Origen & "',
                	Banco_Destino = '" & Banco_Destino & "',
                	Fecha_Transaccion = " & Eventos.Sql_hoy(Fecha_Transaccion) & ",
                	Imp_Cheque =" & Imp_Cheque & ",
                	Nom_Banco_Ch = '" & Nom_Banco_Ch & "',
                	Cuenta_Origen_Ch = '" & Cuenta_Origen_Ch & "',
                	No_Cheque = '" & No_Cheque & "',
                	Fecha_Ch = " & Eventos.Sql_hoy(Fecha_Ch) & ",
                	Cuenta_Bancos = '" & Cuenta_Bancos & "',
                	Provision_Acreedor = " & Provision_Acreedor & ",
                	Provision_Proveedor = " & Provision_Proveedor & ",
                	Diferencia = " & Diferencia & ",
                	Tipo_Poliza = '" & Tipo_Poliza & "',
                	Imp_Grabado =  " & Imp_Grabado & ",
                	Imp_Exento =  " & Imp_Exento & ",
                	IVA_real =  " & IVA_real & ",
                	Prc_Pago_Acumulado =  " & Prc_Pago_Acumulado & ",
                	Total_Real =  " & Total_Real & ",
                	Utilidad_Cambiaria =  " & Utilidad_Cambiaria & ",
                	Perdida_Cambiaria =  " & Perdida_Cambiaria & ",
                	Imp_Devolucion =  " & Imp_Devolucion & ",
                	Cuenta_Devolucion = '" & Cuenta_Devolucion & "', 
                    Numpol= '" & Trim(numpol) & "', 
                     RIRS= " & risr & ", 
                     RIVA= " & riva & ", 
                     Cuenta_Destino= '" & ctadestino & "',
                      Ajuste= " & ajus & ", 
                     Anticipos= " & anti & ",  
                       Cta_Ajuste= '" & ctaajus & "', 
                     Cta_Anticipos= '" & ctaanti & "',
                           Cta_Orden= '" & CtaOrden & "',
                     Ser= '" & Ser & "' ,  Banco_Dest_Cheque= '" & Banco_Dest_Cheque & "', Cuenta_Dest_Cheque= '" & Cuenta_Dest_Cheque & "',Cuenta_Cheques= '" & Cuenta_Cheques & "'
	 
                WHERE Id_Xml_Complemento = " & Id_Registro_Xml & ""
        If Eventos.Comando_sql(sql) > 0 Then
            Eventos.Insertar_usuariol("GuardaXMLC", sql)
        End If
    End Sub

    Private Sub Codificar_polizasComplementos(ByVal posicion As Integer)
        Dim poliza_Sistema As String = ""
        '  If Me.TablaImportar.Item(Psistema.Index, posicion).Value <> "" Then ' quitar linea despues del desbloqueo
        poliza_Sistema = Calcula_polizaC(posicion)
        '  End If

        'Calcular consecutivo poliza
        Dim posi As Integer = InStr(1, poliza_Sistema, "-", CompareMethod.Binary)
        Dim cuantos As Integer = Len(poliza_Sistema) - Len(poliza_Sistema.Substring(0, posi))
        Dim consecutivo As Integer = Val(poliza_Sistema.Substring(posi, cuantos))
        'Crear poliza
        'Checar dia de la Poliza poner if
        Dim dia As String = ""
        If Me.TablaC.Item(ImpTComplemento.Index, posicion).Value > 0 Then
            dia = Me.TablaC.Item(FTComplemento.Index, posicion).Value.ToString.Substring(0, 2)
        ElseIf Me.TablaC.Item(ImpEfComplemento.Index, posicion).Value > 0 Then
            dia = Me.TablaC.Item(FechaEComplemento.Index, posicion).Value.ToString.Substring(0, 2)
        ElseIf Me.TablaC.Item(ImpChComplemento.Index, posicion).Value > 0 Then
            dia = Me.TablaC.Item(FCHComplemento.Index, posicion).Value.ToString.Substring(0, 2)
        Else
            dia = Me.TablaC.Item(FechaEComplemento.Index, posicion).Value.ToString.Substring(0, 2)
        End If
        ' CREAR iF para calcular el dia
        If Creapoliza(poliza_Sistema, Me.TablaC.Item(AnioComplemento.Index, posicion).Value, Me.TablaC.Item(MesComplemento.Index, posicion).Value, dia,
                   consecutivo, Checa_tipo(Me.TablaC.Item(TipPolComplemento.Index, posicion).Value, Me.lstCliente.SelectItem),
                   Me.TablaC.Item(FechaEComplemento.Index, posicion).Value, "Pago S/Fact" & " " & Trim(Me.TablaC.Item(UUIDComplemento.Index, posicion).Value), "Carga", Me.TablaC.Item(NumPolComplemento.Index, posicion).Value, Me.TablaC.Item(Id_Complemento.Index, posicion).Value, True) = True Then

            If Buscafactura(Me.TablaC.Item(UUIDComplemento.Index, posicion).Value, "C") = True Then
                'Se inserta la Factura
                Inserta_Comprobante_Fiscal(poliza_Sistema, Me.TablaC.Item(AnioComplemento.Index, posicion).Value, Me.TablaC.Item(MesComplemento.Index, posicion).Value,
                             Me.TablaC.Item(RFCComplemento.Index, posicion).Value, Me.TablaC.Item(FechaEComplemento.Index, posicion).Value,
                               Me.TablaC.Item(UUIDComplemento.Index, posicion).Value, "Factura " & Trim(Me.TablaC.Item(RFCComplemento.Index, posicion).Value) & " C", Me.TablaC.Item(TRComplemento.Index, posicion).Value)
            Else
                'Se Edita la Factura
                ' Edita_Factura(Me.TablaC.Item(UUIDComplemento.Index, posicion).Value, "C", poliza_Sistema)
            End If


            If Me.TablaC.Item(ImpEfComplemento.Index, posicion).Value > 0 Then
                ' Insertar registro contabiidad electronica efectivo
                Inserta_Comprobante_Fiscal_Efectivo(poliza_Sistema, Me.TablaC.Item(AnioComplemento.Index, posicion).Value, Me.TablaC.Item(MesComplemento.Index, posicion).Value,
                                Me.TablaC.Item(RFCComplemento.Index, posicion).Value, Me.TablaC.Item(TipPolComplemento.Index, posicion).Value.ToString.Substring(0, 3), Me.TablaC.Item(FechaEComplemento.Index, posicion).Value,
                              "", "", "", "", Me.TablaC.Item(ImpEfComplemento.Index, posicion).Value)
            End If
            If Trim(UCase(Me.lblce.Text)) = "TRUE" Then ' SE INSERTA CONTABILIDAD ELECTRONICA

                If Me.TablaC.Item(ImpTComplemento.Index, posicion).Value > 0 Then
                    ' Insertar registro contabiidad electronica Transferencia
                    Dim cadena As String = Me.TablaC.Item(BancoOrigenTComplemento.Index, posicion).Value
                    Dim posil As Integer = InStr(1, cadena, "-", CompareMethod.Binary)
                    Dim BO As String = cadena.Substring(0, posil - 1)

                    cadena = Me.TablaC.Item(BancoDtComplemento.Index, posicion).Value
                    posil = InStr(1, cadena, "-", CompareMethod.Binary)
                    Dim Bd As String = cadena.Substring(0, posil - 1)

                    Inserta_Comprobante_Fiscal_Transf(poliza_Sistema, Me.TablaC.Item(AnioComplemento.Index, posicion).Value, Me.TablaC.Item(MesComplemento.Index, posicion).Value,
                                    Me.TablaC.Item(RFCComplemento.Index, posicion).Value, Me.TablaC.Item(TipPolComplemento.Index, posicion).Value.ToString.Substring(0, 3), Me.TablaC.Item(FTComplemento.Index, posicion).Value,
                                  "", BO, Me.TablaC.Item(CtaOTComplemento.Index, posicion).Value, Me.TablaC.Item(UUIDComplemento.Index, posicion).Value, Me.TablaC.Item(ImpTComplemento.Index, posicion).Value, Bd, Me.TablaC.Item(CtaDTComplemento.Index, posicion).Value)
                End If

                If Me.TablaC.Item(ImpChComplemento.Index, posicion).Value > 0 Then
                    ' Insertar registro contabiidad electronica Cheque
                    Dim cadena As String = Me.TablaC.Item(BancoCHComplemento.Index, posicion).Value
                    Dim posil As Integer = InStr(1, cadena, "-", CompareMethod.Binary)
                    Dim BO As String = cadena.Substring(0, posil - 1)

                    Inserta_Comprobante_Fiscal_Cheque(poliza_Sistema, Me.TablaC.Item(AnioComplemento.Index, posicion).Value, Me.TablaC.Item(MesComplemento.Index, posicion).Value,
                                    Me.TablaC.Item(RFCComplemento.Index, posicion).Value, Me.TablaC.Item(TipPolComplemento.Index, posicion).Value.ToString.Substring(0, 3), Me.TablaC.Item(FCHComplemento.Index, posicion).Value,
                                  Me.TablaC.Item(NoChComplemento.Index, posicion).Value, BO, Me.TablaC.Item(CtaOchComplemento.Index, posicion).Value, Me.TablaC.Item(UUIDComplemento.Index, posicion).Value, Me.TablaC.Item(ImpChComplemento.Index, posicion).Value)
                End If
            End If

            'Verificara el sistema las polizas automatizadas
            Crear_detalleComple(posicion, poliza_Sistema)
        End If

    End Sub
    Private Sub Crear_detalleComple(ByVal p As Integer, ByVal pol As String)


        Dim Item As Integer = 1
        Dim cadena As String = ""
        Dim posi As Integer = 0
        Dim cuantos As Integer = 0
        Dim Cuenta_Cargo As String = ""
        Dim Cuenta2 As String = ""

        '1° Inserta los Bancos
        If Me.TablaC.Item(ImpEfComplemento.Index, p).Value > 0 And Me.TablaC.Item(ImpTComplemento.Index, p).Value > 0 And Me.TablaC.Item(ImpChComplemento.Index, p).Value > 0 Then 'TODOS

            cadena = Trim(Me.TablaC.Item(CtaEfComplemento.Index, p).Value)
            posi = InStr(1, cadena, "-", CompareMethod.Binary)
            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
            Cuenta_Cargo = cadena.Substring(posi, cuantos)
            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpEfComplemento.Index, p).Value, 0, Cuenta_Cargo, "")

            Item = Item + 1

            cadena = Trim(Me.TablaC.Item(CtaBancosComplemento.Index, p).Value)
            posi = InStr(1, cadena, "-", CompareMethod.Binary)
            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
            Cuenta_Cargo = cadena.Substring(posi, cuantos)
            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpTComplemento.Index, p).Value, 0, Cuenta_Cargo, "")

            Item = Item + 1
            cadena = Trim(Me.TablaC.Item(CtaChequesC.Index, p).Value)
            posi = InStr(1, cadena, "-", CompareMethod.Binary)
            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
            Cuenta_Cargo = cadena.Substring(posi, cuantos)
            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpChComplemento.Index, p).Value, 0, Cuenta_Cargo, Me.TablaC.Item(NoChComplemento.Index, p).Value)


        ElseIf Me.TablaC.Item(ImpEfComplemento.Index, p).Value > 0 And Me.TablaC.Item(ImpTComplemento.Index, p).Value > 0 And Me.TablaC.Item(ImpChComplemento.Index, p).Value = 0 Then 'Efectivo y Transferencia
            cadena = Trim(Me.TablaC.Item(CtaEfComplemento.Index, p).Value)
            posi = InStr(1, cadena, "-", CompareMethod.Binary)
            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
            Cuenta_Cargo = cadena.Substring(posi, cuantos)
            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpEfComplemento.Index, p).Value, 0, Cuenta_Cargo, "")
            Item = Item + 1
            cadena = Trim(Me.TablaC.Item(CtaBancosComplemento.Index, p).Value)
            posi = InStr(1, cadena, "-", CompareMethod.Binary)
            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
            Cuenta_Cargo = cadena.Substring(posi, cuantos)
            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpTComplemento.Index, p).Value, 0, Cuenta_Cargo, "")

        ElseIf Me.TablaC.Item(ImpEfComplemento.Index, p).Value = 0 And Me.TablaC.Item(ImpTComplemento.Index, p).Value > 0 And Me.TablaC.Item(ImpChComplemento.Index, p).Value > 0 Then 'Cheque y Transferencia

            cadena = Trim(Me.TablaC.Item(CtaBancosComplemento.Index, p).Value)
            posi = InStr(1, cadena, "-", CompareMethod.Binary)
            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
            Cuenta_Cargo = cadena.Substring(posi, cuantos)
            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpTComplemento.Index, p).Value, 0, Cuenta_Cargo, "")
            Item = Item + 1
            cadena = Trim(Me.TablaC.Item(CtaChequesC.Index, p).Value)
            posi = InStr(1, cadena, "-", CompareMethod.Binary)
            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
            Cuenta_Cargo = cadena.Substring(posi, cuantos)
            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpChComplemento.Index, p).Value, 0, Cuenta_Cargo, Me.TablaC.Item(NoChComplemento.Index, p).Value)

        ElseIf Me.TablaC.Item(ImpEfComplemento.Index, p).Value > 0 And Me.TablaC.Item(ImpTComplemento.Index, p).Value = 0 And Me.TablaC.Item(ImpChComplemento.Index, p).Value > 0 Then 'Cheque y Efecivo
            cadena = Trim(Me.TablaC.Item(CtaEfComplemento.Index, p).Value)
            posi = InStr(1, cadena, "-", CompareMethod.Binary)
            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
            Cuenta_Cargo = cadena.Substring(posi, cuantos)
            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpEfComplemento.Index, p).Value, 0, Cuenta_Cargo, "")
            Item = Item + 1
            cadena = Trim(Me.TablaC.Item(CtaChequesC.Index, p).Value)
            posi = InStr(1, cadena, "-", CompareMethod.Binary)
            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
            Cuenta_Cargo = cadena.Substring(posi, cuantos)
            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpChComplemento.Index, p).Value, 0, Cuenta_Cargo, Me.TablaC.Item(NoChComplemento.Index, p).Value)
        ElseIf Me.TablaC.Item(ImpEfComplemento.Index, p).Value > 0 And Me.TablaC.Item(ImpTComplemento.Index, p).Value = 0 And Me.TablaC.Item(ImpChComplemento.Index, p).Value = 0 Then ' Efecivo
            'Cuenta del Abono
            cadena = Trim(Me.TablaC.Item(CtaEfComplemento.Index, p).Value)
            posi = InStr(1, cadena, "-", CompareMethod.Binary)
            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
            Cuenta_Cargo = cadena.Substring(posi, cuantos)

            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpEfComplemento.Index, p).Value, 0, Cuenta_Cargo, "")

        ElseIf Me.TablaC.Item(ImpEfComplemento.Index, p).Value = 0 And Me.TablaC.Item(ImpTComplemento.Index, p).Value > 0 And Me.TablaC.Item(ImpChComplemento.Index, p).Value = 0 Then ' Transferencia
            'Cuenta del Abono transferencia
            cadena = Trim(Me.TablaC.Item(CtaBancosComplemento.Index, p).Value)
            posi = InStr(1, cadena, "-", CompareMethod.Binary)
            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
            Cuenta_Cargo = cadena.Substring(posi, cuantos)
            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpTComplemento.Index, p).Value, 0, Cuenta_Cargo, IIf(IsDBNull(Me.TablaC.Item(NoChComplemento.Index, p).Value) = True, "", Me.TablaC.Item(NoChComplemento.Index, p).Value))

        ElseIf Me.TablaC.Item(ImpEfComplemento.Index, p).Value = 0 And Me.TablaC.Item(ImpTComplemento.Index, p).Value = 0 And Me.TablaC.Item(ImpChComplemento.Index, p).Value > 0 Then 'Cheque 
            cadena = Trim(Me.TablaC.Item(CtaChequesC.Index, p).Value)
            posi = InStr(1, cadena, "-", CompareMethod.Binary)
            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
            Cuenta_Cargo = cadena.Substring(posi, cuantos)
            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpChComplemento.Index, p).Value, 0, Cuenta_Cargo, Me.TablaC.Item(NoChComplemento.Index, p).Value)

        End If


        '2° Inserta Ajustes

        If Me.TablaC.Item(AjusComplemento.Index, p).Value < 0 Then ' Se verifica si cuenta con ajuste +
            cadena = Trim(Me.TablaC.Item(CtaAjusComplemento.Index, p).Value)
            posi = InStr(1, cadena, "-", CompareMethod.Binary)
            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
            Cuenta_Cargo = cadena.Substring(posi, cuantos)
            'cargo de Ajuste
            Crea_detalle_poliza(pol, Item, 0, Me.TablaC.Item(AjusComplemento.Index, p).Value * -1, Cuenta_Cargo, "")
            Item = Item + 1
        ElseIf Me.TablaC.Item(AjusComplemento.Index, p).Value > 0 Then ' Se verifica si cuenta con ajuste -

            cadena = Trim(Me.TablaC.Item(CtaAjusComplemento.Index, p).Value)
            posi = InStr(1, cadena, "-", CompareMethod.Binary)
            cuantos = Len(cadena) - Len(cadena.Substring(0, posi))
            Cuenta_Cargo = cadena.Substring(posi, cuantos)
            'Abono de Ajuste
            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(AjusComplemento.Index, p).Value, 0, Cuenta_Cargo, "")
            Item = Item + 1
        End If
        If Me.TablaC.Item(PCComplemento.Index, p).Value > 0 Then ' Se perdida cambiaria
            Item = Item + 1
            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(PCComplemento.Index, p).Value, 0, "7010000100000000", "")
        End If
        If Me.TablaC.Item(UCComplemento.Index, p).Value > 0 Then ' Se utilidad cambiaria
            Item = Item + 1
            Crea_detalle_poliza(pol, Item, 0, Me.TablaC.Item(UCComplemento.Index, p).Value, "7020000100000000", "")
        End If

        Item = Item + 1
        'Cancela Cuenta Cliente
        Cuenta_Cargo = RegresaCunetaComple(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "Clientes", Me.TablaC.Item(SerC.Index, p).Value), Trim(Me.TablaC.Item(RFCComplemento.Index, p).Value), p, 1)
        Crea_detalle_poliza(pol, Item, 0, Me.TablaC.Item(TRComplemento.Index, p).Value, Cuenta_Cargo, "")

        Dim PorcenPro, ImpGpro, ImpEpro, ImpIvaP As Decimal
        PorcenPro = Me.TablaC.Item(TRComplemento.Index, p).Value / ImpFaCURA(Me.TablaC.Item(UUIDRComplemento.Index, p).Value, "Total_Real")
        ImpGpro = ImpFaCURA(Me.TablaC.Item(UUIDRComplemento.Index, p).Value, "Imp_Grabado") * PorcenPro
        ImpEpro = ImpFaCURA(Me.TablaC.Item(UUIDRComplemento.Index, p).Value, "Imp_Exento") * PorcenPro
        ImpIvaP = ImpFaCURA(Me.TablaC.Item(UUIDRComplemento.Index, p).Value, "IVA_real") * PorcenPro



        If Me.TablaC.Item(ImpEComplemento.Index, p).Value > 0 And Me.TablaC.Item(ImpGComplemento.Index, p).Value > 0 And Me.TablaC.Item(IvaRComplemento.Index, p).Value > 0 Then ' tiene grabado y exento

            Cuenta2 = RegresaCunetaComple(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCE", Me.TablaC.Item(SerC.Index, p).Value), Trim(Me.TablaC.Item(RFCComplemento.Index, p).Value), p, 1)
            Cuenta_Cargo = RegresaCunetaComple(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCG", Me.TablaC.Item(SerC.Index, p).Value), Trim(Me.TablaC.Item(RFCComplemento.Index, p).Value), p, 1)
            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpGComplemento.Index, p).Value, 0, Cuenta_Cargo, "")
            Item = Item + 1
            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpEComplemento.Index, p).Value, 0, Cuenta2, "")
            Item = Item + 1
            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(IvaComplemento.Index, p).Value, 0, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "IVAPTras", Me.TablaC.Item(SerC.Index, p).Value), "")

            Item = Item + 1

        ElseIf Me.TablaC.Item(ImpEComplemento.Index, p).Value > 0 And Me.TablaC.Item(ImpGComplemento.Index, p).Value <= 0 Then 'Tiene Exento o 0

            Cuenta_Cargo = RegresaCunetaComple(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCE", Me.TablaC.Item(SerC.Index, p).Value), Trim(Me.TablaC.Item(RFCComplemento.Index, p).Value), p, 1)
            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpEComplemento.Index, p).Value, 0, Cuenta_Cargo, "")
            Item = Item + 1

        ElseIf Me.TablaC.Item(ImpEComplemento.Index, p).Value <= 0 And Me.TablaC.Item(ImpGComplemento.Index, p).Value > 0 Then 'Tiene Grabado

            Cuenta_Cargo = RegresaCunetaComple(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngPCG", Me.TablaC.Item(SerC.Index, p).Value), Trim(Me.TablaC.Item(RFCComplemento.Index, p).Value), p, 1)
            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpGComplemento.Index, p).Value, 0, Cuenta_Cargo, "")
            Item = Item + 1
            Crea_detalle_poliza(pol, Item, Me.TablaC.Item(IvaComplemento.Index, p).Value, 0, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "IVAPTras", Me.TablaC.Item(SerC.Index, p).Value), "")

            Item = Item + 1

        End If

        'Cargos con cuentas efectivo bancos

        If Me.TablaC.Item(ImpEComplemento.Index, p).Value > 0 And Me.TablaC.Item(ImpGComplemento.Index, p).Value > 0 And Me.TablaC.Item(IvaComplemento.Index, p).Value > 0 Then ' tiene grabado y exento

            Cuenta2 = RegresaCunetaComple(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngEx", Me.TablaC.Item(SerC.Index, p).Value), Trim(Me.TablaC.Item(RFCComplemento.Index, p).Value), p, 1)
            Cuenta_Cargo = RegresaCunetaComple(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngG", Me.TablaC.Item(SerC.Index, p).Value), Trim(Me.TablaC.Item(RFCComplemento.Index, p).Value), p, 1)
            Crea_detalle_poliza(pol, Item, 0, Me.TablaC.Item(ImpGComplemento.Index, p).Value, Cuenta_Cargo, "")
            Item = Item + 1
            Crea_detalle_poliza(pol, Item, 0, Me.TablaC.Item(ImpEComplemento.Index, p).Value, Cuenta2, "")
            Item = Item + 1
            Crea_detalle_poliza(pol, Item, 0, Me.TablaC.Item(IvaComplemento.Index, p).Value, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "IVATras", Me.TablaC.Item(SerC.Index, p).Value), "")

            Item = Item + 1

        ElseIf Me.TablaC.Item(ImpEComplemento.Index, p).Value > 0 And Me.TablaC.Item(ImpGComplemento.Index, p).Value <= 0 Then 'Tiene Exento o 0

            Cuenta_Cargo = RegresaCunetaComple(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngEx", Me.TablaC.Item(SerC.Index, p).Value), Trim(Me.TablaC.Item(RFCComplemento.Index, p).Value), p, 1)
            Crea_detalle_poliza(pol, Item, 0, Me.TablaC.Item(ImpEComplemento.Index, p).Value, Cuenta_Cargo, "")
            Item = Item + 1

        ElseIf Me.TablaC.Item(ImpEComplemento.Index, p).Value <= 0 And Me.TablaC.Item(ImpGComplemento.Index, p).Value > 0 Then 'Tiene Grabado

            Cuenta_Cargo = RegresaCunetaComple(Regresa_Cuenta_Series(Me.lstCliente.SelectItem, "CtaIngG", Me.TablaC.Item(SerC.Index, p).Value), Trim(Me.TablaC.Item(RFCComplemento.Index, p).Value), p, 1)
            Crea_detalle_poliza(pol, Item, 0, Me.TablaC.Item(ImpGComplemento.Index, p).Value, Cuenta_Cargo, "")
            Item = Item + 1
            Crea_detalle_poliza(pol, Item, 0, Me.TablaC.Item(IvaComplemento.Index, p).Value, Regresa_Cuenta_Impuestos(Me.lstCliente.SelectItem, "IVATras", Me.TablaC.Item(SerC.Index, p).Value), "")

            Item = Item + 1

        End If




        '°Checar si se tiene correctas las ctas de Orden

        If UCase(Me.TablaC.Item(CtaOrdenC.Index, p).Value) = "SI" Then
            Item = Item + 1
            If Len(Me.TablaC.Item(RFCComplemento.Index, p).Value) = 12 Then

                If Me.TablaC.Item(ImpEComplemento.Index, p).Value > 0 And Me.TablaC.Item(ImpGComplemento.Index, p).Value > 0 Then
                    Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpGComplemento.Index, p).Value, 0, "9011001000010003", "")
                    Item = Item + 1
                    If Trim(UCase(Me.lble.Text)) = "TRUE" Then
                        Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpEComplemento.Index, p).Value, 0, "9011001000010001", "")
                    Else
                        Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpEComplemento.Index, p).Value, 0, "9011001000010002", "")
                    End If
                    Item = Item + 1

                ElseIf Me.TablaC.Item(ImpEComplemento.Index, p).Value > 0 And Me.TablaC.Item(ImpGComplemento.Index, p).Value <= 0 Then 'Tiene Exento
                    If Trim(UCase(Me.lble.Text)) = "TRUE" Then
                        Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpEComplemento.Index, p).Value, 0, "9011001000010001", "")
                    Else
                        Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpEComplemento.Index, p).Value, 0, "9011001000010002", "")
                    End If
                    Item = Item + 1
                ElseIf Me.TablaC.Item(ImpEComplemento.Index, p).Value <= 0 And Me.TablaC.Item(ImpGComplemento.Index, p).Value > 0 Then 'Tiene Grabado
                    Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpGComplemento.Index, p).Value, 0, "9011001000010003", "")
                    Item = Item + 1
                End If
            Else

                If Me.TablaC.Item(ImpEComplemento.Index, p).Value > 0 And Me.TablaC.Item(ImpGComplemento.Index, p).Value > 0 Then
                    Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpGComplemento.Index, p).Value, 0, "9011002000010003", "")
                    Item = Item + 1
                    If Trim(UCase(Me.lble.Text)) = "TRUE" Then
                        Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpEComplemento.Index, p).Value, 0, "9011002000010001", "")
                    Else
                        Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpEComplemento.Index, p).Value, 0, "9011002000010002", "")
                    End If
                    Item = Item + 1

                ElseIf Me.TablaC.Item(ImpEComplemento.Index, p).Value > 0 And Me.TablaC.Item(ImpGComplemento.Index, p).Value <= 0 Then 'Tiene Exento
                    If Trim(UCase(Me.lble.Text)) = "TRUE" Then
                        Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpEComplemento.Index, p).Value, 0, "9011002000010001", "")
                    Else
                        Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpEComplemento.Index, p).Value, 0, "9011002000010002", "")
                    End If
                    Item = Item + 1
                ElseIf Me.TablaC.Item(ImpEComplemento.Index, p).Value <= 0 And Me.TablaC.Item(ImpGComplemento.Index, p).Value > 0 Then 'Tiene Grabado
                    Crea_detalle_poliza(pol, Item, Me.TablaC.Item(ImpGComplemento.Index, p).Value, 0, "9011002000010003", "")
                    Item = Item + 1
                End If
            End If

            If Me.TablaC.Item(ImpEComplemento.Index, p).Value > 0 And Me.TablaC.Item(ImpGComplemento.Index, p).Value > 0 Then

                Cuenta2 = RegresaCunetaComple("901000010003", Trim(Me.TablaC.Item(RFCComplemento.Index, p).Value), p, 0)
                Crea_detalle_poliza(pol, Item, 0, Me.TablaC.Item(ImpGComplemento.Index, p).Value, Cuenta2, "")
                Item = Item + 1
                If Trim(UCase(Me.lble.Text)) = "TRUE" Then
                    Cuenta2 = RegresaCunetaComple("901000010001", Trim(Me.TablaC.Item(RFCComplemento.Index, p).Value), p, 0)
                Else
                    Cuenta2 = RegresaCunetaComple("901000010002", Trim(Me.TablaC.Item(RFCComplemento.Index, p).Value), p, 0)
                End If
                Crea_detalle_poliza(pol, Item, 0, Me.TablaC.Item(ImpEComplemento.Index, p).Value, Cuenta2, "")
                Item = Item + 1

            ElseIf Me.TablaC.Item(ImpEComplemento.Index, p).Value > 0 And Me.TablaC.Item(ImpGComplemento.Index, p).Value <= 0 Then 'Tiene Exento
                If Trim(UCase(Me.lble.Text)) = "TRUE" Then
                    Cuenta2 = RegresaCunetaComple("901000010001", Trim(Me.TablaC.Item(RFCComplemento.Index, p).Value), p, 0)
                Else
                    Cuenta2 = RegresaCunetaComple("901000010002", Trim(Me.TablaC.Item(RFCComplemento.Index, p).Value), p, 0)
                End If
                Crea_detalle_poliza(pol, Item, 0, Me.TablaC.Item(ImpEComplemento.Index, p).Value, Cuenta2, "")
                Item = Item + 1
            ElseIf Me.TablaC.Item(ImpEComplemento.Index, p).Value <= 0 And Me.TablaC.Item(ImpGComplemento.Index, p).Value > 0 Then 'Tiene Grabado
                Cuenta2 = RegresaCunetaComple("901000010003", Trim(Me.TablaC.Item(RFCComplemento.Index, p).Value), p, 0)
                Crea_detalle_poliza(pol, Item, 0, Me.TablaC.Item(ImpGComplemento.Index, p).Value, Cuenta2, "")
                Item = Item + 1
            End If
        End If


        Exit Sub
    End Sub

    Private Sub LstComple_Enters() Handles LstComple.Enters
        If Me.TablaC.Rows.Count > 0 Then
            For Each Fila As DataGridViewRow In TablaC.Rows
                If Fila.Cells(LetraContabilidadComplemento.Index).Selected = True Then

                    Try
                        If Me.LstComple.SelectText = "" Then
                            Fila.Cells(LetraContabilidadComplemento.Index).Value = ""
                        Else
                            If Obtener_ID(Me.LstComple.SelectText, Me.LetraContabilidadComplemento) < 0 Then
                                Fila.Cells(LetraContabilidadComplemento.Index).Value = ""
                            Else
                                'Dim s As String = Me.LetraContabilidadComplemento.Items(1)
                                Fila.Cells(LetraContabilidadComplemento.Index).Value = Me.LetraContabilidadComplemento.Items(Obtener_ID(Me.LstComple.SelectText, Me.LetraContabilidadComplemento))
                                'Fila.Cells(LetraContabilidadComplemento.Index).Value = Me.LetraContabilidadComplemento.Items(Obtener_index(Me.LstComple.SelectText))
                            End If
                        End If
                    Catch ex As Exception

                    End Try
                ElseIf Fila.Cells(BancoOrigenTComplemento.Index).Selected = True Then

                ElseIf Fila.Cells(BancoDtComplemento.Index).Selected = True Then

                    Try
                        If Me.LstComple.SelectText = "" Then
                            Fila.Cells(BancoDtComplemento.Index).Value = ""

                        Else
                            If Obtener_indexBancodes(Me.LstComple.SelectText) < 0 Then
                                Fila.Cells(BancoDtComplemento.Index).Value = ""
                            Else
                                'Dim s As String = Me.BancoDtComplemento.Items(1)
                                Fila.Cells(BancoDtComplemento.Index).Value = Me.BancoDtComplemento.Items(Obtener_indexBancodes(Me.LstComple.SelectText))
                            End If
                        End If

                    Catch ex As Exception

                    End Try
                ElseIf Fila.Cells(TipPolComplemento.Index).Selected = True Then

                    Try

                        If Me.LstComple.SelectText = "" Then
                            Fila.Cells(TipPolComplemento.Index).Value = ""
                        Else
                            Try
                                If Obtener_indextipo(Me.LstComple.SelectText) < 0 Then
                                    Fila.Cells(TipPolComplemento.Index).Value = ""
                                Else
                                    Dim s As String = Me.TipPolComplemento.Items(1)
                                    Fila.Cells(TipPolComplemento.Index).Value = Me.TipPolComplemento.Items(Obtener_indextipo(Me.LstComple.SelectText))
                                End If

                            Catch ex As Exception

                            End Try
                        End If

                    Catch ex As Exception

                    End Try
                Else

                    For j As Integer = 0 To Me.TablaC.Columns.Count - 1
                        If Me.TablaC.Item(j, Fila.Index).Selected = True And (j <> LetraContabilidadComplemento.Index And j <> BancoDtComplemento.Index And j <> TipPolComplemento.Index) Then
                            Me.TablaC.Item(j, Fila.Index).Value = Me.LstComple.SelectText
                        ElseIf Me.TablaC.Item(j, Fila.Index).Selected = True And (j = LetraContabilidadComplemento.Index And j = BancoDtComplemento.Index And j = TipPolComplemento.Index) Then
                            Me.TablaC.Item(j, Fila.Index).Value = ""
                        End If
                    Next
                End If
                Liberar_ProcesoComple(Fila.Index)
            Next
        End If

    End Sub
    Private Sub TablaC_CellClick(sender As Object, e As DataGridViewCellEventArgs) Handles TablaC.CellClick

        Dim columna As Integer = Me.TablaC.CurrentCell.ColumnIndex
        Dim Nombre As String
        Nombre = Me.TablaC.Columns.Item(Me.TablaC.CurrentCell.ColumnIndex).Name.ToString
        Me.LstComple.Cargar(" Select '','' ")

        Select Case Nombre
            Case "LetraContabilidadComplemento"
                Me.LstComple.Cargar(" Select 'I' as Clave ,'I' as Cla   ")
                Me.LstComple.SelectText = ""
            Case "CtaEfComplemento"
                Me.LstComple.Cargar(" Select Id_cat_cuentas, rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1010' and Nivel2 > 0 and Nivel3 > 0 ")
                Me.LstComple.SelectText = ""
            Case "CtaDTComplemento"
                Me.LstComple.Cargar(" Select Id_cat_cuentas, rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1020'and Nivel2 > 0 and Nivel3 > 0  ")
                Me.LstComple.SelectText = ""
            Case "BancoDEC"
                Me.LstComple.Cargar("select Id_Bancos_Clientes,Alias from Bancos_Clientes where Id_Empresa = " & Me.lstCliente.SelectItem & " and alias like '%Cheq%'")
                Me.LstComple.SelectText = ""
            Case "BancoOrigenTComplemento"
                Me.LstComple.Cargar(" select Id_Bancos_Clientes,Alias from Bancos_Clientes where Id_Empresa = " & Me.lstCliente.SelectItem & " and alias like '%Transf%'")
                Me.LstComple.SelectText = ""
            Case "TipPolComplemento"
                Me.LstComple.Cargar("  Select convert(NVARCHAR,Clave,103)  +' - ' + Nombre as Clave, convert(NVARCHAR,Clave,103)  +' - ' + Nombre as Clave  from Tipos_Poliza_Sat INNER JOIN Tipo_Poliza ON Tipo_Poliza.Id_Tipo_poliza = Tipos_Poliza_Sat.Id_Tipo_poliza  where Id_Empresa= " & Me.lstCliente.SelectItem & "  ")
                Me.LstComple.SelectText = ""
            Case "CtaAjusComplemento"
                Me.LstComple.Cargar("Select  Id_cat_cuentas,  rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " ")
                Me.LstComple.SelectText = ""
            Case "CtaAntiComplemento"
                Me.LstComple.Cargar("Select Id_cat_cuentas,  rtrim(Descripcion) +' - '+ convert(NVARCHAR,cuenta,103) as Cuenta from Catalogo_de_Cuentas where Id_Empresa = " & Me.lstCliente.SelectItem & " and nivel1 ='1070' and Nivel2 > 0 and Nivel3 > 0 ")
                Me.LstComple.SelectText = ""
            Case "BancoDtComplemento"

                Me.LstComple.Cargar(" SELECT id_bancos_clientes,rtrim(Bancos.Clave) +'-'+ Bancos_Clientes.Alias AS Alias FROM Bancos_Clientes INNER JOIN Bancos ON Bancos_Clientes.Id_Banco =Bancos.Id_Banco  where Id_Empresa = " & Me.lstCliente.SelectItem & "  ")
                Me.LstComple.SelectText = ""

            Case "SerC"
                Me.LstComple.Cargar("SELECT Series.Id_Ingreso, Series.Serie FROM Series WHERE  Id_Empresa = " & Me.lstCliente.SelectItem & " ")
                Me.LstComple.SelectText = ""
        End Select
    End Sub
    Private Sub TablaC_CellEndEdit(sender As Object, e As DataGridViewCellEventArgs) Handles TablaC.CellEndEdit
        Liberar_ProcesoComple(Me.TablaC.CurrentRow.Index)
        'Calcula cuenta cargos

        If Me.TablaC.Item(ProvPComplemento.Index, Me.TablaC.CurrentRow.Index).Value > 0 Then
            Me.TablaC.Item(ProvAComplemento.Index, Me.TablaC.CurrentRow.Index).Value = 0
        ElseIf Me.TablaC.Item(ProvAComplemento.Index, Me.TablaC.CurrentRow.Index).Value > 0 Then
            Me.TablaC.Item(ProvPComplemento.Index, Me.TablaC.CurrentRow.Index).Value = 0
        End If

        If Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value <> Nothing Then
            Me.TablaC.Item(NomCtaComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Cuenta_cargos(Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value, Trim(Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value))
            Me.TablaC.Item(LetraSatComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Eventos.Calcula_letraSat(Me.TablaC.Item(FpagoComplemento.Index, Me.TablaC.CurrentRow.Index).Value, Me.TablaC.Item(UCFDIComplemento.Index, Me.TablaC.CurrentRow.Index).Value)

            If Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value = "C" Or Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value = "CPP" Then
                Me.TablaC.Item(ProvAComplemento.Index, Me.TablaC.CurrentRow.Index).Value = 0
            ElseIf Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value = "GG" Or Me.TablaC.Item(LetraContabilidadComplemento.Index, Me.TablaC.CurrentRow.Index).Value = "GGPP" Then
                Me.TablaC.Item(ProvPComplemento.Index, Me.TablaC.CurrentRow.Index).Value = 0
            End If
        Else
            Me.TablaC.Item(NomCtaComplemento.Index, Me.TablaC.CurrentRow.Index).Value = ""
        End If


        If Me.TablaC.Item(ImpEfComplemento.Index, Me.TablaC.CurrentRow.Index).Value > 0 Then


            Me.TablaC.Item(CtaEfComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Cuenta_Efectivo()
            Me.TablaC.Columns(CtaEfComplemento.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells

        Else
            Me.TablaC.Item(CtaEfComplemento.Index, Me.TablaC.CurrentRow.Index).Value = ""
        End If


        If Me.TablaC.Item(AjusComplemento.Index, Me.TablaC.CurrentRow.Index).Value <> 0 Then

            Me.TablaC.Item(CtaAjusComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Cuenta_Efectivo()
            Me.TablaC.Columns(CtaAjusComplemento.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells

        Else
            Me.TablaC.Item(CtaAjusComplemento.Index, Me.TablaC.CurrentRow.Index).Value = ""
        End If

        If Me.TablaC.Item(AntiComplemento.Index, Me.TablaC.CurrentRow.Index).Value > 0 Then

            Me.TablaC.Item(CtaAntiComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Cuenta_Anticipo()
            Me.TablaC.Columns(CtaAntiComplemento.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
        Else
            Me.TablaC.Item(CtaAntiComplemento.Index, Me.TablaC.CurrentRow.Index).Value = ""
        End If






        If Me.TablaC.Item(ImpTComplemento.Index, Me.TablaC.CurrentRow.Index).Value > 0 Then
            If Trim(Me.TablaC.Item(BancoDtComplemento.Index, Me.TablaC.CurrentRow.Index).Value) <> "" Then
                If Trim(Me.TablaC.Item(CtaDTComplemento.Index, Me.TablaC.CurrentRow.Index).Value) <> "" Then
                Else
                    Dim posi As Integer = InStr(1, Me.TablaC.Item(BancoDtComplemento.Index, Me.TablaC.CurrentRow.Index).Value, "-", CompareMethod.Binary)
                    Dim cuantos As Integer = Len(Me.TablaC.Item(BancoDtComplemento.Index, Me.TablaC.CurrentRow.Index).Value) - Len(Me.TablaC.Item(BancoDtComplemento.Index, Me.TablaC.CurrentRow.Index).Value.Substring(0, posi))
                    Dim Al As String = Me.TablaC.Item(BancoDtComplemento.Index, Me.TablaC.CurrentRow.Index).Value.Substring(posi, cuantos)
                    Me.TablaC.Item(CtaDTComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes", "No_Cuenta", " Id_Empresa =" & Me.lstCliente.SelectItem & " and Alias = '" & Trim(Al) & "'", True)
                    Me.TablaC.Item(CtaBancosComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes INNER JOIN Catalogo_de_Cuentas ON Catalogo_de_Cuentas.Id_cat_Cuentas = Bancos_Clientes.Id_cat_Cuentas", "Catalogo_de_Cuentas.Cuenta", " Bancos_Clientes.Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos_Clientes.Alias = '" & Trim(Al) & "'", True)
                End If
            Else

            End If

            '
            Try
                If Trim(Me.TablaC.Item(CtaOTComplemento.Index, Me.TablaC.CurrentRow.Index).Value) <> "" And Trim(Me.TablaC.Item(CtaOTComplemento.Index, Me.TablaC.CurrentRow.Index).Value) <> Nothing Then
                    Dim largo As Integer = Len(Me.TablaC.Item(BancoOrigenTComplemento.Index, Me.TablaC.CurrentRow.Index).Value)
                    Dim cadena As String = Trim(Me.TablaC.Item(BancoOrigenTComplemento.Index, Me.TablaC.CurrentRow.Index).Value.ToString.Substring(largo - 3, 3))
                    largo = Len(Me.TablaC.Item(CtaOTComplemento.Index, Me.TablaC.CurrentRow.Index).Value)
                    Dim Al As String = Me.TablaC.Item(CtaOTComplemento.Index, Me.TablaC.CurrentRow.Index).Value.Substring(largo - 3, 3)
                    If cadena <> Al Then
                        largo = InStr(1, Me.TablaC.Item(BancoOrigenTComplemento.Index, Me.TablaC.CurrentRow.Index).Value, "-", CompareMethod.Binary)
                        Al = Me.TablaC.Item(BancoOrigenTComplemento.Index, Me.TablaC.CurrentRow.Index).Value.Substring(0, largo - 1)
                        Me.TablaC.Item(CtaOTComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos.Clave = " & Trim(Al) & " and  RFC = '" & Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value & "' and Bancos_RFC.clabe like '%" & cadena & "%'", True)
                    End If
                Else
                    Me.TablaC.Item(BancoOrigenTComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Banco_destinoComp(Me.lstCliente.SelectItem, Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value)
                    Dim posi As Integer = InStr(1, Me.TablaC.Item(BancoOrigenTComplemento.Index, Me.TablaC.CurrentRow.Index).Value, "-", CompareMethod.Binary)
                    Dim Al As String = Me.TablaC.Item(BancoOrigenTComplemento.Index, Me.TablaC.CurrentRow.Index).Value.Substring(0, posi - 1)
                    Me.TablaC.Item(CtaOTComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos.Clave = " & Trim(Al) & " and  RFC = '" & Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value & "'", True)
                End If
            Catch ex As Exception

            End Try


            If Trim(Me.TablaC.Item(BancoDtComplemento.Index, Me.TablaC.CurrentRow.Index).Value) <> "" Then
                Try
                    If Trim(Me.TablaC.Item(CtaDTComplemento.Index, Me.TablaC.CurrentRow.Index).Value) <> "" And Trim(Me.TablaC.Item(CtaDTComplemento.Index, Me.TablaC.CurrentRow.Index).Value) <> "0" Then
                    Else
                        Dim posi As Integer = InStr(1, Me.TablaC.Item(BancoDtComplemento.Index, Me.TablaC.CurrentRow.Index).Value, "-", CompareMethod.Binary)
                        Dim Al As String = Me.TablaC.Item(BancoDtComplemento.Index, Me.TablaC.CurrentRow.Index).Value.Substring(0, posi - 1)
                        Me.TablaC.Item(CtaDTComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC", "Clabe", " Id_Empresa =" & Me.lstCliente.SelectItem & " and id_banco = '" & Trim(Al) & "' and  RFC = '" & Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value & "'", True)
                    End If
                Catch ex As Exception

                End Try
            Else
                '  Banco_destinoComp()

            End If



            If Trim(UCase(Me.lblce.Text)) = "FALSE" Then
                Me.TablaC.Columns(BancoOrigenTComplemento.Index).Visible = False
                Me.TablaC.Columns(CtaOTComplemento.Index).Visible = False
                Me.TablaC.Columns(BancoDtComplemento.Index).Visible = False
                Me.TablaC.Columns(CtaDTComplemento.Index).Visible = False
                Me.TablaC.Columns(FTComplemento.Index).Visible = True

            End If


        End If






        If Me.TablaC.Item(ImpChComplemento.Index, Me.TablaC.CurrentRow.Index).Value > 0 Then

            'Cheques
            'Cargar bancos destino para ingresos de Cheques
            Dim posi As Integer = 0
            Dim Al As String = ""
            If Trim(Me.TablaC.Item(BancoDEC.Index, Me.TablaC.CurrentRow.Index).Value) <> "" Then
                If Trim(Me.TablaC.Item(CtaBancoDChC.Index, Me.TablaC.CurrentRow.Index).Value) <> "" Then


                Else
                    posi = InStr(1, Me.TablaC.Item(BancoDEC.Index, Me.TablaC.CurrentRow.Index).Value, "-", CompareMethod.Binary)
                    Dim cuantos As Integer = Len(Me.TablaC.Item(BancoDEC.Index, Me.TablaC.CurrentRow.Index).Value) - Len(Me.TablaC.Item(BancoDEC.Index, Me.TablaC.CurrentRow.Index).Value.Substring(0, posi))
                    Al = Me.TablaC.Item(BancoDEC.Index, Me.TablaC.CurrentRow.Index).Value.Substring(posi, cuantos)
                    Me.TablaC.Item(CtaBancoDChC.Index, Me.TablaC.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes", "No_Cuenta", " Id_Empresa =" & Me.lstCliente.SelectItem & " and Alias = '" & Trim(Al) & "'", True)
                    Me.TablaC.Item(CtaChequesC.Index, Me.TablaC.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes INNER JOIN Catalogo_de_Cuentas ON Catalogo_de_Cuentas.Id_cat_Cuentas = Bancos_Clientes.Id_cat_Cuentas", "Catalogo_de_Cuentas.Cuenta", " Bancos_Clientes.Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos_Clientes.Alias = '" & Trim(Al) & "'", True)
                End If
            Else

            End If
            'Cargar bancos Origen para ingresos de Cheques
            If Trim(Me.TablaC.Item(BancoCHComplemento.Index, Me.TablaC.CurrentRow.Index).Value) <> "" Then
                If Trim(Me.TablaC.Item(CtaOchComplemento.Index, Me.TablaC.CurrentRow.Index).Value) <> "" Then
                    Dim largo As Integer = Len(Me.TablaC.Item(BancoCHComplemento.Index, Me.TablaC.CurrentRow.Index).Value)
                    Dim cadena As String = Trim(Me.TablaC.Item(BancoCHComplemento.Index, Me.TablaC.CurrentRow.Index).Value.ToString.Substring(largo - 3, 3))
                    largo = Len(Me.TablaC.Item(CtaOchComplemento.Index, Me.TablaC.CurrentRow.Index).Value)
                    Al = Me.TablaC.Item(CtaOchComplemento.Index, Me.TablaC.CurrentRow.Index).Value.Substring(largo - 3, 3)
                    If cadena <> Al Then
                        posi = InStr(1, Me.TablaC.Item(BancoCHComplemento.Index, Me.TablaC.CurrentRow.Index).Value, "-", CompareMethod.Binary)
                        Al = Trim(Me.TablaC.Item(BancoCHComplemento.Index, Me.TablaC.CurrentRow.Index).Value.Substring(0, posi - 1))
                        Me.TablaC.Item(CtaOchComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos.Clave = " & Trim(Al) & " and  RFC = '" & Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value & "' and Bancos_RFC.clabe like '%" & cadena & "%'", True)
                    End If
                Else
                    posi = InStr(1, Me.TablaC.Item(BancoCHComplemento.Index, Me.TablaC.CurrentRow.Index).Value, "-", CompareMethod.Binary)
                    Al = Trim(Me.TablaC.Item(BancoCHComplemento.Index, Me.TablaC.CurrentRow.Index).Value.Substring(0, posi - 1))
                    Me.TablaC.Item(CtaOchComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos.Clave = " & Trim(Al) & " and  RFC = '" & Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value & "'", True)
                End If
            Else
                Me.TablaC.Item(BancoCHComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Banco_OrigenChe(Me.lstCliente.SelectItem, Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value)
                Me.TablaC.Item(CtaOchComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & "  and  RFC = '" & Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value & "'", True)
            End If

            'Se Muestran Columnas de Contabilidad Electronica
            If Trim(UCase(Me.lblce.Text)) = "FALSE" Then
                Me.TablaC.Columns(BancoCHComplemento.Index).Visible = False
                Me.TablaC.Columns(CtaOchComplemento.Index).Visible = False
                Me.TablaC.Columns(NoChComplemento.Index).Visible = False
                Me.TablaC.Columns(FCHComplemento.Index).Visible = True
            End If

        End If

    End Sub
    Private Sub Liberar_ProcesoComple(ByVal i As Integer)
        Dim contador As Integer = 0
        Dim cantidad As Decimal = Me.TablaC.Item(ImpProviComplemento.Index, i).Value
        cantidad = cantidad + Me.TablaC.Item(UCComplemento.Index, i).Value
        cantidad = cantidad - Me.TablaC.Item(PCComplemento.Index, i).Value

        Dim Retencion As Decimal = 0
        Retencion = Me.TablaC.Item(RISRComplemento.Index, i).Value + Me.TablaC.Item(RIVAComplemento.Index, i).Value
        'Calcula la diferencia en el registro
        Me.TablaC.Item(DifComplemento.Index, i).Value = Math.Round(Calcula_diferencia(Me.TablaC.Item(TRComplemento.Index, i).Value - Retencion, Me.TablaC.Item(ImpEfComplemento.Index, i).Value, Me.TablaC.Item(ImpTComplemento.Index, i).Value + Me.TablaC.Item(ProvAComplemento.Index, i).Value + Me.TablaC.Item(ProvPComplemento.Index, i).Value, Me.TablaC.Item(ImpChComplemento.Index, i).Value, Me.TablaC.Item(AjusComplemento.Index, i).Value, Me.TablaC.Item(AntiComplemento.Index, i).Value, cantidad), 2)
        If Me.TablaC.Item(DifComplemento.Index, i).Value <> 0 Then
            Me.TablaC.Item(DifComplemento.Index, i).Style.BackColor = Color.Red
        Else
            Me.TablaC.Item(DifComplemento.Index, i).Style.BackColor = Color.Green
        End If

        If Trim(UCase(Me.lblce.Text)) = "TRUE" Then ' Bloquera filas de Contabilidad electronica
            ' If Me.TablaC.Item(DifComplemento.Index, i).Value > 0 Or Me.TablaC.Item(TipPolComplemento.Index, i).Value = Nothing Or IIf(IsDBNull(Me.TablaC.Item(NomCtaComplemento.Index, i).Value) = True, "", Me.TablaC.Item(NomCtaComplemento.Index, i).Value) = "" Or IIf(IsDBNull(Me.TablaC.Item(NumPolComplemento.Index, i).Value) = True, "", Me.TablaC.Item(NumPolComplemento.Index, i).Value) = "" Then
            Try
                If Me.TablaC.Item(DifComplemento.Index, i).Value <> 0 Or Me.TablaC.Item(TipPolComplemento.Index, i).Value = Nothing Or IIf(IsDBNull(Me.TablaC.Item(NumPolComplemento.Index, i).Value) = True, "", Me.TablaC.Item(NumPolComplemento.Index, i).Value.ToString) = "" Or IIf(IsDBNull(Me.TablaC.Item(SerC.Index, i).Value) = True, "", Me.TablaC.Item(SerC.Index, i).Value) = "" Then

                    Me.TablaC.Item(ApliComplemento.Index, i).Value = False
                Else

                    If Me.TablaC.Item(ImpTComplemento.Index, i).Value > 0 Then ' Bloqueo transferencia
                        Try
                            If Me.TablaC.Item(BancoOrigenTComplemento.Index, i).Value = Nothing Or Me.TablaC.Item(BancoDtComplemento.Index, i).Value = Nothing Or Me.TablaC.Item(CtaOTComplemento.Index, i).Value = Nothing Or Me.TablaC.Item(CtaDTComplemento.Index, i).Value = Nothing Or Me.TablaC.Item(FTComplemento.Index, i).Value = Nothing Then
                                Me.TablaC.Item(ApliComplemento.Index, i).Value = False
                            Else
                                Me.TablaC.Item(ApliComplemento.Index, i).Value = True
                            End If
                        Catch ex As Exception
                            Me.TablaC.Item(ApliComplemento.Index, i).Value = False
                        End Try

                    ElseIf Me.TablaC.Item(ImpChComplemento.Index, i).Value > 0 Then ' Bloqueo cheques
                        Try
                            If Me.TablaC.Item(BancoCHComplemento.Index, i).Value = Nothing Or Me.TablaC.Item(CtaOchComplemento.Index, i).Value = Nothing Or Me.TablaC.Item(NoChComplemento.Index, i).Value = Nothing Or Me.TablaC.Item(FCHComplemento.Index, i).Value = Nothing Then
                                Me.TablaC.Item(ApliComplemento.Index, i).Value = False
                            Else
                                Me.TablaC.Item(ApliComplemento.Index, i).Value = True
                            End If
                        Catch ex As Exception
                            Me.TablaC.Item(ApliComplemento.Index, i).Value = False
                        End Try

                    ElseIf Me.TablaC.Item(ImpChComplemento.Index, i).Value > 0 And Me.TablaC.Item(ImpTComplemento.Index, i).Value > 0 Then ' AMbos
                        Try
                            If Me.TablaC.Item(BancoOrigenTComplemento.Index, i).Value = Nothing Or Me.TablaC.Item(BancoDtComplemento.Index, i).Value = Nothing Or Me.TablaC.Item(CtaOTComplemento.Index, i).Value = Nothing Or Me.TablaC.Item(CtaDTComplemento.Index, i).Value = Nothing Or Me.TablaC.Item(FTComplemento.Index, i).Value = Nothing Then
                                Me.TablaC.Item(ApliComplemento.Index, i).Value = False
                            Else
                                Me.TablaC.Item(ApliComplemento.Index, i).Value = True
                            End If
                        Catch ex As Exception
                            Me.TablaC.Item(ApliComplemento.Index, i).Value = False
                        End Try

                        Try
                            If Me.TablaC.Item(BancoCHComplemento.Index, i).Value = Nothing Or Me.TablaC.Item(CtaOchComplemento.Index, i).Value = Nothing Or Me.TablaC.Item(NoChComplemento.Index, i).Value = Nothing Or Me.TablaC.Item(FCHComplemento.Index, i).Value = Nothing Then
                                Me.TablaC.Item(ApliComplemento.Index, i).Value = False
                            Else
                                Me.TablaC.Item(ApliComplemento.Index, i).Value = True
                            End If
                        Catch ex As Exception
                            Me.TablaC.Item(ApliComplemento.Index, i).Value = False
                        End Try
                    Else
                        Me.TablaC.Item(ApliComplemento.Index, i).Value = True
                    End If

                    If Me.TablaC.Item(AjusComplemento.Index, i).Value <> 0 Then ' Bloqueo Ajuste
                        If IIf(IsDBNull(Me.TablaC.Item(CtaAjusComplemento.Index, i).Value) = True, "", Me.TablaC.Item(CtaAjusComplemento.Index, i).Value) = "" Then
                            Me.TablaC.Item(ApliComplemento.Index, i).Value = False
                        Else
                            Me.TablaC.Item(ApliComplemento.Index, i).Value = True
                        End If
                    End If

                    If Me.TablaC.Item(AntiComplemento.Index, i).Value <> 0 Then ' Bloqueo Anticipo
                        If IIf(IsDBNull(Me.TablaC.Item(CtaAntiComplemento.Index, i).Value) = True, "", Me.TablaC.Item(CtaAntiComplemento.Index, i).Value) = "" Then
                            Me.TablaC.Item(ApliComplemento.Index, i).Value = False
                        Else
                            Me.TablaC.Item(ApliComplemento.Index, i).Value = True
                        End If
                    End If

                End If

            Catch ex As Exception
                Me.TablaC.Item(ApliComplemento.Index, i).Value = False
            End Try
        Else
            'sin contabilidad electronica
            If Me.TablaC.Item(DifComplemento.Index, i).Value <> 0 Or Me.TablaC.Item(TipPolComplemento.Index, i).Value = Nothing Or IIf(IsDBNull(Me.TablaC.Item(NumPolComplemento.Index, i).Value) = True, "", Me.TablaC.Item(NumPolComplemento.Index, i).Value) = "" Then
                Me.TablaC.Item(ApliComplemento.Index, i).Value = False
            Else
                Me.TablaC.Item(ApliComplemento.Index, i).Value = True
            End If
            Try
                If Me.TablaC.Item(AjusComplemento.Index, i).Value <> 0 Then ' Bloqueo Ajuste
                    If IIf(IsDBNull(Me.TablaC.Item(CtaAjusComplemento.Index, i).Value) = True, "", Me.TablaC.Item(CtaAjusComplemento.Index, i).Value) = "" Then
                        Me.TablaC.Item(ApliComplemento.Index, i).Value = False
                    Else
                        Me.TablaC.Item(ApliComplemento.Index, i).Value = True
                    End If
                End If

                If Me.TablaC.Item(AntiComplemento.Index, i).Value <> 0 Then ' Bloqueo Anticipo
                    If IIf(IsDBNull(Me.TablaC.Item(CtaAntiComplemento.Index, i).Value) = True, "", Me.TablaC.Item(CtaAntiComplemento.Index, i).Value) = "" Then
                        Me.TablaC.Item(ApliComplemento.Index, i).Value = False
                    Else
                        Me.TablaC.Item(ApliComplemento.Index, i).Value = True
                    End If
                End If
            Catch ex As Exception

            End Try
        End If

        For s As Integer = 0 To Me.TablaC.Rows.Count - 1
            If Me.TablaC.Item(0, s).Value = True Then
                contador = contador + 1
            End If
        Next
        If contador > 0 Then
            Me.CmdProcesaComple.Enabled = True
        End If
        If Me.TablaC.Item(ApliComplemento.Index, i).Style.BackColor = Color.Red Then
            Me.TablaC.Item(ApliComplemento.Index, i).Value = False
        End If
    End Sub
    Private Function Obtener_indexletra(ByVal valor As String)

        Dim Indice As Integer = -1
        For i As Integer = 0 To Me.LetraContabilidadComplemento.Items.Count - 1
            If valor = Trim(Me.LetraContabilidadComplemento.Items(i)) Then
                Indice = i
                Exit For
            End If
        Next
        Return Indice

    End Function
    Private Function Obtener_indextipo(ByVal valor As String)

        Dim Indice As Integer = -1
        For i As Integer = 0 To Me.TipPolComplemento.Items.Count - 1
            If valor = Trim(Me.TipPolComplemento.Items(i)) Then
                Indice = i
                Exit For
            End If
        Next
        Return Indice

    End Function

    Private Function Obtener_indexBncoCh(ByVal valor As String)

        Dim Indice As Integer = -1
        For i As Integer = 0 To Me.BancoDEC.Items.Count - 1
            If valor = Trim(Me.BancoDEC.Items(i)) Then
                Indice = i
                Exit For
            End If
        Next
        Return Indice

    End Function
    Private Function Obtener_indexBancodes(ByVal valor As String)
        Dim Indice As Integer = -1
        For i As Integer = 0 To Me.BancoDtComplemento.Items.Count - 1
            If valor = Trim(Me.BancoDtComplemento.Items(i)) Then

                Indice = i


                Exit For
            End If
        Next
        Return Indice

    End Function
    Private Sub Cargar_bancosComple(ByVal bancos As String)
        Dim sql As String = " SELECT rtrim(Bancos.Clave) +'-'+ Bancos_Clientes.Alias AS Alias FROM Bancos_Clientes INNER JOIN Bancos ON Bancos_Clientes.Id_Banco =Bancos.Id_Banco  where Id_Empresa = " & Me.lstCliente.SelectItem & " and alias like '%" & bancos & "%'"
        Dim ds As DataSet = Eventos.Obtener_DS(sql)
        If ds.Tables(0).Rows.Count > 0 Then
            If bancos = "Cheq" Then
                'Cheque
                If Me.BancoDEC.Items.Count = 0 Then
                    For i As Integer = 0 To ds.Tables(0).Rows.Count - 1
                        Me.BancoDEC.Items.Add(ds.Tables(0).Rows(i)("Alias"))
                    Next
                Else
                    Try
                        Me.BancoDEC.Items.Clear()
                    Catch ex As Exception

                    End Try

                    For i As Integer = 0 To ds.Tables(0).Rows.Count - 1
                        Me.BancoDEC.Items.Add(ds.Tables(0).Rows(i)("Alias"))
                    Next
                End If
            Else
                'Transferencia
                'Origen
                If Me.BancoDtComplemento.Items.Count = 0 Then
                    For i As Integer = 0 To ds.Tables(0).Rows.Count - 1
                        Me.BancoDtComplemento.Items.Add(ds.Tables(0).Rows(i)("Alias"))

                    Next
                Else
                    Try
                        Me.BancoDtComplemento.Items.Clear()
                    Catch ex As Exception

                    End Try


                    For i As Integer = 0 To ds.Tables(0).Rows.Count - 1
                        Me.BancoDtComplemento.Items.Add(ds.Tables(0).Rows(i)("Alias"))

                    Next
                End If

            End If
        End If

    End Sub

    Private Function Banco_destinoComp(ByVal Cliente As Integer, ByVal Rfc As String)

        Dim banco As String = ""
        Dim sql2 As String = " SELECT DISTINCT CONVERT(NVARCHAR, Bancos.Clave, 103) + '-' + Bancos.Nombre AS Banco ,clabe  FROM     Bancos INNER JOIN     Bancos_RFC ON Bancos.Id_Banco = Bancos_RFC.Id_Banco  WHERE  (Bancos_RFC.Id_Empresa  = " & Cliente & ") and RFC = '" & Rfc & "' and Favorito=1"
        Dim ds2 As DataSet = Eventos.Obtener_DS(sql2)

        If ds2.Tables(0).Rows.Count > 0 Then
            Dim largo As Integer = Len(ds2.Tables(0).Rows(0)("Clabe"))
            Try
                banco = Trim(ds2.Tables(0).Rows(0)("Banco")) & " " & Trim(ds2.Tables(0).Rows(0)("Clabe").ToString.Substring(largo - 3, 3))
            Catch ex As Exception

            End Try
        Else
            banco = ""
        End If

        Return banco

    End Function
    Private Sub CmdGuardaComple_Click(sender As Object, e As EventArgs) Handles CmdGuardaComple.Click
        Guardar_Complementos()
    End Sub

    Private Sub Candados(ByVal Posicion As Integer)

        If (Math.Round(Me.TablaImportar.Item(ImpProvis.Index, Posicion).Value) = Math.Round(Me.TablaImportar.Item(TReal.Index, Posicion).Value - (Me.TablaImportar.Item(RIVA.Index, Posicion).Value + Me.TablaImportar.Item(RISR.Index, Posicion).Value))) And Me.TablaImportar.Item(Dif.Index, Posicion).Value = 0 Then
            If Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value <> Nothing Then
                Dim Fila As DataGridViewRow = Me.TablaImportar.Rows(Posicion)
                Try
                    If Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value <> Nothing Then
                        If Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value Like "*PC*" Then
                        Else
                            Fila.Cells(ContabilizacionC.Index).Value = Me.ContabilizacionC.Items(Obtener_index(Trim(Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value) & "PC"))
                        End If

                    End If
                Catch ex As Exception

                End Try
            End If
        ElseIf Me.TablaImportar.Item(ImpProvis.Index, Posicion).Value > 0 And (Me.TablaImportar.Item(ImpProvis.Index, Posicion).Value <> (Me.TablaImportar.Item(TReal.Index, Posicion).Value - (Me.TablaImportar.Item(RIVA.Index, Posicion).Value + Me.TablaImportar.Item(RISR.Index, Posicion).Value))) Then
            Dim Fila As DataGridViewRow = Me.TablaImportar.Rows(Posicion)
            Try
                If Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value <> Nothing Then
                    If Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value Like "*PC*" Then
                        Dim posi As Integer = InStr(1, Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value, "PC", CompareMethod.Binary)
                        Dim Letra As String = Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, posi - 1)
                        Fila.Cells(ContabilizacionC.Index).Value = Me.ContabilizacionC.Items(Obtener_index(Trim(Letra)))
                    End If
                End If
            Catch ex As Exception

            End Try

            Try
                If Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value <> Nothing Then
                    If Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value Like "*GN*" Then
                        Me.TablaImportar.Item(ImpProvis.Index, Posicion).Value = 0
                    End If
                End If
            Catch ex As Exception

            End Try
        End If





    End Sub


    Private Sub Cargar_Pol_Modelo(ByVal tabla As String, ByVal rfc As String)
        Dim sql As String = ""
        If tabla = "Facturas" Then

        ElseIf tabla = "Complementos" Then

        ElseIf tabla = "Devoluciones" Then

        End If

    End Sub


    Private Sub TablaImportar_KeyDown(sender As Object, e As KeyEventArgs) Handles TablaImportar.KeyDown
        If e.KeyCode = Keys.E AndAlso e.Modifiers = Keys.Shift Then
            Me.TablaImportar.Item(ImpEf.Index, Me.TablaImportar.CurrentRow.Index).Value = Me.TablaImportar.Item(Dif.Index, Me.TablaImportar.CurrentRow.Index).Value
            If Me.TablaImportar.Item(ImpEf.Index, Me.TablaImportar.CurrentRow.Index).Value > 0 Then
                If Candado_Importe_Efectivo(Me.TablaImportar.CurrentRow.Index) = True Then ' se verifica candado
                    ' IMPORTE DE EFECTIVO Antiguo Codigo

                    Me.TablaImportar.Item(CuentasEfectivo.Index, Me.TablaImportar.CurrentRow.Index).Value = Cuenta_Efectivo()
                    Me.TablaImportar.Columns(CuentasEfectivo.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
                Else
                    RadMessageBox.SetThemeName("MaterialBlueGrey")
                    If RadMessageBox.Show("El importe de efectivo Excede los $2,000 deseas usarlo?", Eventos.titulo_app, MessageBoxButtons.YesNo, RadMessageIcon.Question) = Windows.Forms.DialogResult.Yes Then

                        Me.TablaImportar.Item(CuentasEfectivo.Index, Me.TablaImportar.CurrentRow.Index).Value = Cuenta_Efectivo()
                        Me.TablaImportar.Columns(CuentasEfectivo.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
                    Else
                        Me.TablaImportar.Item(ImpEf.Index, Me.TablaImportar.CurrentRow.Index).Value = 0
                        Exit Sub
                    End If
                End If
            Else
                Me.TablaImportar.Item(CuentasEfectivo.Index, Me.TablaImportar.CurrentRow.Index).Value = ""
            End If
        ElseIf e.KeyCode = Keys.T AndAlso e.Modifiers = Keys.Shift Then
            Me.TablaImportar.Item(ImpT.Index, Me.TablaImportar.CurrentRow.Index).Value = Me.TablaImportar.Item(Dif.Index, Me.TablaImportar.CurrentRow.Index).Value
            ' Importe de Transferencia
            If Me.TablaImportar.Item(ImpT.Index, Me.TablaImportar.CurrentRow.Index).Value > 0 Then
                ' BUSCAR BANCOS EN AUTOMATICO DEL DESTINO
                If Trim(Me.TablaImportar.Item(Bancodestino.Index, Me.TablaImportar.CurrentRow.Index).Value) <> Nothing Then
                    If Trim(Me.TablaImportar.Item(CtaBD.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" Or Trim(Me.TablaImportar.Item(CtaBD.Index, Me.TablaImportar.CurrentRow.Index).Value) <> Nothing Then
                    Else
                        Dim posi As Integer = InStr(1, Me.TablaImportar.Item(Bancodestino.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
                        Dim cuantos As Integer = Len(Me.TablaImportar.Item(Bancodestino.Index, Me.TablaImportar.CurrentRow.Index).Value) - Len(Me.TablaImportar.Item(Bancodestino.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, posi))
                        Dim Al As String = Me.TablaImportar.Item(Bancodestino.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(posi, cuantos)
                        Me.TablaImportar.Item(CtaBD.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes", "No_Cuenta", " Id_Empresa =" & Me.lstCliente.SelectItem & " and Alias = '" & Trim(Al) & "'", True)

                        Me.TablaImportar.Item(CuentaBancos.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes INNER JOIN Catalogo_de_Cuentas ON Catalogo_de_Cuentas.Id_cat_Cuentas = Bancos_Clientes.Id_cat_Cuentas", "Catalogo_de_Cuentas.Cuenta", " Bancos_Clientes.Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos_Clientes.Alias = '" & Trim(Al) & "'", True)

                    End If

                End If

                If Trim(Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value) <> Nothing Then
                    Try
                        If Trim(Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" And Trim(Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "0" Then
                            Dim largo As Integer = Len(Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value)
                            Dim cadena As String = Trim(Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value.ToString.Substring(largo - 3, 3))
                            largo = Len(Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value)
                            Dim Al As String = Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(largo - 3, 3)
                            If cadena <> Al Then
                                largo = InStr(1, Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
                                Al = Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, largo - 1)
                                Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos.Clave = '" & Trim(Al) & "' and  RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "'", True)
                            End If
                        Else
                            Dim posi As Integer = InStr(1, Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
                            Dim Al As String = Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, posi - 1)
                            Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos.Clave = '" & Trim(Al) & "' and  RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "'", True)
                        End If
                    Catch ex As Exception

                    End Try
                Else
                    Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value = Banco_destino(Me.lstCliente.SelectItem, Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value)
                    Try
                        If Trim(Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" And Trim(Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "0" Then
                            Dim largo As Integer = Len(Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value)
                            Dim cadena As String = Trim(Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value.ToString.Substring(largo - 3, 3))
                            largo = Len(Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value)
                            Dim Al As String = Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(largo - 3, 3)
                            If cadena <> Al Then
                                largo = InStr(1, Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
                                Al = Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, largo - 1)
                                Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos.Clave = '" & Trim(Al) & "' and  RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "'", True)
                            End If
                        Else
                            Dim posi As Integer = InStr(1, Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
                            Dim Al As String = Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, posi - 1)
                            Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos.Clave = '" & Trim(Al) & "' and  RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "'", True)
                        End If
                    Catch ex As Exception

                    End Try
                End If

                'If Trim(Me.TablaImportar.Item(TipoPoliza.Index, Me.TablaImportar.CurrentRow.Index).Value) <> Nothing Then
                '    If Trim(Me.TablaImportar.Item(Bancodestino.Index, Me.TablaImportar.CurrentRow.Index).Value) <> Nothing Then
                '    Else
                '        Dim fila As DataGridViewRow = Me.TablaImportar.Rows(Me.TablaImportar.CurrentRow.Index)
                '        Try
                '            If Trim(Me.TablaImportar.Item(TipoPoliza.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" Then
                '                fila.Cells(Bancodestino.Index).Value = Me.Bancodestino.Items(Obtener_indexB(Trim(Me.TablaImportar.Item(TipoPoliza.Index, Me.TablaImportar.CurrentRow.Index).Value)))
                '            End If
                '        Catch ex As Exception

                '        End Try
                '    End If
                'End If

                If Trim(UCase(Me.lblce.Text)) = "FALSE" Then
                    Me.TablaImportar.Columns(Fechat.Index).Visible = True
                    Me.TablaImportar.Columns(BancoOrigen.Index).Visible = False
                    Me.TablaImportar.Columns(CuentaO.Index).Visible = False
                    Me.TablaImportar.Columns(Bancodestino.Index).Visible = False
                    Me.TablaImportar.Columns(CtaBD.Index).Visible = False
                End If

            End If
        ElseIf e.KeyCode = Keys.C AndAlso e.Modifiers = Keys.Shift Then
            Me.TablaImportar.Item(ImpC.Index, Me.TablaImportar.CurrentRow.Index).Value = Me.TablaImportar.Item(Dif.Index, Me.TablaImportar.CurrentRow.Index).Value
            If Me.TablaImportar.Item(ImpC.Index, Me.TablaImportar.CurrentRow.Index).Value > 0 Then
                'Cheques

                Dim posi As Integer = 0
                Dim Al As String = ""
                If Trim(Me.TablaImportar.Item(BancoDE.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" Then
                    If Trim(Me.TablaImportar.Item(CtaDestinoChe.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" Then
                    Else
                        posi = InStr(1, Me.TablaImportar.Item(BancoDE.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
                        Dim cuantos As Integer = Len(Me.TablaImportar.Item(BancoDE.Index, Me.TablaImportar.CurrentRow.Index).Value) - Len(Me.TablaImportar.Item(BancoDE.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, posi))
                        Al = Me.TablaImportar.Item(BancoDE.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(posi, cuantos)
                        Me.TablaImportar.Item(CtaDestinoChe.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes", "No_Cuenta", " Id_Empresa =" & Me.lstCliente.SelectItem & " and Alias = '" & Trim(Al) & "'", True)
                        Me.TablaImportar.Item(CtaCheque.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes INNER JOIN Catalogo_de_Cuentas ON Catalogo_de_Cuentas.Id_cat_Cuentas = Bancos_Clientes.Id_cat_Cuentas", "Catalogo_de_Cuentas.Cuenta", " Bancos_Clientes.Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos_Clientes.Alias = '" & Trim(Al) & "'", True)
                    End If
                Else

                End If
                'Cargar bancos Origen para ingresos de Cheques
                If Trim(Me.TablaImportar.Item(BancosCheques.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" Then
                    If Trim(Me.TablaImportar.Item(CuentaC.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" Then
                    Else
                        posi = InStr(1, Me.TablaImportar.Item(BancosCheques.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
                        Al = Trim(Me.TablaImportar.Item(BancosCheques.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, posi - 1))
                        Me.TablaImportar.Item(CuentaC.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos.Clave = " & Trim(Al) & " and  RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "'", True)
                    End If
                Else
                    Me.TablaImportar.Item(BancosCheques.Index, Me.TablaImportar.CurrentRow.Index).Value = Banco_OrigenChe(Me.lstCliente.SelectItem, Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value)
                    Me.TablaImportar.Item(CuentaC.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & "  and  RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "'", True)
                End If
                'Se Muestran Columnas de Contabilidad Electronica
                If Trim(UCase(Me.lblce.Text)) = "FALSE" Then
                    Me.TablaImportar.Columns(BancosCheques.Index).Visible = False
                    Me.TablaImportar.Columns(CuentaC.Index).Visible = False
                    Me.TablaImportar.Columns(NoCheque.Index).Visible = False
                    Me.TablaImportar.Columns(FechaC.Index).Visible = True

                End If

            End If


        ElseIf e.KeyCode = Keys.A AndAlso e.Modifiers = Keys.Shift Then 'Ajustes
            Me.TablaImportar.Item(Anti.Index, Me.TablaImportar.CurrentRow.Index).Value = Me.TablaImportar.Item(Dif.Index, Me.TablaImportar.CurrentRow.Index).Value
            If Me.TablaImportar.Item(Anti.Index, Me.TablaImportar.CurrentRow.Index).Value > 0 Then

                Me.TablaImportar.Item(CtaAnti.Index, Me.TablaImportar.CurrentRow.Index).Value = Cuenta_Anticipo()
                Me.TablaImportar.Columns(CtaAnti.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
            Else
                Me.TablaImportar.Item(CtaAnti.Index, Me.TablaImportar.CurrentRow.Index).Value = ""
            End If

        ElseIf e.KeyCode = Keys.J AndAlso e.Modifiers = Keys.Shift Then
            Me.TablaImportar.Item(Ajus.Index, Me.TablaImportar.CurrentRow.Index).Value = Me.TablaImportar.Item(Dif.Index, Me.TablaImportar.CurrentRow.Index).Value
            If Me.TablaImportar.Item(Ajus.Index, Me.TablaImportar.CurrentRow.Index).Value <> 0 Then
                If Candado_Importe_Efectivo(Me.TablaImportar.CurrentRow.Index) = True Then ' se verifica candado
                    ' IMPORTE DE EFECTIVO Antiguo Codigo

                    Me.TablaImportar.Item(CtaAjustes.Index, Me.TablaImportar.CurrentRow.Index).Value = Cuenta_Efectivo()
                    Me.TablaImportar.Columns(CtaAjustes.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
                Else
                    RadMessageBox.SetThemeName("MaterialBlueGrey")
                    If RadMessageBox.Show("El importe de efectivo Excede los $2,000 deseas usarlo?", Eventos.titulo_app, MessageBoxButtons.YesNo, RadMessageIcon.Question) = Windows.Forms.DialogResult.Yes Then

                        Me.TablaImportar.Item(CtaAjustes.Index, Me.TablaImportar.CurrentRow.Index).Value = Cuenta_Efectivo()
                        Me.TablaImportar.Columns(CtaAjustes.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
                    Else
                        Me.TablaImportar.Item(Ajus.Index, Me.TablaImportar.CurrentRow.Index).Value = 0
                        Exit Sub
                    End If
                End If
            Else
                Me.TablaImportar.Item(CtaAjustes.Index, Me.TablaImportar.CurrentRow.Index).Value = ""
            End If

        ElseIf e.KeyCode = Keys.P AndAlso e.Modifiers = Keys.Shift Then
            Me.TablaImportar.Item(ImpProvis.Index, Me.TablaImportar.CurrentRow.Index).Value = Me.TablaImportar.Item(Dif.Index, Me.TablaImportar.CurrentRow.Index).Value
        End If

        If e.KeyCode = Keys.A AndAlso e.Modifiers = Keys.Control Then
            'Programar calculo automatico de numeros de poliza
            Dim Inicial As Integer = InputBox("Teclea el numero de poliza Inicial:", Eventos.titulo_app, 1)
            For Each Fila As DataGridViewRow In TablaImportar.Rows
                If Fila.Cells(NumPol.Index).Selected = True Then
                    Fila.Cells(NumPol.Index).Value = Inicial
                    Inicial += 1
                    Liberar_Proceso(Fila.Index)
                End If
            Next
        End If
        Liberar_Proceso(Me.TablaImportar.CurrentRow.Index)
    End Sub

    Private Sub AgregarBancosRFCsToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles AgregarBancosRFCsToolStripMenuItem.Click

        If Me.TCEmitidas.SelectedIndex = 0 Then
            If Me.TablaImportar.CurrentCell.ColumnIndex = Me.Bancodestino.Index Then 'Cuentas del Cargo

                Dim ds As DataSet = Eventos.Obtener_DS("SELECT DISTINCT CONVERT(NVARCHAR, Bancos.Clave, 103) + '-' + Bancos.Nombre AS Banco ,clabe  FROM     Bancos INNER JOIN     Bancos_RFC ON Bancos.Id_Banco = Bancos_RFC.Id_Banco  WHERE  (Bancos_RFC.Id_Empresa  = " & Me.lstCliente.SelectItem & ") and RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "' order by Banco")
                Dim actividad(,) As String
                ReDim actividad(2, ds.Tables(0).Rows.Count + 1)

                For i As Integer = 0 To ds.Tables(0).Rows.Count - 1

                    Dim largo As Integer = Len(ds.Tables(0).Rows(i)("Clabe"))
                    Dim cadena As String = Trim(ds.Tables(0).Rows(i)("Banco")) & " " & Trim(ds.Tables(0).Rows(i)("Clabe").ToString.Substring(largo - 3, 3))

                    actividad(0, i) = cadena
                    Debug.Print(Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value)
                    actividad(1, i) = "0"
                Next
                With My.Forms.DialogUnaSeleccion
                    .limpiar()
                    .Titulo = Eventos.titulo_app
                    .Texto = "Selecciona el Banco"
                    .MinSeleccion = 1
                    .MaxSeleccion = 1
                    .elementos = actividad
                    .ShowDialog()
                    actividad = .elementos
                    If .DialogResult = Windows.Forms.DialogResult.Cancel Then
                        Exit Sub
                    End If
                End With

                Dim descrip As String = ""
                For i As Integer = 0 To actividad.GetLength(1)
                    If actividad(1, i) = "1" Then
                        descrip = actividad(0, i)
                        Exit For
                    End If
                Next
                Me.TablaImportar.Item(Bancodestino.Index, Me.TablaImportar.CurrentRow.Index).Value = descrip
                Me.TablaImportar_CellEndEdit(Me.TablaImportar, Nothing)
            ElseIf Me.TablaImportar.CurrentCell.ColumnIndex = Me.BankDT2.Index Then

                Dim ds As DataSet = Eventos.Obtener_DS("SELECT DISTINCT CONVERT(NVARCHAR, Bancos.Clave, 103) + '-' + Bancos.Nombre AS Banco ,clabe  FROM     Bancos INNER JOIN     Bancos_RFC ON Bancos.Id_Banco = Bancos_RFC.Id_Banco  WHERE  (Bancos_RFC.Id_Empresa  = " & Me.lstCliente.SelectItem & ") and RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "' order by Banco")
                Dim actividad(,) As String
                ReDim actividad(2, ds.Tables(0).Rows.Count + 1)

                For i As Integer = 0 To ds.Tables(0).Rows.Count - 1

                    Dim largo As Integer = Len(ds.Tables(0).Rows(i)("Clabe"))
                    Dim cadena As String = Trim(ds.Tables(0).Rows(i)("Banco")) & " " & Trim(ds.Tables(0).Rows(i)("Clabe").ToString.Substring(largo - 3, 3))

                    actividad(0, i) = cadena
                    Debug.Print(Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value)
                    actividad(1, i) = "0"
                Next
                With My.Forms.DialogUnaSeleccion
                    .limpiar()
                    .Titulo = Eventos.titulo_app
                    .Texto = "Selecciona el Banco"
                    .MinSeleccion = 1
                    .MaxSeleccion = 1
                    .elementos = actividad
                    .ShowDialog()
                    actividad = .elementos
                    If .DialogResult = Windows.Forms.DialogResult.Cancel Then
                        Exit Sub
                    End If
                End With

                Dim descrip As String = ""
                For i As Integer = 0 To actividad.GetLength(1)
                    If actividad(1, i) = "1" Then
                        descrip = actividad(0, i)
                        Exit For
                    End If
                Next
                Me.TablaImportar.Item(BankDT2.Index, Me.TablaImportar.CurrentRow.Index).Value = descrip
                Me.TablaImportar_CellEndEdit(Me.TablaImportar, Nothing)
            ElseIf Me.TablaImportar.CurrentCell.ColumnIndex = Me.BancosCheques.Index Then
                Dim ds As DataSet = Eventos.Obtener_DS("SELECT DISTINCT CONVERT(NVARCHAR, Bancos.Clave, 103) + '-' + Bancos.Nombre AS Banco ,clabe  FROM     Bancos INNER JOIN     Bancos_RFC ON Bancos.Id_Banco = Bancos_RFC.Id_Banco  WHERE  (Bancos_RFC.Id_Empresa  = " & Me.lstCliente.SelectItem & ") and RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "' order by Banco")
                Dim actividad(,) As String
                ReDim actividad(2, ds.Tables(0).Rows.Count + 1)

                For i As Integer = 0 To ds.Tables(0).Rows.Count - 1

                    Dim largo As Integer = Len(ds.Tables(0).Rows(i)("Clabe"))
                    Dim cadena As String = Trim(ds.Tables(0).Rows(i)("Banco")) & " " & Trim(ds.Tables(0).Rows(i)("Clabe").ToString.Substring(largo - 3, 3))

                    actividad(0, i) = cadena
                    Debug.Print(Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value)
                    actividad(1, i) = "0"
                Next
                With My.Forms.DialogUnaSeleccion
                    .limpiar()
                    .Titulo = Eventos.titulo_app
                    .Texto = "Selecciona el Banco"
                    .MinSeleccion = 1
                    .MaxSeleccion = 1
                    .elementos = actividad
                    .ShowDialog()
                    actividad = .elementos
                    If .DialogResult = Windows.Forms.DialogResult.Cancel Then
                        Exit Sub
                    End If
                End With

                Dim descrip As String = ""
                For i As Integer = 0 To actividad.GetLength(1)
                    If actividad(1, i) = "1" Then
                        descrip = actividad(0, i)
                        Exit For
                    End If
                Next
                Me.TablaImportar.Item(BancosCheques.Index, Me.TablaImportar.CurrentRow.Index).Value = descrip
                Me.TablaImportar_CellEndEdit(Me.TablaImportar, Nothing)

            End If
        ElseIf Me.TCEmitidas.SelectedIndex = 1 Then
        ElseIf Me.TCEmitidas.SelectedIndex = 2 Then
            If Me.TablaC.CurrentCell.ColumnIndex = Me.NomCtaComplemento.Index Then 'Cuentas del Cargo

                Dim ds As DataSet = Eventos.Obtener_DS("SELECT DISTINCT CONVERT(NVARCHAR, Bancos.Clave, 103) + '-' + Bancos.Nombre AS Banco ,clabe  FROM     Bancos INNER JOIN     Bancos_RFC ON Bancos.Id_Banco = Bancos_RFC.Id_Banco  WHERE  (Bancos_RFC.Id_Empresa  = " & Me.lstCliente.SelectItem & ") and RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "' order by Banco")
                Dim actividad(,) As String
                ReDim actividad(2, ds.Tables(0).Rows.Count + 1)

                For i As Integer = 0 To ds.Tables(0).Rows.Count - 1

                    Dim largo As Integer = Len(ds.Tables(0).Rows(i)("Clabe"))
                    Dim cadena As String = Trim(ds.Tables(0).Rows(i)("Banco")) & " " & Trim(ds.Tables(0).Rows(i)("Clabe").ToString.Substring(largo - 3, 3))

                    actividad(0, i) = cadena
                    Debug.Print(Me.TablaC.Item(RFCE.Index, Me.TablaC.CurrentRow.Index).Value)
                    actividad(1, i) = "0"
                Next
                With My.Forms.DialogUnaSeleccion
                    .limpiar()
                    .Titulo = Eventos.titulo_app
                    .Texto = "Selecciona el Banco"
                    .MinSeleccion = 1
                    .MaxSeleccion = 1
                    .elementos = actividad
                    .ShowDialog()
                    actividad = .elementos
                    If .DialogResult = Windows.Forms.DialogResult.Cancel Then
                        Exit Sub
                    End If
                End With

                Dim descrip As String = ""
                For i As Integer = 0 To actividad.GetLength(1)
                    If actividad(1, i) = "1" Then
                        descrip = actividad(0, i)
                        Exit For
                    End If
                Next
                Me.TablaC.Item(BancoDtComplemento.Index, Me.TablaC.CurrentRow.Index).Value = descrip
                Me.TablaC_CellEndEdit(Me.TablaC, Nothing)

            End If
        End If



    End Sub

    Private Sub CmdEfectivo_Click(sender As Object, e As EventArgs) Handles CmdEfectivo.Click
        For i As Integer = 0 To Me.TablaImportar.Rows.Count - 1
            If Me.TablaImportar.Item(ImpEf.Index, i).Value > 0 Then
                Me.TablaImportar.Item(CuentasEfectivo.Index, i).Value = Cuenta_Efectivo()
                Me.TablaImportar.Columns(CuentasEfectivo.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
                Liberar_Proceso(i)
            Else
                If Me.TablaImportar.Item(Tot.Index, i).Value <= 2000 And Me.TablaImportar.Item(ImpEf.Index, i).Value = 0 And Me.TablaImportar.Item(Dif.Index, i).Value = Me.TablaImportar.Item(Tot.Index, i).Value Then
                    If UCase(Trim(Me.TablaImportar.Item(Fpago.Index, i).Value)) Like "*TRANSF*" Then
                    Else
                        Me.TablaImportar.Item(ImpEf.Index, i).Value = Me.TablaImportar.Item(Tot.Index, i).Value
                        Me.TablaImportar.Item(CuentasEfectivo.Index, i).Value = Cuenta_Efectivo()
                        Me.TablaImportar.Columns(CuentasEfectivo.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
                        Liberar_Proceso(i)
                        Try
                            Dim Fila As DataGridViewRow = Me.TablaImportar.Rows(i)
                            If Trim(Me.TablaImportar.Item(TipoPoliza.Index, i).Value) <> Nothing Then
                            Else

                                Fila.Cells(TipoPoliza.Index).Value = Me.TipoPoliza.Items(Obtener_index2(Trim("004 - Efectivo")))

                            End If
                        Catch ex As Exception

                        End Try
                    End If
                End If
            End If
        Next
    End Sub
    Private Sub Cargar_Pol_Modelo(ByVal RFC As String, ByVal Fecha As String, ByVal i As Integer)
        If Me.TablaImportar.Item(Aplic.Index, i).Value = False Then
            If Me.TablaImportar.Item(Dif.Index, i).Value <> 0 Then

                Dim Sql As String = " SELECT 	Id_Pol_Mod_Factura,	RFC,	Nombre,	FechaAntesde,	FechaDespuesde,	Clave,	Efectivo,
	                        Transferencia,	Banco_Origen,	Banco_Destino,	Cheque,	Nom_Banco_Ch,	Tipo_Poliza,	Provision,	Anticipo,	Id_Empresa,	Emitidas
                            FROM dbo.Facturas_Poliza_Modelo where Rfc= '" & RFC & "'  and  " & Fecha.ToString.Substring(0, 2) & " BETWEEN   FechaAntesde and FechaDespuesde "

                '  From  dbo.Facturas_Poliza_Modelo where Rfc= '" & RFC & "'  and FechaAntesde <= " & Fecha.ToString.Substring(0, 2) & " and FechaDespuesde >= " & Fecha.ToString.Substring(0, 2) & "  "
                Dim ds As DataSet = Eventos.Obtener_DS(Sql)
                If ds.Tables(0).Rows.Count > 0 Then
                    Dim Fila As DataGridViewRow = Me.TablaImportar.Rows(i)

                    Try
                        If Trim(Me.TablaImportar.Item(ContabilizacionC.Index, i).Value) <> Nothing Then
                        Else
                            If Trim(ds.Tables(0).Rows(0)("Clave")) <> "" Then
                                Fila.Cells(ContabilizacionC.Index).Value = Me.ContabilizacionC.Items(Obtener_index(Trim(ds.Tables(0).Rows(0)("Clave"))))
                                'Calcula cuenta cargos
                                If Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value <> Nothing Then

                                    If Me.TablaImportar.Item(NCuenta.Index, Me.TablaImportar.CurrentRow.Index).Value = Nothing Then
                                        If Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value = "C" Or Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value = "CPP" Then
                                            Me.TablaImportar.Item(ProvA.Index, Me.TablaImportar.CurrentRow.Index).Value = 0
                                        ElseIf Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value = "GG" Or Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value = "GGPP" Then
                                            Me.TablaImportar.Item(ProvP.Index, Me.TablaImportar.CurrentRow.Index).Value = 0
                                        End If
                                        Me.TablaImportar.Item(NCuenta.Index, Me.TablaImportar.CurrentRow.Index).Value = Cuenta_cargos(Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value, Trim(Me.TablaImportar.Item(ContabilizacionC.Index, Me.TablaImportar.CurrentRow.Index).Value))
                                        Me.TablaImportar.Item(LetraS.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.Calcula_letraSat(Me.TablaImportar.Item(MPago.Index, Me.TablaImportar.CurrentRow.Index).Value, Me.TablaImportar.Item(UCFDI.Index, Me.TablaImportar.CurrentRow.Index).Value)
                                    End If
                                Else
                                    Me.TablaImportar.Item(NCuenta.Index, Me.TablaImportar.CurrentRow.Index).Value = ""
                                End If
                            End If
                        End If
                    Catch ex As Exception

                    End Try

                    Try
                        If Trim(Me.TablaImportar.Item(TipoPoliza.Index, i).Value) <> Nothing Then
                        Else
                            If Trim(ds.Tables(0).Rows(0)("Tipo_Poliza")) <> "" Then
                                Fila.Cells(TipoPoliza.Index).Value = Me.TipoPoliza.Items(Obtener_index2(Trim(ds.Tables(0).Rows(0)("Tipo_Poliza"))))
                            End If
                        End If
                    Catch ex As Exception

                    End Try

                    Try
                        If Trim(ds.Tables(0).Rows(0)("Transferencia")) = True Then

                            Me.TablaImportar.Item(ImpT.Index, i).Value = Me.TablaImportar.Item(Dif.Index, i).Value
                            If Trim(Me.TablaImportar.Item(BancoOrigen.Index, i).Value) <> Nothing Then
                            Else

                                If Trim(ds.Tables(0).Rows(0)("Banco_Destino")) <> "" Then
                                    Fila.Cells(Bancodestino.Index).Value = Me.Bancodestino.Items(Obtener_indexB(Trim(ds.Tables(0).Rows(0)("Banco_Destino"))))
                                    If Trim(Me.TablaImportar.Item(CtaBD.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" Then
                                    Else
                                        Dim posi As Integer = InStr(1, Me.TablaImportar.Item(Bancodestino.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
                                        Dim cuantos As Integer = Len(Me.TablaImportar.Item(Bancodestino.Index, Me.TablaImportar.CurrentRow.Index).Value) - Len(Me.TablaImportar.Item(Bancodestino.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, posi))
                                        Dim Al As String = Me.TablaImportar.Item(Bancodestino.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(posi, cuantos)
                                        Me.TablaImportar.Item(CtaBD.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes", "No_Cuenta", " Id_Empresa =" & Me.lstCliente.SelectItem & " and Alias = '" & Trim(Al) & "'", True)
                                        Me.TablaImportar.Item(CuentaBancos.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes INNER JOIN Catalogo_de_Cuentas ON Catalogo_de_Cuentas.Id_cat_Cuentas = Bancos_Clientes.Id_cat_Cuentas", "Catalogo_de_Cuentas.Cuenta", " Bancos_Clientes.Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos_Clientes.Alias = '" & Trim(Al) & "'", True)
                                    End If
                                End If
                                Me.TablaImportar.Item(BancoOrigen.Index, i).Value = IIf(IsDBNull(ds.Tables(0).Rows(0)("Banco_Origen")) = True, "", ds.Tables(0).Rows(0)("Banco_Origen"))
                                Try
                                    If Trim(Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "" And Trim(Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value) <> "0" Then
                                        Dim largo As Integer = Len(Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value)
                                        Dim cadena As String = Trim(Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value.ToString.Substring(largo - 3, 3))
                                        largo = Len(Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value)
                                        Dim Al As String = Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(largo - 3, 3)
                                        If cadena <> Al Then
                                            largo = InStr(1, Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
                                            Al = Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, largo - 1)
                                            Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos.Clave = '" & Trim(Al) & "' and  RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "'", True)
                                        End If
                                    Else
                                        Dim posi As Integer = InStr(1, Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value, "-", CompareMethod.Binary)
                                        Dim Al As String = Me.TablaImportar.Item(BancoOrigen.Index, Me.TablaImportar.CurrentRow.Index).Value.Substring(0, posi - 1)
                                        Me.TablaImportar.Item(CuentaO.Index, Me.TablaImportar.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos.Clave = '" & Trim(Al) & "' and  RFC = '" & Me.TablaImportar.Item(RFCE.Index, Me.TablaImportar.CurrentRow.Index).Value & "'", True)
                                    End If
                                Catch ex As Exception

                                End Try

                            End If
                        End If
                    Catch ex As Exception

                    End Try

                    Try
                        If Trim(ds.Tables(0).Rows(0)("Cheque")) = True Then
                            Me.TablaImportar.Item(ImpC.Index, i).Value = Me.TablaImportar.Item(Dif.Index, i).Value

                            'If Trim(Me.TablaImportar.Item(BancosCheques.Index, i).Value) <> Nothing Then
                            'Else
                            '    If Trim(ds.Tables(0).Rows(0)("Nom_Banco_Ch")) <> "" Then
                            '        Fila.Cells(BancosCheques.Index).Value = Me.BancosCheques.Items(Obtener_indexbN(Trim(ds.Tables(0).Rows(0)("Nom_Banco_Ch"))))
                            '    End If
                            'End If




                        End If
                    Catch ex As Exception

                    End Try
                    Try
                        If Trim(ds.Tables(0).Rows(0)("Efectivo")) = True Then
                            Me.TablaImportar.Item(ImpEf.Index, i).Value = Me.TablaImportar.Item(Dif.Index, i).Value

                        End If
                    Catch ex As Exception

                    End Try
                    Try
                        If Trim(ds.Tables(0).Rows(0)("Anticipo")) = True Then
                            Me.TablaImportar.Item(Anti.Index, i).Value = Me.TablaImportar.Item(Dif.Index, i).Value

                        End If
                    Catch ex As Exception

                    End Try
                    Try
                        If Trim(ds.Tables(0).Rows(0)("Provision")) = True Then
                            Me.TablaImportar.Item(ImpProvis.Index, i).Value = Me.TablaImportar.Item(Dif.Index, i).Value
                        End If
                    Catch ex As Exception

                    End Try
                    Me.TablaImportar_CellEndEdit(Me.TablaImportar, Nothing)
                End If
            End If

        End If
    End Sub

    Private Sub Cargar_Pol_Modelo_Notas(ByVal RFC As String, ByVal Fecha As String, ByVal i As Integer)
        If Me.TablaD.Item(AplD.Index, i).Value = False Then
            If Me.TablaD.Item(DifD.Index, i).Value <> 0 Then

                Dim Sql As String = " SELECT 	Id_Pol_Mod_Nota,	RFC,	Nombre,	FechaAntesde,	FechaDespuesde,	Clave,	Efectivo,	
                                Transferencia,	Cheque,	Tipo_Poliza,	ProvisionAcred,	ProvisionProveed,	Id_Empresa FROM dbo.Notas_Pol_Modelo 
                                where Emitidas = 1 and Rfc= '" & RFC & "'  and  " & Fecha.ToString.Substring(0, 2) & " BETWEEN   FechaAntesde and FechaDespuesde "

                '  From  dbo.Facturas_Poliza_Modelo where Rfc= '" & RFC & "'  and FechaAntesde <= " & Fecha.ToString.Substring(0, 2) & " and FechaDespuesde >= " & Fecha.ToString.Substring(0, 2) & "  "
                Dim ds As DataSet = Eventos.Obtener_DS(Sql)
                If ds.Tables(0).Rows.Count > 0 Then
                    Dim Fila As DataGridViewRow = Me.TablaD.Rows(i)

                    Try
                        If Trim(Me.TablaD.Item(LetraCd.Index, i).Value) <> Nothing Then
                        Else
                            If Trim(ds.Tables(0).Rows(0)("Clave")) <> "" Then
                                Fila.Cells(LetraCd.Index).Value = Me.LetraCd.Items(Obtener_indexDV(Trim(ds.Tables(0).Rows(0)("Clave"))))
                                'Calcula cuenta cargos
                                If Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value <> Nothing Then

                                    If Me.TablaD.Item(NomCuentaD.Index, Me.TablaD.CurrentRow.Index).Value = Nothing Then
                                        If Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value = "C" Or Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value = "CPP" Then
                                            Me.TablaD.Item(ProvAD.Index, Me.TablaD.CurrentRow.Index).Value = 0
                                        ElseIf Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value = "GG" Or Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value = "GGPP" Then
                                            Me.TablaD.Item(ProvPD.Index, Me.TablaD.CurrentRow.Index).Value = 0
                                        End If
                                        Me.TablaD.Item(NomCuentaD.Index, Me.TablaD.CurrentRow.Index).Value = Cuenta_cargos(Me.TablaD.Item(RFCED.Index, Me.TablaD.CurrentRow.Index).Value, Trim(Me.TablaD.Item(LetraCd.Index, Me.TablaD.CurrentRow.Index).Value))
                                        Me.TablaD.Item(LetraSD.Index, Me.TablaD.CurrentRow.Index).Value = Eventos.Calcula_letraSat(Me.TablaD.Item(MetoD.Index, Me.TablaD.CurrentRow.Index).Value, Me.TablaD.Item(UcfdiD.Index, Me.TablaD.CurrentRow.Index).Value)
                                    End If
                                Else
                                    Me.TablaD.Item(NomCuentaD.Index, Me.TablaD.CurrentRow.Index).Value = ""
                                End If
                            End If
                        End If
                    Catch ex As Exception

                    End Try

                    Try
                        If Trim(Me.TablaD.Item(TipPolD.Index, i).Value) <> Nothing Then
                        Else
                            If Trim(ds.Tables(0).Rows(0)("Tipo_Poliza")) <> "" Then
                                Fila.Cells(TipPolD.Index).Value = Me.TipPolD.Items(Obtener_index2Dv(Trim(ds.Tables(0).Rows(0)("Tipo_Poliza"))))
                            End If
                        End If
                    Catch ex As Exception

                    End Try

                    Try
                        If Trim(ds.Tables(0).Rows(0)("Transferencia")) = True Then

                            Me.TablaD.Item(ImpTD.Index, i).Value = Me.TablaD.Item(DifD.Index, i).Value
                            If Trim(Me.TablaD.Item(BancoOd.Index, i).Value) <> Nothing Then
                            Else


                                If Trim(ds.Tables(0).Rows(0)("Banco_Origen")) <> "" Then
                                    Fila.Cells(BancoOd.Index).Value = Me.BancoOd.Items(Obtener_indexBDv(Trim(ds.Tables(0).Rows(0)("Banco_Origen"))))
                                    If Trim(Me.TablaD.Item(CtaOD.Index, Me.TablaD.CurrentRow.Index).Value) <> "" Then
                                    Else
                                        Dim posi As Integer = InStr(1, Me.TablaD.Item(BancoOd.Index, Me.TablaD.CurrentRow.Index).Value, "-", CompareMethod.Binary)
                                        Dim cuantos As Integer = Len(Me.TablaD.Item(BancoOd.Index, Me.TablaD.CurrentRow.Index).Value) - Len(Me.TablaD.Item(BancoOd.Index, Me.TablaD.CurrentRow.Index).Value.Substring(0, posi))
                                        Dim Al As String = Me.TablaD.Item(BancoOd.Index, Me.TablaD.CurrentRow.Index).Value.Substring(posi, cuantos)
                                        Me.TablaD.Item(CtaOD.Index, Me.TablaD.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes", "No_Cuenta", " Id_Empresa =" & Me.lstCliente.SelectItem & " and Alias = '" & Trim(Al) & "'", True)

                                        Me.TablaD.Item(CtaBancosD.Index, Me.TablaD.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes INNER JOIN Catalogo_de_Cuentas ON Catalogo_de_Cuentas.Id_cat_Cuentas = Bancos_Clientes.Id_cat_Cuentas", "Catalogo_de_Cuentas.Cuenta", " Bancos_Clientes.Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos_Clientes.Alias = '" & Trim(Al) & "'", True)

                                    End If

                                End If
                                Me.TablaD.Item(BancoDD.Index, i).Value = IIf(IsDBNull(ds.Tables(0).Rows(0)("Banco_Destino")) = True, "", ds.Tables(0).Rows(0)("Banco_Destino"))

                                Try
                                    If Trim(Me.TablaD.Item(CtaDD.Index, Me.TablaD.CurrentRow.Index).Value) <> "" And Trim(Me.TablaD.Item(CtaDD.Index, Me.TablaD.CurrentRow.Index).Value) <> "0" Then
                                        Dim largo As Integer = Len(Me.TablaD.Item(BancoDD.Index, Me.TablaD.CurrentRow.Index).Value)
                                        Dim cadena As String = Trim(Me.TablaD.Item(BancoDD.Index, Me.TablaD.CurrentRow.Index).Value.ToString.Substring(largo - 3, 3))
                                        largo = Len(Me.TablaD.Item(CtaDD.Index, Me.TablaD.CurrentRow.Index).Value)
                                        Dim Al As String = Me.TablaD.Item(CtaDD.Index, Me.TablaD.CurrentRow.Index).Value.Substring(largo - 3, 3)
                                        If cadena <> Al Then
                                            largo = InStr(1, Me.TablaD.Item(BancoDD.Index, Me.TablaD.CurrentRow.Index).Value, "-", CompareMethod.Binary)
                                            Al = Me.TablaD.Item(BancoDD.Index, Me.TablaD.CurrentRow.Index).Value.Substring(0, largo - 1)
                                            Me.TablaD.Item(CtaDD.Index, Me.TablaD.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC", "Clabe", " Id_Empresa =" & Me.lstCliente.SelectItem & " and id_banco = '" & Trim(Al) & "' and  RFC = '" & Me.TablaD.Item(RFCE.Index, Me.TablaD.CurrentRow.Index).Value & "'", True)
                                        End If
                                    Else
                                        Dim posi As Integer = InStr(1, Me.TablaD.Item(BancoDD.Index, Me.TablaD.CurrentRow.Index).Value, "-", CompareMethod.Binary)
                                        Dim Al As String = Me.TablaD.Item(BancoDD.Index, Me.TablaD.CurrentRow.Index).Value.Substring(0, posi - 1)
                                        Me.TablaD.Item(CtaDD.Index, Me.TablaD.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC", "Clabe", " Id_Empresa =" & Me.lstCliente.SelectItem & " and id_banco = '" & Trim(Al) & "' and  RFC = '" & Me.TablaD.Item(RFCE.Index, Me.TablaD.CurrentRow.Index).Value & "'", True)
                                    End If
                                Catch ex As Exception

                                End Try

                            End If
                        End If
                    Catch ex As Exception

                    End Try

                    Try
                        If Trim(ds.Tables(0).Rows(0)("Cheque")) = True Then
                            Me.TablaD.Item(ImpCHD.Index, i).Value = Me.TablaD.Item(DifD.Index, i).Value

                            If Trim(Me.TablaD.Item(NomBankCHD.Index, i).Value) <> Nothing Then
                            Else
                                If Trim(ds.Tables(0).Rows(0)("Nom_Banco_Ch")) <> "" Then
                                    Fila.Cells(NomBankCHD.Index).Value = Me.NomBankCHD.Items(Obtener_indexBDvBH(Trim(ds.Tables(0).Rows(0)("Nom_Banco_Ch"))))
                                End If
                            End If
                        End If
                    Catch ex As Exception

                    End Try
                    Try
                        If Trim(ds.Tables(0).Rows(0)("Efectivo")) = True Then
                            Me.TablaD.Item(ImpED.Index, i).Value = Me.TablaD.Item(DifD.Index, i).Value

                        End If
                    Catch ex As Exception

                    End Try
                    Try
                        If Trim(ds.Tables(0).Rows(0)("ProvisionAcred")) = True Then
                            Me.TablaD.Item(ProvAD.Index, i).Value = Me.TablaD.Item(DifD.Index, i).Value

                        End If
                    Catch ex As Exception

                    End Try
                    Try
                        If Trim(ds.Tables(0).Rows(0)("ProvisionProveed")) = True Then
                            Me.TablaD.Item(ProvPD.Index, i).Value = Me.TablaD.Item(DifD.Index, i).Value
                        End If
                    Catch ex As Exception

                    End Try
                    Me.TablaD_CellEndEdit(Me.TablaD, Nothing)
                End If
            End If

        End If
    End Sub


    Private Sub Buscador1_Buscar() Handles Buscador1.Buscar
        'Por defecto, indico buscar en la primera columna
        Dim indiceColumna As Integer = Me.TablaImportar.CurrentCell.ColumnIndex
        Dim Busqueda As String = Trim(UCase(Me.Buscador1.TxtFiltro.Text.ToLower))
        Dim cadena As String = ""
        Dim row As DataGridViewRow
        'Recorro filas del DataGridView
        For i As Integer = Me.TablaImportar.CurrentRow.Index To Me.TablaImportar.Rows.Count - 1
            row = Me.TablaImportar.Rows(i)
            cadena = Trim(UCase(row.Cells(indiceColumna).Value))
            'Si el contenido de la columna coinside con el valor del TextBox
            If cadena Like "*" & Busqueda & "*" Then
                'Selecciono fila y abandono bucle
                ' row.Selected = True
                If Me.TablaImportar.CurrentRow.Index = row.Index Then
                    Me.TablaImportar.Rows(row.Index).Cells(indiceColumna).Selected = True
                    Me.TablaImportar.CurrentCell = Me.TablaImportar.Rows(row.Index).Cells(indiceColumna)
                Else
                    Me.TablaImportar.Rows(row.Index).Cells(indiceColumna).Selected = True
                    Me.TablaImportar.CurrentCell = Me.TablaImportar.Rows(row.Index).Cells(indiceColumna)
                    Exit For
                End If

            End If
        Next

    End Sub

    Private Sub Buscador2_Buscar() Handles Buscador2.Buscar
        Dim indiceColumna As Integer = Me.TablaD.CurrentCell.ColumnIndex
        Dim Busqueda As String = Trim(UCase(Me.Buscador2.TxtFiltro.Text.ToLower))
        Dim cadena As String = ""
        Dim row As DataGridViewRow
        For i As Integer = Me.TablaD.CurrentRow.Index To Me.TablaD.Rows.Count - 1
            row = Me.TablaD.Rows(i)
            cadena = Trim(UCase(row.Cells(indiceColumna).Value))
            If cadena Like "*" & Busqueda & "*" Then
                If Me.TablaD.CurrentRow.Index = row.Index Then
                    Me.TablaD.Rows(row.Index).Cells(indiceColumna).Selected = True
                    Me.TablaD.CurrentCell = Me.TablaD.Rows(row.Index).Cells(indiceColumna)
                Else
                    Me.TablaD.Rows(row.Index).Cells(indiceColumna).Selected = True
                    Me.TablaD.CurrentCell = Me.TablaD.Rows(row.Index).Cells(indiceColumna)
                    Exit For
                End If
            End If
        Next
    End Sub

    Private Sub Buscador3_Buscar() Handles Buscador3.Buscar
        Dim indiceColumna As Integer = Me.TablaC.CurrentCell.ColumnIndex
        Dim Busqueda As String = Trim(UCase(Me.Buscador3.TxtFiltro.Text.ToLower))
        Dim cadena As String = ""
        Dim row As DataGridViewRow
        For i As Integer = Me.TablaC.CurrentRow.Index To Me.TablaC.Rows.Count - 1
            row = Me.TablaC.Rows(i)
            cadena = Trim(UCase(row.Cells(indiceColumna).Value))
            If cadena Like "*" & Busqueda & "*" Then
                If Me.TablaC.CurrentRow.Index = row.Index Then
                    Me.TablaC.Rows(row.Index).Cells(indiceColumna).Selected = True
                    Me.TablaC.CurrentCell = Me.TablaC.Rows(row.Index).Cells(indiceColumna)
                Else
                    Me.TablaC.Rows(row.Index).Cells(indiceColumna).Selected = True
                    Me.TablaC.CurrentCell = Me.TablaC.Rows(row.Index).Cells(indiceColumna)
                    Exit For
                End If
            End If
        Next
    End Sub

    Private Sub TablaD_KeyDown(sender As Object, e As KeyEventArgs) Handles TablaD.KeyDown
        If e.KeyCode = Keys.E AndAlso e.Modifiers = Keys.Shift Then
            Me.TablaD.Item(ImpED.Index, Me.TablaD.CurrentRow.Index).Value = Me.TablaD.Item(DifD.Index, Me.TablaD.CurrentRow.Index).Value
        ElseIf e.KeyCode = Keys.T AndAlso e.Modifiers = Keys.Shift Then
            Me.TablaD.Item(ImpTD.Index, Me.TablaD.CurrentRow.Index).Value = Me.TablaD.Item(DifD.Index, Me.TablaD.CurrentRow.Index).Value
        ElseIf e.KeyCode = Keys.C AndAlso e.Modifiers = Keys.Shift Then
            Me.TablaD.Item(ImpCHD.Index, Me.TablaD.CurrentRow.Index).Value = Me.TablaD.Item(DifD.Index, Me.TablaD.CurrentRow.Index).Value
        ElseIf e.KeyCode = Keys.A AndAlso e.Modifiers = Keys.Shift Then 'Ajustes
            Me.TablaD.Item(AntiD.Index, Me.TablaD.CurrentRow.Index).Value = Me.TablaD.Item(DifD.Index, Me.TablaD.CurrentRow.Index).Value
        ElseIf e.KeyCode = Keys.J AndAlso e.Modifiers = Keys.Shift Then
            Me.TablaD.Item(AjusD.Index, Me.TablaD.CurrentRow.Index).Value = Me.TablaD.Item(DifD.Index, Me.TablaD.CurrentRow.Index).Value
        End If
        If e.KeyCode = Keys.A AndAlso e.Modifiers = Keys.Control Then
            'Programar calculo automatico de numeros de poliza
            Dim Inicial As Integer = InputBox("Teclea el numero de poliza Inicial:", Eventos.titulo_app, 1)
            For Each Fila As DataGridViewRow In TablaD.Rows
                If Fila.Cells(NPolD.Index).Selected = True Then
                    Fila.Cells(NPolD.Index).Value = Inicial
                    Inicial += 1
                End If
            Next
        End If
        Liberar_ProcesoDev(Me.TablaD.CurrentRow.Index)
    End Sub

    Private Sub TablaC_KeyDown(sender As Object, e As KeyEventArgs) Handles TablaC.KeyDown
        If e.KeyCode = Keys.E AndAlso e.Modifiers = Keys.Shift Then
            Me.TablaC.Item(ImpEfComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Me.TablaC.Item(DifComplemento.Index, Me.TablaC.CurrentRow.Index).Value
            If Me.TablaC.Item(ImpEfComplemento.Index, Me.TablaC.CurrentRow.Index).Value > 0 Then
                If Candado_Importe_Efectivocomple(Me.TablaC.CurrentRow.Index) = True Then ' se verifica candado
                    ' IMPORTE DE EFECTIVO Antiguo Codigo
                    Me.TablaC.Item(CtaEfComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Cuenta_Efectivo()
                    Me.TablaC.Columns(CtaEfComplemento.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
                Else
                    RadMessageBox.SetThemeName("MaterialBlueGrey")
                    If RadMessageBox.Show("El importe de efectivo Excede los $2,000 deseas usarlo?", Eventos.titulo_app, MessageBoxButtons.YesNo, RadMessageIcon.Question) = Windows.Forms.DialogResult.Yes Then
                        Me.TablaC.Item(CtaEfComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Cuenta_Efectivo()
                        Me.TablaC.Columns(CtaEfComplemento.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
                    Else
                        Me.TablaC.Item(ImpEfComplemento.Index, Me.TablaC.CurrentRow.Index).Value = 0
                        Exit Sub
                    End If
                End If
            Else
                Me.TablaC.Item(CtaEfComplemento.Index, Me.TablaC.CurrentRow.Index).Value = ""
            End If
        ElseIf e.KeyCode = Keys.T AndAlso e.Modifiers = Keys.Shift Then
            Me.TablaC.Item(ImpTComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Me.TablaC.Item(DifComplemento.Index, Me.TablaC.CurrentRow.Index).Value
            If Me.TablaC.Item(ImpTComplemento.Index, Me.TablaC.CurrentRow.Index).Value > 0 Then
                If Trim(Me.TablaC.Item(BancoOrigenTComplemento.Index, Me.TablaC.CurrentRow.Index).Value) <> "" Then
                    If Trim(Me.TablaC.Item(CtaOTComplemento.Index, Me.TablaC.CurrentRow.Index).Value) <> "" Then
                    Else
                        Dim posi As Integer = InStr(1, Me.TablaC.Item(BancoOrigenTComplemento.Index, Me.TablaC.CurrentRow.Index).Value, "-", CompareMethod.Binary)
                        Dim cuantos As Integer = Len(Me.TablaC.Item(BancoOrigenTComplemento.Index, Me.TablaC.CurrentRow.Index).Value) - Len(Me.TablaC.Item(BancoOrigenTComplemento.Index, Me.TablaC.CurrentRow.Index).Value.Substring(0, posi))
                        Dim Al As String = Me.TablaC.Item(BancoOrigenTComplemento.Index, Me.TablaC.CurrentRow.Index).Value.Substring(posi, cuantos)
                        Me.TablaC.Item(CtaOTComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes", "No_Cuenta", " Id_Empresa =" & Me.lstCliente.SelectItem & " and Alias = '" & Trim(Al) & "'", True)

                        Me.TablaC.Item(CtaBancosComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes INNER JOIN Catalogo_de_Cuentas ON Catalogo_de_Cuentas.Id_cat_Cuentas = Bancos_Clientes.Id_cat_Cuentas", "Catalogo_de_Cuentas.Cuenta", " Bancos_Clientes.Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos_Clientes.Alias = '" & Trim(Al) & "'", True)
                    End If
                Else

                End If

                If Trim(Me.TablaC.Item(BancoDtComplemento.Index, Me.TablaC.CurrentRow.Index).Value) <> "" Then
                    Try
                        If Trim(Me.TablaC.Item(CtaDTComplemento.Index, Me.TablaC.CurrentRow.Index).Value) <> "" And Trim(Me.TablaC.Item(CtaDTComplemento.Index, Me.TablaC.CurrentRow.Index).Value) <> "0" Then
                        Else
                            Dim posi As Integer = InStr(1, Me.TablaC.Item(BancoDtComplemento.Index, Me.TablaC.CurrentRow.Index).Value, "-", CompareMethod.Binary)
                            Dim Al As String = Me.TablaC.Item(BancoDtComplemento.Index, Me.TablaC.CurrentRow.Index).Value.Substring(0, posi - 1)
                            Me.TablaC.Item(CtaDTComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC", "Clabe", " Id_Empresa =" & Me.lstCliente.SelectItem & " and id_banco = '" & Trim(Al) & "' and  RFC = '" & Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value & "'", True)
                        End If
                    Catch ex As Exception

                    End Try
                Else
                    '  Banco_destinoComp()

                End If



                If Trim(UCase(Me.lblce.Text)) = "FALSE" Then
                    Me.TablaC.Columns(BancoOrigenTComplemento.Index).Visible = False
                    Me.TablaC.Columns(CtaOTComplemento.Index).Visible = False
                    Me.TablaC.Columns(BancoDtComplemento.Index).Visible = False
                    Me.TablaC.Columns(CtaDTComplemento.Index).Visible = False
                    Me.TablaC.Columns(FTComplemento.Index).Visible = True

                End If


            End If
        ElseIf e.KeyCode = Keys.C AndAlso e.Modifiers = Keys.Shift Then
            Me.TablaC.Item(ImpChComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Me.TablaC.Item(DifComplemento.Index, Me.TablaC.CurrentRow.Index).Value
            If Me.TablaC.Item(ImpChComplemento.Index, Me.TablaC.CurrentRow.Index).Value > 0 Then
                'Cheques

                Dim posi As Integer = 0
                Dim Al As String = ""
                If Trim(Me.TablaC.Item(BancoDEC.Index, Me.TablaC.CurrentRow.Index).Value) <> "" Then
                    If Trim(Me.TablaC.Item(CtaBancoDChC.Index, Me.TablaC.CurrentRow.Index).Value) <> "" Then


                    Else
                        posi = InStr(1, Me.TablaC.Item(BancoDEC.Index, Me.TablaC.CurrentRow.Index).Value, "-", CompareMethod.Binary)
                        Dim cuantos As Integer = Len(Me.TablaC.Item(BancoDEC.Index, Me.TablaC.CurrentRow.Index).Value) - Len(Me.TablaC.Item(BancoDEC.Index, Me.TablaC.CurrentRow.Index).Value.Substring(0, posi))
                        Al = Me.TablaC.Item(BancoDEC.Index, Me.TablaC.CurrentRow.Index).Value.Substring(posi, cuantos)
                        Me.TablaC.Item(CtaBancoDChC.Index, Me.TablaC.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes", "No_Cuenta", " Id_Empresa =" & Me.lstCliente.SelectItem & " and Alias = '" & Trim(Al) & "'", True)
                        Me.TablaC.Item(CtaChequesC.Index, Me.TablaC.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_Clientes INNER JOIN Catalogo_de_Cuentas ON Catalogo_de_Cuentas.Id_cat_Cuentas = Bancos_Clientes.Id_cat_Cuentas", "Catalogo_de_Cuentas.Cuenta", " Bancos_Clientes.Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos_Clientes.Alias = '" & Trim(Al) & "'", True)
                    End If
                Else

                End If
                'Cargar bancos Origen para ingresos de Cheques
                If Trim(Me.TablaC.Item(BancoCHComplemento.Index, Me.TablaC.CurrentRow.Index).Value) <> "" Then
                    If Trim(Me.TablaC.Item(CtaOchComplemento.Index, Me.TablaC.CurrentRow.Index).Value) <> "" Then
                        Dim largo As Integer = Len(Me.TablaC.Item(BancoCHComplemento.Index, Me.TablaC.CurrentRow.Index).Value)
                        Dim cadena As String = Trim(Me.TablaC.Item(BancoCHComplemento.Index, Me.TablaC.CurrentRow.Index).Value.ToString.Substring(largo - 3, 3))
                        largo = Len(Me.TablaC.Item(CtaOchComplemento.Index, Me.TablaC.CurrentRow.Index).Value)
                        Al = Me.TablaC.Item(CtaOchComplemento.Index, Me.TablaC.CurrentRow.Index).Value.Substring(largo - 3, 3)
                        If cadena <> Al Then
                            posi = InStr(1, Me.TablaC.Item(BancoCHComplemento.Index, Me.TablaC.CurrentRow.Index).Value, "-", CompareMethod.Binary)
                            Al = Trim(Me.TablaC.Item(BancoCHComplemento.Index, Me.TablaC.CurrentRow.Index).Value.Substring(0, posi - 1))
                            Me.TablaC.Item(CtaOchComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos.Clave = " & Trim(Al) & " and  RFC = '" & Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value & "' and Bancos_RFC.clabe like '%" & cadena & "%'", True)
                        End If
                    Else
                        posi = InStr(1, Me.TablaC.Item(BancoCHComplemento.Index, Me.TablaC.CurrentRow.Index).Value, "-", CompareMethod.Binary)
                        Al = Trim(Me.TablaC.Item(BancoCHComplemento.Index, Me.TablaC.CurrentRow.Index).Value.Substring(0, posi - 1))
                        Me.TablaC.Item(CtaOchComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & " and Bancos.Clave = " & Trim(Al) & " and  RFC = '" & Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value & "'", True)
                    End If
                Else
                    Me.TablaC.Item(BancoCHComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Banco_OrigenChe(Me.lstCliente.SelectItem, Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value)
                    Me.TablaC.Item(CtaOchComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Eventos.ObtenerValorDB("Bancos_RFC INNER JOIN Bancos ON Bancos.Id_Banco = Bancos_RFC.Id_Banco ", "Clabe", "    Id_Empresa =" & Me.lstCliente.SelectItem & "  and  RFC = '" & Me.TablaC.Item(RFCComplemento.Index, Me.TablaC.CurrentRow.Index).Value & "'", True)
                End If
                'Se Muestran Columnas de Contabilidad Electronica
                If Trim(UCase(Me.lblce.Text)) = "FALSE" Then
                    Me.TablaC.Columns(BancoCHComplemento.Index).Visible = False
                    Me.TablaC.Columns(CtaOchComplemento.Index).Visible = False
                    Me.TablaC.Columns(NoChComplemento.Index).Visible = False
                    Me.TablaC.Columns(FCHComplemento.Index).Visible = True
                End If

            End If
        ElseIf e.KeyCode = Keys.A AndAlso e.Modifiers = Keys.Shift Then 'Anticipos
            Me.TablaC.Item(AntiComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Me.TablaC.Item(DifComplemento.Index, Me.TablaC.CurrentRow.Index).Value
            If Me.TablaC.Item(AntiComplemento.Index, Me.TablaC.CurrentRow.Index).Value > 0 Then

                Me.TablaC.Item(CtaAntiComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Cuenta_Anticipo()
                Me.TablaC.Columns(CtaAntiComplemento.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
            Else
                Me.TablaC.Item(CtaAntiComplemento.Index, Me.TablaC.CurrentRow.Index).Value = ""
            End If
        ElseIf e.KeyCode = Keys.J AndAlso e.Modifiers = Keys.Shift Then 'Ajustes
            Me.TablaC.Item(AjusComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Me.TablaC.Item(DifComplemento.Index, Me.TablaC.CurrentRow.Index).Value
            If Me.TablaC.Item(AjusComplemento.Index, Me.TablaC.CurrentRow.Index).Value <> 0 Then
                If Candado_Importe_Efectivocomple(Me.TablaC.CurrentRow.Index) = True Then ' se verifica candado
                    Me.TablaC.Item(CtaAjusComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Cuenta_Efectivo()
                    Me.TablaC.Columns(CtaAjusComplemento.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
                Else
                    If RadMessageBox.Show("El importe de efectivo Excede los $2,000 deseas usarlo?", Eventos.titulo_app, MessageBoxButtons.YesNo, RadMessageIcon.Question) = Windows.Forms.DialogResult.Yes Then

                        Me.TablaC.Item(CtaAjusComplemento.Index, Me.TablaC.CurrentRow.Index).Value = Cuenta_Efectivo()
                        Me.TablaC.Columns(CtaAjusComplemento.Index).AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells
                    Else
                        Me.TablaC.Item(AjusComplemento.Index, Me.TablaC.CurrentRow.Index).Value = 0
                        Exit Sub
                    End If
                End If
            Else
                Me.TablaC.Item(CtaAjusComplemento.Index, Me.TablaC.CurrentRow.Index).Value = ""
            End If
        End If
        If e.KeyCode = Keys.A AndAlso e.Modifiers = Keys.Control Then
            'Programar calculo automatico de numeros de poliza
            Dim Inicial As Integer = InputBox("Teclea el numero de poliza Inicial:", Eventos.titulo_app, 1)
            For Each Fila As DataGridViewRow In TablaC.Rows
                If Fila.Cells(NumPolComplemento.Index).Selected = True Then
                    Fila.Cells(NumPolComplemento.Index).Value = Inicial
                    Inicial += 1
                    Liberar_ProcesoComple(Fila.Index)
                End If
            Next
        End If
        Try
            Liberar_ProcesoComple(Me.TablaC.CurrentRow.Index)
            Me.TablaC.CurrentRow.Cells(0).Selected = True
        Catch ex As Exception

        End Try

    End Sub

    Private Sub CrearPolizaManualToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles CrearPolizaManualToolStripMenuItem.Click
        Eventos.Abrir_form(Control_de_Polizas)
    End Sub



    Private Sub TablaC_DataError(sender As Object, e As DataGridViewDataErrorEventArgs) Handles TablaC.DataError

    End Sub

    Private Sub TablaD_DataError(sender As Object, e As DataGridViewDataErrorEventArgs) Handles TablaD.DataError

    End Sub

    Private Sub TablaImportar_DataError(sender As Object, e As DataGridViewDataErrorEventArgs) Handles TablaImportar.DataError

    End Sub

    Private Sub SP1_DoWork(sender As Object, e As System.ComponentModel.DoWorkEventArgs) Handles SP1.DoWork
        My.Forms.Inicio.txtServerDB.Text = serV
        Facturas(Dato)
        Cargar_valores_contables()
        Color_Columnas()
        Dim frm As New BarraProcesovb
        frm.Show()
        frm.Text = "Cargando Valores predefinidos por favor espere..."
        frm.Barra.Minimum = 0
        frm.Barra.Maximum = Me.TablaImportar.Rows.Count
        For i As Integer = 0 To Me.TablaImportar.Rows.Count - 1
            Liberar_Proceso(i)
            Cargar_Pol_Modelo(Me.TablaImportar.Item(RFCE.Index, i).Value, Me.TablaImportar.Item(Fecha_Emi.Index, i).Value, i)
            Me.TablaImportar_CellEndEdit(Me.TablaImportar, Nothing)
            frm.Barra.Value = i
        Next
        frm.Close()
    End Sub

    Private Sub SP2_DoWork(sender As Object, e As System.ComponentModel.DoWorkEventArgs) Handles SP2.DoWork
        RadMessageBox.SetThemeName("MaterialBlueGrey")
        My.Forms.Inicio.txtServerDB.Text = serV
        Complementos(DatoC)
        Cargar_valores_contablesC()
        Color_ColumnasC()
        Dim frm As New BarraProcesovb
        frm.Show()
        frm.Text = "Verificando informacion de pagos por favor espere..."
        frm.Barra.Minimum = 0
        frm.Barra.Maximum = Me.TablaC.Rows.Count
        For i As Integer = 0 To Me.TablaC.Rows.Count - 1
            Liberar_ProcesoComple(i)
            frm.Barra.Value = i
        Next
        frm.Close()
        RadMessageBox.Show("Proceso Terminado...", Eventos.titulo_app, MessageBoxButtons.OK, RadMessageIcon.Info)
    End Sub

End Class